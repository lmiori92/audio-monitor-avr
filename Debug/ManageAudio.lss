
ManageAudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00001a3e  00001ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001fc  00800198  00800198  00001c0a  2**0
                  ALLOC
  3 .stab         00004608  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002562  00000000  00000000  00006214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008776  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	4e c0       	rjmp	.+156    	; 0x9e <StackPaint>
       2:	72 c0       	rjmp	.+228    	; 0xe8 <__bad_interrupt>
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	70 c0       	rjmp	.+224    	; 0xe8 <__bad_interrupt>
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	6e c0       	rjmp	.+220    	; 0xe8 <__bad_interrupt>
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	6c c0       	rjmp	.+216    	; 0xe8 <__bad_interrupt>
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	5a c9       	rjmp	.-3404   	; 0xfffff2c8 <__eeprom_end+0xff7ef2c8>
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	68 c0       	rjmp	.+208    	; 0xe8 <__bad_interrupt>
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	66 c0       	rjmp	.+204    	; 0xe8 <__bad_interrupt>
      1c:	f7 c4       	rjmp	.+2542   	; 0xa0c <__vector_14>
      1e:	64 c0       	rjmp	.+200    	; 0xe8 <__bad_interrupt>
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	62 c0       	rjmp	.+196    	; 0xe8 <__bad_interrupt>
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	05 a8       	ldd	r0, Z+53	; 0x35
      28:	4c cd       	rjmp	.-1384   	; 0xfffffac2 <__eeprom_end+0xff7efac2>
      2a:	b2 d4       	rcall	.+2404   	; 0x990 <display_load_vumeter_harrows+0x3e>
      2c:	4e b9       	out	0x0e, r20	; 14
      2e:	38 36       	cpi	r19, 0x68	; 104
      30:	a9 02       	muls	r26, r25
      32:	0c 50       	subi	r16, 0x0C	; 12
      34:	b9 91       	ld	r27, Y+
      36:	86 88       	ldd	r8, Z+22	; 0x16
      38:	08 3c       	cpi	r16, 0xC8	; 200
      3a:	a6 aa       	std	Z+54, r10	; 0x36
      3c:	aa 2a       	or	r10, r26
      3e:	be 00       	.word	0x00be	; ????
      40:	00 00       	nop
      42:	80 3f       	cpi	r24, 0xF0	; 240
      44:	08 00       	.word	0x0008	; ????
      46:	00 00       	nop
      48:	be 92       	st	-X, r11
      4a:	24 49       	sbci	r18, 0x94	; 148
      4c:	12 3e       	cpi	r17, 0xE2	; 226
      4e:	ab aa       	std	Y+51, r10	; 0x33
      50:	aa 2a       	or	r10, r26
      52:	be cd       	rjmp	.-1156   	; 0xfffffbd0 <__eeprom_end+0xff7efbd0>
      54:	cc cc       	rjmp	.-1640   	; 0xfffff9ee <__eeprom_end+0xff7ef9ee>
      56:	4c 3e       	cpi	r20, 0xEC	; 236
      58:	00 00       	nop
      5a:	00 80       	ld	r0, Z
      5c:	be ab       	std	Y+54, r27	; 0x36
      5e:	aa aa       	std	Y+50, r10	; 0x32
      60:	aa 3e       	cpi	r26, 0xEA	; 234
      62:	00 00       	nop
      64:	00 00       	nop
      66:	bf 00       	.word	0x00bf	; ????
      68:	00 00       	nop
      6a:	80 3f       	cpi	r24, 0xF0	; 240
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	00 08       	sbc	r0, r0
      72:	41 78       	andi	r20, 0x81	; 129
      74:	d3 bb       	out	0x13, r29	; 19
      76:	43 87       	std	Z+11, r20	; 0x0b
      78:	d1 13       	cpse	r29, r17
      7a:	3d 19       	sub	r19, r13
      7c:	0e 3c       	cpi	r16, 0xCE	; 206
      7e:	c3 bd       	out	0x23, r28	; 35
      80:	42 82       	std	Z+2, r4	; 0x02
      82:	ad 2b       	or	r26, r29
      84:	3e 68       	ori	r19, 0x8E	; 142
      86:	ec 82       	std	Y+4, r14	; 0x04
      88:	76 be       	out	0x36, r7	; 54
      8a:	d9 8f       	std	Y+25, r29	; 0x19
      8c:	e1 a9       	ldd	r30, Z+49	; 0x31
      8e:	3e 4c       	sbci	r19, 0xCE	; 206
      90:	80 ef       	ldi	r24, 0xF0	; 240
      92:	ff be       	out	0x3f, r15	; 63
      94:	01 c4       	rjmp	.+2050   	; 0x898 <display_string_center+0x28>
      96:	ff 7f       	andi	r31, 0xFF	; 255
      98:	3f 00       	.word	0x003f	; ????
      9a:	00 00       	nop
	...

0000009e <StackPaint>:
      9e:	e4 e9       	ldi	r30, 0x94	; 148
      a0:	f3 e0       	ldi	r31, 0x03	; 3
      a2:	85 ec       	ldi	r24, 0xC5	; 197
      a4:	94 e0       	ldi	r25, 0x04	; 4
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.cmp>

000000a8 <.loop>:
      a8:	81 93       	st	Z+, r24

000000aa <.cmp>:
      aa:	ef 35       	cpi	r30, 0x5F	; 95
      ac:	f9 07       	cpc	r31, r25
      ae:	e0 f3       	brcs	.-8      	; 0xa8 <.loop>
      b0:	d9 f3       	breq	.-10     	; 0xa8 <.loop>
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf e5       	ldi	r28, 0x5F	; 95
      b8:	d4 e0       	ldi	r29, 0x04	; 4
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e6       	ldi	r26, 0x60	; 96
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	ee e3       	ldi	r30, 0x3E	; 62
      c6:	fa e1       	ldi	r31, 0x1A	; 26
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	a8 39       	cpi	r26, 0x98	; 152
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	23 e0       	ldi	r18, 0x03	; 3
      d6:	a8 e9       	ldi	r26, 0x98	; 152
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a4 39       	cpi	r26, 0x94	; 148
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	36 d8       	rcall	.-3988   	; 0xfffff152 <__eeprom_end+0xff7ef152>
      e6:	a9 cc       	rjmp	.-1710   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>

000000e8 <__bad_interrupt>:
      e8:	d9 c8       	rjmp	.-3662   	; 0xfffff29c <__eeprom_end+0xff7ef29c>

000000ea <tbl_window>:
      ea:	3d 0a       	sbc	r3, r29
      ec:	85 0a       	sbc	r8, r21
      ee:	5e 0b       	sbc	r21, r30
      f0:	c6 0c       	add	r12, r6
      f2:	b8 0e       	add	r11, r24
      f4:	31 11       	cpse	r19, r1
      f6:	29 14       	cp	r2, r9
      f8:	9a 17       	cp	r25, r26
      fa:	7c 1b       	sub	r23, r28
      fc:	c4 1f       	adc	r28, r20
      fe:	68 24       	eor	r6, r8
     100:	5c 29       	or	r21, r12
     102:	96 2e       	mov	r9, r22
     104:	06 34       	cpi	r16, 0x46	; 70
     106:	a1 39       	cpi	r26, 0x91	; 145
     108:	58 3f       	cpi	r21, 0xF8	; 248
     10a:	1e 45       	sbci	r17, 0x5E	; 94
     10c:	e3 4a       	sbci	r30, 0xA3	; 163
     10e:	9a 50       	subi	r25, 0x0A	; 10
     110:	35 56       	subi	r19, 0x65	; 101
     112:	a6 5b       	subi	r26, 0xB6	; 182
     114:	df 60       	ori	r29, 0x0F	; 15
     116:	d4 65       	ori	r29, 0x54	; 84
     118:	78 6a       	ori	r23, 0xA8	; 168
     11a:	c0 6e       	ori	r28, 0xE0	; 224
     11c:	a1 72       	andi	r26, 0x21	; 33
     11e:	12 76       	andi	r17, 0x62	; 98
     120:	0b 79       	andi	r16, 0x9B	; 155
     122:	83 7b       	andi	r24, 0xB3	; 179
     124:	75 7d       	andi	r23, 0xD5	; 213
     126:	dd 7e       	andi	r29, 0xED	; 237
     128:	b6 7f       	andi	r27, 0xF6	; 246
     12a:	fe 7f       	andi	r31, 0xFE	; 254
     12c:	b6 7f       	andi	r27, 0xF6	; 246
     12e:	dd 7e       	andi	r29, 0xED	; 237
     130:	75 7d       	andi	r23, 0xD5	; 213
     132:	83 7b       	andi	r24, 0xB3	; 179
     134:	0b 79       	andi	r16, 0x9B	; 155
     136:	12 76       	andi	r17, 0x62	; 98
     138:	a1 72       	andi	r26, 0x21	; 33
     13a:	c0 6e       	ori	r28, 0xE0	; 224
     13c:	78 6a       	ori	r23, 0xA8	; 168
     13e:	d4 65       	ori	r29, 0x54	; 84
     140:	df 60       	ori	r29, 0x0F	; 15
     142:	a6 5b       	subi	r26, 0xB6	; 182
     144:	35 56       	subi	r19, 0x65	; 101
     146:	9a 50       	subi	r25, 0x0A	; 10
     148:	e3 4a       	sbci	r30, 0xA3	; 163
     14a:	1e 45       	sbci	r17, 0x5E	; 94
     14c:	58 3f       	cpi	r21, 0xF8	; 248
     14e:	a1 39       	cpi	r26, 0x91	; 145
     150:	06 34       	cpi	r16, 0x46	; 70
     152:	96 2e       	mov	r9, r22
     154:	5c 29       	or	r21, r12
     156:	68 24       	eor	r6, r8
     158:	c4 1f       	adc	r28, r20
     15a:	7c 1b       	sub	r23, r28
     15c:	9a 17       	cp	r25, r26
     15e:	29 14       	cp	r2, r9
     160:	31 11       	cpse	r19, r1
     162:	b8 0e       	add	r11, r24
     164:	c6 0c       	add	r12, r6
     166:	5e 0b       	sbc	r21, r30
     168:	85 0a       	sbc	r8, r21

0000016a <tbl_cos_sin>:
     16a:	ff 7f       	andi	r31, 0xFF	; 255
     16c:	00 00       	nop
     16e:	61 7f       	andi	r22, 0xF1	; 241
     170:	8b 0c       	add	r8, r11
     172:	89 7d       	andi	r24, 0xD9	; 217
     174:	f8 18       	sub	r15, r8
     176:	7c 7a       	andi	r23, 0xAC	; 172
     178:	27 25       	eor	r18, r7
     17a:	40 76       	andi	r20, 0x60	; 96
     17c:	fb 30       	cpi	r31, 0x0B	; 11
     17e:	e1 70       	andi	r30, 0x01	; 1
     180:	56 3c       	cpi	r21, 0xC6	; 198
     182:	6c 6a       	ori	r22, 0xAC	; 172
     184:	1c 47       	sbci	r17, 0x7C	; 124
     186:	f1 62       	ori	r31, 0x21	; 33
     188:	33 51       	subi	r19, 0x13	; 19
     18a:	81 5a       	subi	r24, 0xA1	; 161
     18c:	81 5a       	subi	r24, 0xA1	; 161
     18e:	33 51       	subi	r19, 0x13	; 19
     190:	f1 62       	ori	r31, 0x21	; 33
     192:	1c 47       	sbci	r17, 0x7C	; 124
     194:	6c 6a       	ori	r22, 0xAC	; 172
     196:	56 3c       	cpi	r21, 0xC6	; 198
     198:	e1 70       	andi	r30, 0x01	; 1
     19a:	fb 30       	cpi	r31, 0x0B	; 11
     19c:	40 76       	andi	r20, 0x60	; 96
     19e:	27 25       	eor	r18, r7
     1a0:	7c 7a       	andi	r23, 0xAC	; 172
     1a2:	f8 18       	sub	r15, r8
     1a4:	89 7d       	andi	r24, 0xD9	; 217
     1a6:	8b 0c       	add	r8, r11
     1a8:	61 7f       	andi	r22, 0xF1	; 241
     1aa:	00 00       	nop
     1ac:	fe 7f       	andi	r31, 0xFE	; 254
     1ae:	75 f3       	brhs	.-36     	; 0x18c <tbl_cos_sin+0x22>
     1b0:	61 7f       	andi	r22, 0xF1	; 241
     1b2:	08 e7       	ldi	r16, 0x78	; 120
     1b4:	89 7d       	andi	r24, 0xD9	; 217
     1b6:	d9 da       	rcall	.-2638   	; 0xfffff76a <__eeprom_end+0xff7ef76a>
     1b8:	7c 7a       	andi	r23, 0xAC	; 172
     1ba:	05 cf       	rjmp	.-502    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     1bc:	40 76       	andi	r20, 0x60	; 96
     1be:	aa c3       	rjmp	.+1876   	; 0x914 <display_load_bars_vert+0x50>
     1c0:	e1 70       	andi	r30, 0x01	; 1
     1c2:	e4 b8       	out	0x04, r14	; 4
     1c4:	6c 6a       	ori	r22, 0xAC	; 172
     1c6:	cd ae       	std	Y+61, r12	; 0x3d
     1c8:	f1 62       	ori	r31, 0x21	; 33
     1ca:	7f a5       	ldd	r23, Y+47	; 0x2f
     1cc:	81 5a       	subi	r24, 0xA1	; 161
     1ce:	0f 9d       	mul	r16, r15
     1d0:	33 51       	subi	r19, 0x13	; 19
     1d2:	94 95       	.word	0x9594	; ????
     1d4:	1c 47       	sbci	r17, 0x7C	; 124
     1d6:	1f 8f       	std	Y+31, r17	; 0x1f
     1d8:	56 3c       	cpi	r21, 0xC6	; 198
     1da:	c0 89       	ldd	r28, Z+16	; 0x10
     1dc:	fb 30       	cpi	r31, 0x0B	; 11
     1de:	84 85       	ldd	r24, Z+12	; 0x0c
     1e0:	27 25       	eor	r18, r7
     1e2:	77 82       	std	Z+7, r7	; 0x07
     1e4:	f8 18       	sub	r15, r8
     1e6:	9f 80       	ldd	r9, Y+7	; 0x07
     1e8:	8b 0c       	add	r8, r11

000001ea <tbl_bitrev>:
     1ea:	00 00       	nop
     1ec:	80 00       	.word	0x0080	; ????
     1ee:	40 00       	.word	0x0040	; ????
     1f0:	c0 00       	.word	0x00c0	; ????
     1f2:	20 00       	.word	0x0020	; ????
     1f4:	a0 00       	.word	0x00a0	; ????
     1f6:	60 00       	.word	0x0060	; ????
     1f8:	e0 00       	.word	0x00e0	; ????
     1fa:	10 00       	.word	0x0010	; ????
     1fc:	90 00       	.word	0x0090	; ????
     1fe:	50 00       	.word	0x0050	; ????
     200:	d0 00       	.word	0x00d0	; ????
     202:	30 00       	.word	0x0030	; ????
     204:	b0 00       	.word	0x00b0	; ????
     206:	70 00       	.word	0x0070	; ????
     208:	f0 00       	.word	0x00f0	; ????
     20a:	08 00       	.word	0x0008	; ????
     20c:	88 00       	.word	0x0088	; ????
     20e:	48 00       	.word	0x0048	; ????
     210:	c8 00       	.word	0x00c8	; ????
     212:	28 00       	.word	0x0028	; ????
     214:	a8 00       	.word	0x00a8	; ????
     216:	68 00       	.word	0x0068	; ????
     218:	e8 00       	.word	0x00e8	; ????
     21a:	18 00       	.word	0x0018	; ????
     21c:	98 00       	.word	0x0098	; ????
     21e:	58 00       	.word	0x0058	; ????
     220:	d8 00       	.word	0x00d8	; ????
     222:	38 00       	.word	0x0038	; ????
     224:	b8 00       	.word	0x00b8	; ????
     226:	78 00       	.word	0x0078	; ????
     228:	f8 00       	.word	0x00f8	; ????

0000022a <fft_input>:
;----------------------------------------------------------------------------;
#ifndef INPUT_NOUSE
.global fft_input
.func fft_input
fft_input:
	pushw	T2H,T2L
     22a:	3f 92       	push	r3
     22c:	2f 92       	push	r2
	pushw	AH,AL
     22e:	1f 93       	push	r17
     230:	0f 93       	push	r16
	pushw	YH,YL
     232:	df 93       	push	r29
     234:	cf 93       	push	r28

	movw	XL, EL				;X = array_src;
     236:	dc 01       	movw	r26, r24
	movw	YL, DL				;Y = array_bfly;
     238:	eb 01       	movw	r28, r22
	clr	EH				;Zero
     23a:	99 27       	eor	r25, r25
	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
     23c:	ea ee       	ldi	r30, 0xEA	; 234
     23e:	f0 e0       	ldi	r31, 0x00	; 0
	ldiw	AH,AL, FFT_N			;A = FFT_N;
     240:	00 e4       	ldi	r16, 0x40	; 64
     242:	10 e0       	ldi	r17, 0x00	; 0
1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
     244:	25 91       	lpm	r18, Z+
     246:	35 91       	lpm	r19, Z+
	ldw	CH,CL, X+			;C = *X++; (I-axis)
     248:	4d 91       	ld	r20, X+
     24a:	5d 91       	ld	r21, X+
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
     24c:	b5 03       	fmuls	r19, r21
     24e:	b0 01       	movw	r22, r0
     250:	2c 03       	fmul	r18, r20
     252:	10 01       	movw	r2, r0
     254:	69 1f       	adc	r22, r25
     256:	bc 03       	fmulsu	r19, r20
     258:	79 0b       	sbc	r23, r25
     25a:	30 0c       	add	r3, r0
     25c:	61 1d       	adc	r22, r1
     25e:	79 1f       	adc	r23, r25
     260:	da 03       	fmulsu	r21, r18
     262:	79 0b       	sbc	r23, r25
     264:	30 0c       	add	r3, r0
     266:	61 1d       	adc	r22, r1
     268:	79 1f       	adc	r23, r25
	stw	Y+, DH,DL			;*Y++ = D;
     26a:	69 93       	st	Y+, r22
     26c:	79 93       	st	Y+, r23
#ifdef INPUT_IQ
	ldw	CH,CL, X+			;C = *X++; (Q-axis)
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
#endif
	stw	Y+, DH,DL			;*Y++ = D;
     26e:	69 93       	st	Y+, r22
     270:	79 93       	st	Y+, r23
	subiw	AH,AL, 1			;while(--A)
     272:	01 50       	subi	r16, 0x01	; 1
     274:	10 40       	sbci	r17, 0x00	; 0
	brne	1b				;/
     276:	31 f7       	brne	.-52     	; 0x244 <fft_input+0x1a>

	popw	YH,YL
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
	popw	AH,AL
     27c:	0f 91       	pop	r16
     27e:	1f 91       	pop	r17
	popw	T2H,T2L
     280:	2f 90       	pop	r2
     282:	3f 90       	pop	r3
	clr	r1
     284:	11 24       	eor	r1, r1
	ret
     286:	08 95       	ret

00000288 <fft_execute>:

;----------------------------------------------------------------------------;
.global fft_execute
.func fft_execute
fft_execute:
	pushw	T2H,T2L
     288:	3f 92       	push	r3
     28a:	2f 92       	push	r2
	pushw	T4H,T4L
     28c:	5f 92       	push	r5
     28e:	4f 92       	push	r4
	pushw	T6H,T6L
     290:	7f 92       	push	r7
     292:	6f 92       	push	r6
	pushw	T8H,T8L
     294:	9f 92       	push	r9
     296:	8f 92       	push	r8
	pushw	T10H,T10L
     298:	bf 92       	push	r11
     29a:	af 92       	push	r10
	pushw	T12H,T12L
     29c:	df 92       	push	r13
     29e:	cf 92       	push	r12
	pushw	T14H,T14L
     2a0:	ff 92       	push	r15
     2a2:	ef 92       	push	r14
	pushw	AH,AL
     2a4:	1f 93       	push	r17
     2a6:	0f 93       	push	r16
	pushw	YH,YL
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28

	movw	ZL, EL				;Z = array_bfly;
     2ac:	fc 01       	movw	r30, r24
	ldiw	EH,EL, 1			;E = 1;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
     2b2:	a0 e2       	ldi	r26, 0x20	; 32
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
1:	ldi	AL, 4				;T12 = E; (angular speed)
     2b6:	04 e0       	ldi	r16, 0x04	; 4
	mul	EL, AL				;
     2b8:	80 9f       	mul	r24, r16
	movw	T12L, T0L			;
     2ba:	60 01       	movw	r12, r0
	mul	EH, AL				;
     2bc:	90 9f       	mul	r25, r16
	add	T12H, T0L			;/
     2be:	d0 0c       	add	r13, r0
	movw	T14L, EL			;T14 = E;
     2c0:	7c 01       	movw	r14, r24
	pushw	EH,EL
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
	movw	YL, ZL				;Z = &array_bfly[0];
     2c6:	ef 01       	movw	r28, r30
	mul	XL, AL				;Y = &array_bfly[X];
     2c8:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
     2ca:	c0 0d       	add	r28, r0
     2cc:	d1 1d       	adc	r29, r1
	mul	XH, AL				;
     2ce:	b0 9f       	mul	r27, r16
	add	YH, T0L				;/
     2d0:	d0 0d       	add	r29, r0
	pushw	ZH,ZL
     2d2:	ff 93       	push	r31
     2d4:	ef 93       	push	r30
2:	clrw	T10H,T10L			;T10 = 0 (angle)
     2d6:	bb 24       	eor	r11, r11
     2d8:	aa 24       	eor	r10, r10
	clr	EH				;Zero reg.
     2da:	99 27       	eor	r25, r25
3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
     2dc:	00 81       	ld	r16, Z
     2de:	11 81       	ldd	r17, Z+1	; 0x01
	asrw	AH,AL				;
     2e0:	15 95       	asr	r17
     2e2:	07 95       	ror	r16
	lddw	DH,DL, Y+0			;
     2e4:	68 81       	ld	r22, Y
     2e6:	79 81       	ldd	r23, Y+1	; 0x01
	asrw	DH,DL				;
     2e8:	75 95       	asr	r23
     2ea:	67 95       	ror	r22
	movw	CL, AL				;
     2ec:	a8 01       	movw	r20, r16
	subw	AH,AL, DH,DL			;
     2ee:	06 1b       	sub	r16, r22
     2f0:	17 0b       	sbc	r17, r23
	addw	CH,CL, DH,DL			;
     2f2:	46 0f       	add	r20, r22
     2f4:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
     2f6:	41 93       	st	Z+, r20
     2f8:	51 93       	st	Z+, r21
	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
     2fa:	20 81       	ld	r18, Z
     2fc:	31 81       	ldd	r19, Z+1	; 0x01
	asrw	BH,BL				;
     2fe:	35 95       	asr	r19
     300:	27 95       	ror	r18
	lddw	DH,DL, Y+2			;
     302:	6a 81       	ldd	r22, Y+2	; 0x02
     304:	7b 81       	ldd	r23, Y+3	; 0x03
	asrw	DH,DL				;
     306:	75 95       	asr	r23
     308:	67 95       	ror	r22
	movw	CL, BL				;
     30a:	a9 01       	movw	r20, r18
	subw	BH,BL, DH,DL			;
     30c:	26 1b       	sub	r18, r22
     30e:	37 0b       	sbc	r19, r23
	addw	CH,CL, DH,DL			;
     310:	46 0f       	add	r20, r22
     312:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
     314:	41 93       	st	Z+, r20
     316:	51 93       	st	Z+, r21
	movw	T0L, ZL
     318:	0f 01       	movw	r0, r30
	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
     31a:	ea e6       	ldi	r30, 0x6A	; 106
     31c:	f1 e0       	ldi	r31, 0x01	; 1
	addw	ZH,ZL, T10H,T10L		;
     31e:	ea 0d       	add	r30, r10
     320:	fb 1d       	adc	r31, r11
	lpmw	CH,CL, Z+			;
     322:	45 91       	lpm	r20, Z+
     324:	55 91       	lpm	r21, Z+
	lpmw	DH,DL, Z+			;/
     326:	65 91       	lpm	r22, Z+
     328:	75 91       	lpm	r23, Z+
	movw	ZL, T0L
     32a:	f0 01       	movw	r30, r0
	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
     32c:	95 03       	fmuls	r17, r21
     32e:	20 01       	movw	r4, r0
     330:	0c 03       	fmul	r16, r20
     332:	10 01       	movw	r2, r0
     334:	49 1e       	adc	r4, r25
     336:	9c 03       	fmulsu	r17, r20
     338:	59 0a       	sbc	r5, r25
     33a:	30 0c       	add	r3, r0
     33c:	41 1c       	adc	r4, r1
     33e:	59 1e       	adc	r5, r25
     340:	d8 03       	fmulsu	r21, r16
     342:	59 0a       	sbc	r5, r25
     344:	30 0c       	add	r3, r0
     346:	41 1c       	adc	r4, r1
     348:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
     34a:	b7 03       	fmuls	r19, r23
     34c:	40 01       	movw	r8, r0
     34e:	2e 03       	fmul	r18, r22
     350:	30 01       	movw	r6, r0
     352:	89 1e       	adc	r8, r25
     354:	be 03       	fmulsu	r19, r22
     356:	99 0a       	sbc	r9, r25
     358:	70 0c       	add	r7, r0
     35a:	81 1c       	adc	r8, r1
     35c:	99 1e       	adc	r9, r25
     35e:	fa 03       	fmulsu	r23, r18
     360:	99 0a       	sbc	r9, r25
     362:	70 0c       	add	r7, r0
     364:	81 1c       	adc	r8, r1
     366:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
     368:	26 0c       	add	r2, r6
     36a:	37 1c       	adc	r3, r7
     36c:	48 1c       	adc	r4, r8
     36e:	59 1c       	adc	r5, r9
	stw	Y+, T4H,T4L			;/
     370:	49 92       	st	Y+, r4
     372:	59 92       	st	Y+, r5
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
     374:	b5 03       	fmuls	r19, r21
     376:	20 01       	movw	r4, r0
     378:	2c 03       	fmul	r18, r20
     37a:	10 01       	movw	r2, r0
     37c:	49 1e       	adc	r4, r25
     37e:	bc 03       	fmulsu	r19, r20
     380:	59 0a       	sbc	r5, r25
     382:	30 0c       	add	r3, r0
     384:	41 1c       	adc	r4, r1
     386:	59 1e       	adc	r5, r25
     388:	da 03       	fmulsu	r21, r18
     38a:	59 0a       	sbc	r5, r25
     38c:	30 0c       	add	r3, r0
     38e:	41 1c       	adc	r4, r1
     390:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
     392:	97 03       	fmuls	r17, r23
     394:	40 01       	movw	r8, r0
     396:	0e 03       	fmul	r16, r22
     398:	30 01       	movw	r6, r0
     39a:	89 1e       	adc	r8, r25
     39c:	9e 03       	fmulsu	r17, r22
     39e:	99 0a       	sbc	r9, r25
     3a0:	70 0c       	add	r7, r0
     3a2:	81 1c       	adc	r8, r1
     3a4:	99 1e       	adc	r9, r25
     3a6:	f8 03       	fmulsu	r23, r16
     3a8:	99 0a       	sbc	r9, r25
     3aa:	70 0c       	add	r7, r0
     3ac:	81 1c       	adc	r8, r1
     3ae:	99 1e       	adc	r9, r25
	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
     3b0:	26 18       	sub	r2, r6
     3b2:	37 08       	sbc	r3, r7
     3b4:	48 08       	sbc	r4, r8
     3b6:	59 08       	sbc	r5, r9
	stw	Y+, T4H,T4L			;/
     3b8:	49 92       	st	Y+, r4
     3ba:	59 92       	st	Y+, r5
	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
     3bc:	ac 0c       	add	r10, r12
     3be:	bd 1c       	adc	r11, r13
#if FFT_N >= 128
	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
#else
	sbrs	T10L, FFT_B + 1
     3c0:	a7 fe       	sbrs	r10, 7
#endif
	rjmp	3b				;/
     3c2:	8c cf       	rjmp	.-232    	; 0x2dc <fft_execute+0x54>
	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
     3c4:	04 e0       	ldi	r16, 0x04	; 4
	mul	XL, AL
     3c6:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
     3c8:	c0 0d       	add	r28, r0
     3ca:	d1 1d       	adc	r29, r1
	addw	ZH,ZL, T0H,T0L			;
     3cc:	e0 0d       	add	r30, r0
     3ce:	f1 1d       	adc	r31, r1
	mul	XH, AL				;
     3d0:	b0 9f       	mul	r27, r16
	add	YH, T0L				;
     3d2:	d0 0d       	add	r29, r0
	add	ZH, T0L				;/
     3d4:	f0 0d       	add	r31, r0
	ldi	EL, 1				;while(--T14)
     3d6:	81 e0       	ldi	r24, 0x01	; 1
	subw	T14H,T14L, EH,EL		;
     3d8:	e8 1a       	sub	r14, r24
     3da:	f9 0a       	sbc	r15, r25
	rjne	2b				;/
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <fft_execute+0x158>
     3de:	7b cf       	rjmp	.-266    	; 0x2d6 <fft_execute+0x4e>
	popw	ZH,ZL
     3e0:	ef 91       	pop	r30
     3e2:	ff 91       	pop	r31
	popw	EH,EL
     3e4:	8f 91       	pop	r24
     3e6:	9f 91       	pop	r25
	lslw	EH,EL				;E *= 2;
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
	lsrw	XH,XL				;while(X /= 2)
     3ec:	b6 95       	lsr	r27
     3ee:	a7 95       	ror	r26
	adiw	XL, 0				;
     3f0:	10 96       	adiw	r26, 0x00	; 0
	rjne	1b				;/
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <fft_execute+0x16e>
     3f4:	60 cf       	rjmp	.-320    	; 0x2b6 <fft_execute+0x2e>

	popw	YH,YL
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
	popw	AH,AL
     3fa:	0f 91       	pop	r16
     3fc:	1f 91       	pop	r17
	popw	T14H,T14L
     3fe:	ef 90       	pop	r14
     400:	ff 90       	pop	r15
	popw	T12H,T12L
     402:	cf 90       	pop	r12
     404:	df 90       	pop	r13
	popw	T10H,T10L
     406:	af 90       	pop	r10
     408:	bf 90       	pop	r11
	popw	T8H,T8L
     40a:	8f 90       	pop	r8
     40c:	9f 90       	pop	r9
	popw	T6H,T6L
     40e:	6f 90       	pop	r6
     410:	7f 90       	pop	r7
	popw	T4H,T4L
     412:	4f 90       	pop	r4
     414:	5f 90       	pop	r5
	popw	T2H,T2L
     416:	2f 90       	pop	r2
     418:	3f 90       	pop	r3
;	clr	r1
	ret
     41a:	08 95       	ret

0000041c <fft_output>:

;----------------------------------------------------------------------------;
.global fft_output
.func fft_output
fft_output:
	pushw	T2H,T2L
     41c:	3f 92       	push	r3
     41e:	2f 92       	push	r2
	pushw	T4H,T4L
     420:	5f 92       	push	r5
     422:	4f 92       	push	r4
	pushw	T6H,T6L
     424:	7f 92       	push	r7
     426:	6f 92       	push	r6
	pushw	T8H,T8L
     428:	9f 92       	push	r9
     42a:	8f 92       	push	r8
	pushw	T10H,T10L
     42c:	bf 92       	push	r11
     42e:	af 92       	push	r10
	pushw	AH,AL
     430:	1f 93       	push	r17
     432:	0f 93       	push	r16
	pushw	YH,YL
     434:	df 93       	push	r29
     436:	cf 93       	push	r28

	movw	T10L, EL			;T10 = array_bfly;
     438:	5c 01       	movw	r10, r24
	movw	YL, DL				;Y = array_output;
     43a:	eb 01       	movw	r28, r22
	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
     43c:	ea ee       	ldi	r30, 0xEA	; 234
     43e:	f1 e0       	ldi	r31, 0x01	; 1
	clr	EH				;Zero
     440:	99 27       	eor	r25, r25
#ifdef INPUT_IQ
	ldiw	AH,AL, FFT_N			;A = FFT_N; (plus/minus)
#else
	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (plus only)
     442:	00 e2       	ldi	r16, 0x20	; 32
     444:	10 e0       	ldi	r17, 0x00	; 0
#endif
1:	lpmw	XH,XL, Z+			;X = *Z++;
     446:	a5 91       	lpm	r26, Z+
     448:	b5 91       	lpm	r27, Z+
	addw	XH,XL, T10H,T10L		;X += array_bfly;
     44a:	aa 0d       	add	r26, r10
     44c:	bb 1d       	adc	r27, r11
	ldw	BH,BL, X+			;B = *X++;
     44e:	2d 91       	ld	r18, X+
     450:	3d 91       	ld	r19, X+
	ldw	CH,CL, X+			;C = *X++;
     452:	4d 91       	ld	r20, X+
     454:	5d 91       	ld	r21, X+
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
     456:	b3 03       	fmuls	r19, r19
     458:	20 01       	movw	r4, r0
     45a:	2a 03       	fmul	r18, r18
     45c:	10 01       	movw	r2, r0
     45e:	49 1e       	adc	r4, r25
     460:	ba 03       	fmulsu	r19, r18
     462:	59 0a       	sbc	r5, r25
     464:	30 0c       	add	r3, r0
     466:	41 1c       	adc	r4, r1
     468:	59 1e       	adc	r5, r25
     46a:	ba 03       	fmulsu	r19, r18
     46c:	59 0a       	sbc	r5, r25
     46e:	30 0c       	add	r3, r0
     470:	41 1c       	adc	r4, r1
     472:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
     474:	d5 03       	fmuls	r21, r21
     476:	40 01       	movw	r8, r0
     478:	4c 03       	fmul	r20, r20
     47a:	30 01       	movw	r6, r0
     47c:	89 1e       	adc	r8, r25
     47e:	dc 03       	fmulsu	r21, r20
     480:	99 0a       	sbc	r9, r25
     482:	70 0c       	add	r7, r0
     484:	81 1c       	adc	r8, r1
     486:	99 1e       	adc	r9, r25
     488:	dc 03       	fmulsu	r21, r20
     48a:	99 0a       	sbc	r9, r25
     48c:	70 0c       	add	r7, r0
     48e:	81 1c       	adc	r8, r1
     490:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
     492:	26 0c       	add	r2, r6
     494:	37 1c       	adc	r3, r7
     496:	48 1c       	adc	r4, r8
     498:	59 1c       	adc	r5, r9
	SQRT32					;B = sqrt(T4:T2);
     49a:	66 24       	eor	r6, r6
     49c:	77 24       	eor	r7, r7
     49e:	88 24       	eor	r8, r8
     4a0:	99 24       	eor	r9, r9
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	44 27       	eor	r20, r20
     4a8:	55 27       	eor	r21, r21
     4aa:	70 e1       	ldi	r23, 0x10	; 16
     4ac:	22 0c       	add	r2, r2
     4ae:	33 1c       	adc	r3, r3
     4b0:	44 1c       	adc	r4, r4
     4b2:	55 1c       	adc	r5, r5
     4b4:	66 1c       	adc	r6, r6
     4b6:	77 1c       	adc	r7, r7
     4b8:	88 1c       	adc	r8, r8
     4ba:	99 1c       	adc	r9, r9
     4bc:	22 0c       	add	r2, r2
     4be:	33 1c       	adc	r3, r3
     4c0:	44 1c       	adc	r4, r4
     4c2:	55 1c       	adc	r5, r5
     4c4:	66 1c       	adc	r6, r6
     4c6:	77 1c       	adc	r7, r7
     4c8:	88 1c       	adc	r8, r8
     4ca:	99 1c       	adc	r9, r9
     4cc:	2a f4       	brpl	.+10     	; 0x4d8 <__stack+0x79>
     4ce:	62 0e       	add	r6, r18
     4d0:	73 1e       	adc	r7, r19
     4d2:	84 1e       	adc	r8, r20
     4d4:	95 1e       	adc	r9, r21
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__stack+0x81>
     4d8:	62 1a       	sub	r6, r18
     4da:	73 0a       	sbc	r7, r19
     4dc:	84 0a       	sbc	r8, r20
     4de:	95 0a       	sbc	r9, r21
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	44 1f       	adc	r20, r20
     4e6:	28 7f       	andi	r18, 0xF8	; 248
     4e8:	25 60       	ori	r18, 0x05	; 5
     4ea:	97 fc       	sbrc	r9, 7
     4ec:	22 50       	subi	r18, 0x02	; 2
     4ee:	7a 95       	dec	r23
     4f0:	e9 f6       	brne	.-70     	; 0x4ac <__stack+0x4d>
     4f2:	46 95       	lsr	r20
     4f4:	37 95       	ror	r19
     4f6:	27 95       	ror	r18
     4f8:	46 95       	lsr	r20
     4fa:	37 95       	ror	r19
     4fc:	27 95       	ror	r18
	stw	Y+, BH,BL			;*Y++ = B;
     4fe:	29 93       	st	Y+, r18
     500:	39 93       	st	Y+, r19
	subiw	AH,AL, 1			;while(--A)
     502:	01 50       	subi	r16, 0x01	; 1
     504:	10 40       	sbci	r17, 0x00	; 0
	rjne	1b				;/
     506:	09 f0       	breq	.+2      	; 0x50a <__stack+0xab>
     508:	9e cf       	rjmp	.-196    	; 0x446 <fft_output+0x2a>

	popw	YH,YL
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
	popw	AH,AL
     50e:	0f 91       	pop	r16
     510:	1f 91       	pop	r17
	popw	T10H,T10L
     512:	af 90       	pop	r10
     514:	bf 90       	pop	r11
	popw	T8H,T8L
     516:	8f 90       	pop	r8
     518:	9f 90       	pop	r9
	popw	T6H,T6L
     51a:	6f 90       	pop	r6
     51c:	7f 90       	pop	r7
	popw	T4H,T4L
     51e:	4f 90       	pop	r4
     520:	5f 90       	pop	r5
	popw	T2H,T2L
     522:	2f 90       	pop	r2
     524:	3f 90       	pop	r3
	clr	r1
     526:	11 24       	eor	r1, r1
	ret
     528:	08 95       	ret

0000052a <fmuls_f>:

;----------------------------------------------------------------------------;
.global fmuls_f
.func fmuls_f
fmuls_f:
	movw	CL, EL				;C = E;
     52a:	ac 01       	movw	r20, r24
	clr	EH	;Zero
     52c:	99 27       	eor	r25, r25
	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
     52e:	d7 03       	fmuls	r21, r23
     530:	f0 01       	movw	r30, r0
     532:	4e 03       	fmul	r20, r22
     534:	d0 01       	movw	r26, r0
     536:	e9 1f       	adc	r30, r25
     538:	de 03       	fmulsu	r21, r22
     53a:	f9 0b       	sbc	r31, r25
     53c:	b0 0d       	add	r27, r0
     53e:	e1 1d       	adc	r30, r1
     540:	f9 1f       	adc	r31, r25
     542:	fc 03       	fmulsu	r23, r20
     544:	f9 0b       	sbc	r31, r25
     546:	b0 0d       	add	r27, r0
     548:	e1 1d       	adc	r30, r1
     54a:	f9 1f       	adc	r31, r25
	movw	EL, ZL
     54c:	cf 01       	movw	r24, r30
	clr	r1
     54e:	11 24       	eor	r1, r1
	ret
     550:	08 95       	ret

00000552 <lc75710_write>:
 *   This note is left for a future bare-metal implementation.
 * 
 * @param data the 24-bit data to be sent over the serial line
 */
void lc75710_write(uint32_t data)
{
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17

    uint8_t i = 0;

    /* Address goes out first... */
    LC75710_CE_LOW;
     556:	92 98       	cbi	0x12, 2	; 18
     558:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     55a:	24 e0       	ldi	r18, 0x04	; 4
     55c:	2a 95       	dec	r18
     55e:	f1 f7       	brne	.-4      	; 0x55c <lc75710_write+0xa>
     560:	27 e0       	ldi	r18, 0x07	; 7
     562:	30 e0       	ldi	r19, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 8; i++)
    {
        if (ADDRESS >> (7 - i) & 0x1)
     564:	46 ee       	ldi	r20, 0xE6	; 230
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	fa 01       	movw	r30, r20
     56a:	02 2e       	mov	r0, r18
     56c:	02 c0       	rjmp	.+4      	; 0x572 <lc75710_write+0x20>
     56e:	f6 95       	lsr	r31
     570:	e7 95       	ror	r30
     572:	0a 94       	dec	r0
     574:	e2 f7       	brpl	.-8      	; 0x56e <lc75710_write+0x1c>
     576:	e0 ff       	sbrs	r30, 0
     578:	02 c0       	rjmp	.+4      	; 0x57e <lc75710_write+0x2c>
        {
            LC75710_DI_HIGH;
     57a:	93 9a       	sbi	0x12, 3	; 18
     57c:	01 c0       	rjmp	.+2      	; 0x580 <lc75710_write+0x2e>
        }
        else
        {
            LC75710_DI_LOW;
     57e:	93 98       	cbi	0x12, 3	; 18
     580:	00 00       	nop
     582:	e4 e0       	ldi	r30, 0x04	; 4
     584:	ea 95       	dec	r30
     586:	f1 f7       	brne	.-4      	; 0x584 <lc75710_write+0x32>
        }

        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     588:	94 9a       	sbi	0x12, 4	; 18
     58a:	00 00       	nop
     58c:	e4 e0       	ldi	r30, 0x04	; 4
     58e:	ea 95       	dec	r30
     590:	f1 f7       	brne	.-4      	; 0x58e <lc75710_write+0x3c>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     592:	94 98       	cbi	0x12, 4	; 18
     594:	00 00       	nop
     596:	e4 e0       	ldi	r30, 0x04	; 4
     598:	ea 95       	dec	r30
     59a:	f1 f7       	brne	.-4      	; 0x598 <lc75710_write+0x46>
     59c:	21 50       	subi	r18, 0x01	; 1
     59e:	31 09       	sbc	r19, r1
     5a0:	18 f7       	brcc	.-58     	; 0x568 <lc75710_write+0x16>
        _delay_us(1);
    }

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
     5a2:	92 9a       	sbi	0x12, 2	; 18
     5a4:	00 00       	nop
     5a6:	24 e0       	ldi	r18, 0x04	; 4
     5a8:	2a 95       	dec	r18
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lc75710_write+0x56>
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	50 e0       	ldi	r21, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 24; i++)
    {
        if (data >> i & 0x1)
     5b0:	8b 01       	movw	r16, r22
     5b2:	9c 01       	movw	r18, r24
     5b4:	04 2e       	mov	r0, r20
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <lc75710_write+0x6e>
     5b8:	36 95       	lsr	r19
     5ba:	27 95       	ror	r18
     5bc:	17 95       	ror	r17
     5be:	07 95       	ror	r16
     5c0:	0a 94       	dec	r0
     5c2:	d2 f7       	brpl	.-12     	; 0x5b8 <lc75710_write+0x66>
     5c4:	00 ff       	sbrs	r16, 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <lc75710_write+0x7a>
        {
            LC75710_DI_HIGH;
     5c8:	93 9a       	sbi	0x12, 3	; 18
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <lc75710_write+0x7c>
        }
        else
        {
            LC75710_DI_LOW;
     5cc:	93 98       	cbi	0x12, 3	; 18
     5ce:	00 00       	nop
     5d0:	e4 e0       	ldi	r30, 0x04	; 4
     5d2:	ea 95       	dec	r30
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <lc75710_write+0x80>
        }
        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     5d6:	94 9a       	sbi	0x12, 4	; 18
     5d8:	00 00       	nop
     5da:	24 e0       	ldi	r18, 0x04	; 4
     5dc:	2a 95       	dec	r18
     5de:	f1 f7       	brne	.-4      	; 0x5dc <lc75710_write+0x8a>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     5e0:	94 98       	cbi	0x12, 4	; 18
     5e2:	00 00       	nop
     5e4:	e4 e0       	ldi	r30, 0x04	; 4
     5e6:	ea 95       	dec	r30
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <lc75710_write+0x94>
     5ea:	4f 5f       	subi	r20, 0xFF	; 255
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
    _delay_us(1);

    for (i = 0; i < 24; i++)
     5ee:	48 31       	cpi	r20, 0x18	; 24
     5f0:	51 05       	cpc	r21, r1
     5f2:	f1 f6       	brne	.-68     	; 0x5b0 <lc75710_write+0x5e>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
        _delay_us(1);
    }

    LC75710_CE_LOW;  /* LOW */
     5f4:	92 98       	cbi	0x12, 2	; 18
     5f6:	00 00       	nop
     5f8:	24 e0       	ldi	r18, 0x04	; 4
     5fa:	2a 95       	dec	r18
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <lc75710_write+0xa8>
     5fe:	84 e6       	ldi	r24, 0x64	; 100
     600:	8a 95       	dec	r24
     602:	f1 f7       	brne	.-4      	; 0x600 <lc75710_write+0xae>
    _delay_us(1);

    /* wait long enough for the command to complete (at least 18us for most commands) */
    _delay_us(25);

}
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	08 95       	ret

0000060a <lc75710_write_56bits>:
 *   This note is left for a future bare-metal implementation.
 * 
 * @param data the 56-bit data to be sent over the serial line
 */
void lc75710_write_56bits(uint64_t data)
{
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	12 2f       	mov	r17, r18
     622:	f3 2e       	mov	r15, r19
     624:	e4 2e       	mov	r14, r20
     626:	d5 2e       	mov	r13, r21
     628:	c6 2e       	mov	r12, r22
     62a:	b7 2e       	mov	r11, r23
     62c:	a8 2e       	mov	r10, r24
     62e:	99 2e       	mov	r9, r25

    uint8_t i = 0;

    /* Address goes out first... */
    LC75710_CE_LOW;  /* LOW */
     630:	92 98       	cbi	0x12, 2	; 18
     632:	00 00       	nop
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	8a 95       	dec	r24
     638:	f1 f7       	brne	.-4      	; 0x636 <lc75710_write_56bits+0x2c>
     63a:	e7 e0       	ldi	r30, 0x07	; 7
     63c:	f0 e0       	ldi	r31, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 8; i++)
    {
        if (ADDRESS >> (7 - i) & 0x1)
     63e:	a6 ee       	ldi	r26, 0xE6	; 230
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	ed 01       	movw	r28, r26
     644:	0e 2e       	mov	r0, r30
     646:	02 c0       	rjmp	.+4      	; 0x64c <lc75710_write_56bits+0x42>
     648:	d6 95       	lsr	r29
     64a:	c7 95       	ror	r28
     64c:	0a 94       	dec	r0
     64e:	e2 f7       	brpl	.-8      	; 0x648 <lc75710_write_56bits+0x3e>
     650:	c0 ff       	sbrs	r28, 0
     652:	02 c0       	rjmp	.+4      	; 0x658 <lc75710_write_56bits+0x4e>
        {
            LC75710_DI_HIGH;
     654:	93 9a       	sbi	0x12, 3	; 18
     656:	01 c0       	rjmp	.+2      	; 0x65a <lc75710_write_56bits+0x50>
        }
        else
        {
            LC75710_DI_LOW;
     658:	93 98       	cbi	0x12, 3	; 18
     65a:	00 00       	nop
     65c:	84 e0       	ldi	r24, 0x04	; 4
     65e:	8a 95       	dec	r24
     660:	f1 f7       	brne	.-4      	; 0x65e <lc75710_write_56bits+0x54>
        }
        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     662:	94 9a       	sbi	0x12, 4	; 18
     664:	00 00       	nop
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	8a 95       	dec	r24
     66a:	f1 f7       	brne	.-4      	; 0x668 <lc75710_write_56bits+0x5e>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     66c:	94 98       	cbi	0x12, 4	; 18
     66e:	00 00       	nop
     670:	84 e0       	ldi	r24, 0x04	; 4
     672:	8a 95       	dec	r24
     674:	f1 f7       	brne	.-4      	; 0x672 <lc75710_write_56bits+0x68>
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	20 f7       	brcc	.-56     	; 0x642 <lc75710_write_56bits+0x38>
        _delay_us(1);
    }

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
     67a:	92 9a       	sbi	0x12, 2	; 18
     67c:	00 00       	nop
     67e:	84 e0       	ldi	r24, 0x04	; 4
     680:	8a 95       	dec	r24
     682:	f1 f7       	brne	.-4      	; 0x680 <lc75710_write_56bits+0x76>
     684:	e0 e0       	ldi	r30, 0x00	; 0
     686:	f0 e0       	ldi	r31, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 56; i++)
    {
        if (data >> i & 0x1)
     688:	21 2f       	mov	r18, r17
     68a:	3f 2d       	mov	r19, r15
     68c:	4e 2d       	mov	r20, r14
     68e:	5d 2d       	mov	r21, r13
     690:	6c 2d       	mov	r22, r12
     692:	7b 2d       	mov	r23, r11
     694:	8a 2d       	mov	r24, r10
     696:	99 2d       	mov	r25, r9
     698:	0e 2f       	mov	r16, r30
     69a:	94 d6       	rcall	.+3368   	; 0x13c4 <__lshrdi3>
     69c:	21 70       	andi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	a0 e0       	ldi	r26, 0x00	; 0
     6ae:	a6 d6       	rcall	.+3404   	; 0x13fc <__cmpdi2_s8>
     6b0:	11 f0       	breq	.+4      	; 0x6b6 <lc75710_write_56bits+0xac>
        {
            LC75710_DI_HIGH;
     6b2:	93 9a       	sbi	0x12, 3	; 18
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <lc75710_write_56bits+0xae>
        }
        else
        {
            LC75710_DI_LOW;
     6b6:	93 98       	cbi	0x12, 3	; 18
     6b8:	00 00       	nop
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	8a 95       	dec	r24
     6be:	f1 f7       	brne	.-4      	; 0x6bc <lc75710_write_56bits+0xb2>
        }
        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     6c0:	94 9a       	sbi	0x12, 4	; 18
     6c2:	00 00       	nop
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	8a 95       	dec	r24
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <lc75710_write_56bits+0xbc>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     6ca:	94 98       	cbi	0x12, 4	; 18
     6cc:	00 00       	nop
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	8a 95       	dec	r24
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lc75710_write_56bits+0xc6>
     6d4:	31 96       	adiw	r30, 0x01	; 1

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
    _delay_us(1);

    for (i = 0; i < 56; i++)
     6d6:	e8 33       	cpi	r30, 0x38	; 56
     6d8:	f1 05       	cpc	r31, r1
     6da:	b1 f6       	brne	.-84     	; 0x688 <lc75710_write_56bits+0x7e>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
        _delay_us(1);
    }

    LC75710_CE_LOW;  /* LOW */
     6dc:	92 98       	cbi	0x12, 2	; 18
     6de:	00 00       	nop
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	8a 95       	dec	r24
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <lc75710_write_56bits+0xd8>
     6e6:	84 e6       	ldi	r24, 0x64	; 100
     6e8:	8a 95       	dec	r24
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <lc75710_write_56bits+0xde>
    _delay_us(1);

    /* wait long enough for the command to complete (at least 18us for most commands) */
    _delay_us(25);

}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	bf 90       	pop	r11
     6fe:	af 90       	pop	r10
     700:	9f 90       	pop	r9
     702:	08 95       	ret

00000704 <lc75710_on_off>:
 * @param operation the affected display memory, 0..3, see constants
 * @param mode      TRUE: selected grids on; FALSE: selected grids off
 * @param grids     the affected digits, 0..15 bits, where every bit is a grid (i.e. a digit)
 */
void lc75710_on_off(uint8_t operation, bool mode, uint16_t grids)
{
     704:	96 2f       	mov	r25, r22

    /* Toggle */
    temp |= (uint32_t)mode << 16;
    
    /* Grid selection */
    temp |= grids;
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0

    /* Instruction */
    temp  = (uint32_t)0x1 << 20;

    /* Specifies the data to be turned on or off */
    temp |= (uint32_t)(operation & 0x3) << 17;
     70a:	60 61       	ori	r22, 0x10	; 16

    /* Toggle */
    temp |= (uint32_t)mode << 16;
     70c:	69 2b       	or	r22, r25

    /* Instruction */
    temp  = (uint32_t)0x1 << 20;

    /* Specifies the data to be turned on or off */
    temp |= (uint32_t)(operation & 0x3) << 17;
     70e:	83 70       	andi	r24, 0x03	; 3
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a0 e0       	ldi	r26, 0x00	; 0
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	31 e1       	ldi	r19, 0x11	; 17
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	aa 1f       	adc	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	3a 95       	dec	r19
     722:	d1 f7       	brne	.-12     	; 0x718 <lc75710_on_off+0x14>

    /* Toggle */
    temp |= (uint32_t)mode << 16;
    
    /* Grid selection */
    temp |= grids;
     724:	48 2b       	or	r20, r24
     726:	59 2b       	or	r21, r25
     728:	6a 2b       	or	r22, r26
     72a:	7b 2b       	or	r23, r27
    
    /* Write to IC */
    lc75710_write(temp);
     72c:	cb 01       	movw	r24, r22
     72e:	ba 01       	movw	r22, r20
     730:	10 cf       	rjmp	.-480    	; 0x552 <lc75710_write>

00000732 <lc75710_set_ac_address>:
 * 
 * @param dcram 6-bit DCRAM address
 * @param adram 4-bit ADRAM address
 */
void lc75710_set_ac_address(uint8_t dcram, uint8_t adram)
{
     732:	26 2f       	mov	r18, r22

    /* ADRAM address */
    temp |= (uint32_t)(adram & 0xF) << 16;

    /* DCRAM address */
    temp |= (uint32_t)(dcram & 0x3F) << 8;
     734:	8f 73       	andi	r24, 0x3F	; 63
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	66 27       	eor	r22, r22
     73e:	78 2f       	mov	r23, r24
     740:	89 2f       	mov	r24, r25
     742:	9a 2f       	mov	r25, r26

    /* Instruction */
    temp  = (uint32_t)0x4 << 20;

    /* ADRAM address */
    temp |= (uint32_t)(adram & 0xF) << 16;
     744:	80 64       	ori	r24, 0x40	; 64
     746:	2f 70       	andi	r18, 0x0F	; 15

    /* DCRAM address */
    temp |= (uint32_t)(dcram & 0x3F) << 8;
     748:	82 2b       	or	r24, r18

    /* Write to IC */
    lc75710_write(temp);
     74a:	03 cf       	rjmp	.-506    	; 0x552 <lc75710_write>

0000074c <lc75710_intensity>:

    /* Instruction */
    temp  = (uint32_t)0x5 << 20;

    /* ADRAM address */
    temp |= (uint32_t)(intensity & 0xFF) << 8;
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	66 27       	eor	r22, r22
     754:	78 2f       	mov	r23, r24
     756:	89 2f       	mov	r24, r25
     758:	9a 2f       	mov	r25, r26
     75a:	80 65       	ori	r24, 0x50	; 80

    /* Write to IC */
    lc75710_write(temp);
     75c:	fa ce       	rjmp	.-524    	; 0x552 <lc75710_write>

0000075e <lc75710_dcram_write>:

    /* DCRAM address */
    temp |= (uint32_t)(addr & 0x3F) << 8;

    /* ADRAM address */
    temp |= (uint32_t)(data & 0xFF) << 0;
     75e:	46 2f       	mov	r20, r22
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0

    /* Instruction */
    temp  = (uint32_t)0x6 << 20;

    /* DCRAM address */
    temp |= (uint32_t)(addr & 0x3F) << 8;
     766:	60 66       	ori	r22, 0x60	; 96
     768:	8f 73       	andi	r24, 0x3F	; 63

    /* ADRAM address */
    temp |= (uint32_t)(data & 0xFF) << 0;
     76a:	58 2b       	or	r21, r24

    /* Write to IC */
    lc75710_write(temp);
     76c:	cb 01       	movw	r24, r22
     76e:	ba 01       	movw	r22, r20
     770:	f0 ce       	rjmp	.-544    	; 0x552 <lc75710_write>

00000772 <lc75710_cgram_write>:
 * 
 * @param addr 8-bit CGRAM address
 * @param data the 35-bit data (arbitrary dots, forming a 7x5 character)
 */
void lc75710_cgram_write(uint8_t addr, uint64_t data)
{
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	e0 2f       	mov	r30, r16
     77e:	d2 2f       	mov	r29, r18
     780:	c3 2f       	mov	r28, r19
     782:	b4 2f       	mov	r27, r20
     784:	a5 2f       	mov	r26, r21
     786:	f6 2f       	mov	r31, r22
     788:	f7 2e       	mov	r15, r23

    /* Instruction */
    temp  = (uint64_t)0x8 << 52;

    /* CGRAM address */
    temp |= (uint64_t)(addr & 0xFF) << 40;
     78a:	f0 68       	ori	r31, 0x80	; 128
     78c:	28 2f       	mov	r18, r24
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	08 e2       	ldi	r16, 0x28	; 40
     79e:	f7 d5       	rcall	.+3054   	; 0x138e <__ashldi3>

    /* ADRAM address */
    temp |= data;
     7a0:	e2 2b       	or	r30, r18
     7a2:	13 2b       	or	r17, r19
     7a4:	d4 2b       	or	r29, r20
     7a6:	c5 2b       	or	r28, r21
     7a8:	b6 2b       	or	r27, r22
     7aa:	a7 2b       	or	r26, r23

    /* Write to IC */
    lc75710_write_56bits(temp);
     7ac:	2e 2f       	mov	r18, r30
     7ae:	31 2f       	mov	r19, r17
     7b0:	4d 2f       	mov	r20, r29
     7b2:	5c 2f       	mov	r21, r28
     7b4:	6b 2f       	mov	r22, r27
     7b6:	7a 2f       	mov	r23, r26
     7b8:	8f 2b       	or	r24, r31
     7ba:	9f 29       	or	r25, r15

}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15

    /* ADRAM address */
    temp |= data;

    /* Write to IC */
    lc75710_write_56bits(temp);
     7c6:	21 cf       	rjmp	.-446    	; 0x60a <lc75710_write_56bits>

000007c8 <lc75710_init>:
/**
 * @brief
 *   Hardware pin initialization and chip reset state initialization
 */
void lc75710_init()
{
     7c8:	cf 93       	push	r28

    uint8_t i = 0;

    /* Pin configuration */
    LC75710_DDR |= 1 << LC75710_CL;  /* OUTPUT */
     7ca:	8c 9a       	sbi	0x11, 4	; 17
    LC75710_DDR |= 1 << LC75710_DI;  /* OUTPUT */
     7cc:	8b 9a       	sbi	0x11, 3	; 17
    LC75710_DDR |= 1 << LC75710_CE;  /* OUTPUT */
     7ce:	8a 9a       	sbi	0x11, 2	; 17

    /* Initial output states */
    LC75710_CL_LOW;
     7d0:	94 98       	cbi	0x12, 4	; 18
     7d2:	00 00       	nop
    LC75710_DI_LOW;
     7d4:	93 98       	cbi	0x12, 3	; 18
     7d6:	00 00       	nop
    LC75710_CE_LOW;
     7d8:	92 98       	cbi	0x12, 2	; 18
     7da:	00 00       	nop

    /*  Blinking digit specification */
    temp |= digits;

    /* Write to IC */
    lc75710_write(temp);
     7dc:	6f ef       	ldi	r22, 0xFF	; 255
     7de:	7f ef       	ldi	r23, 0xFF	; 255
     7e0:	88 eb       	ldi	r24, 0xB8	; 184
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	b6 de       	rcall	.-660    	; 0x552 <lc75710_write>
     */

    /* Reset Function, as described in the datasheet */
    lc75710_blink(MDATA_AND_ADATA, 0, 0xFFFF);

    for (i = 0; i < 64; i++)
     7e6:	c0 e0       	ldi	r28, 0x00	; 0
    {
        /* Initialize DCRAM with spaces */
        lc75710_dcram_write(i, 0x20);
     7e8:	60 e2       	ldi	r22, 0x20	; 32
     7ea:	8c 2f       	mov	r24, r28
     7ec:	b8 df       	rcall	.-144    	; 0x75e <lc75710_dcram_write>
     */

    /* Reset Function, as described in the datasheet */
    lc75710_blink(MDATA_AND_ADATA, 0, 0xFFFF);

    for (i = 0; i < 64; i++)
     7ee:	cf 5f       	subi	r28, 0xFF	; 255
     7f0:	c0 34       	cpi	r28, 0x40	; 64
     7f2:	d1 f7       	brne	.-12     	; 0x7e8 <lc75710_init+0x20>

    /* DCRAM address */
    temp |= (uint32_t)(dcram & 0x3F) << 8;

    /* Write to IC */
    lc75710_write(temp);
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e4       	ldi	r24, 0x40	; 64
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	aa de       	rcall	.-684    	; 0x552 <lc75710_write>

    /* Specifies the amount of grids (i.e. digits) */
    temp |= (uint32_t)(grids & 0xF) << 16;

    /* Write to IC */
    lc75710_write(temp);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	8a e3       	ldi	r24, 0x3A	; 58
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a5 de       	rcall	.-694    	; 0x552 <lc75710_write>

    /* ADRAM address */
    temp |= (uint32_t)(intensity & 0xFF) << 8;

    /* Write to IC */
    lc75710_write(temp);
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e8       	ldi	r23, 0x80	; 128
     80c:	80 e5       	ldi	r24, 0x50	; 80
     80e:	90 e0       	ldi	r25, 0x00	; 0
    lc75710_intensity(128);

    /* Turn the display ON */
    /*lc75710_on_off(MDATA_AND_ADATA, true, 0xFFFF);*/

}
     810:	cf 91       	pop	r28

    /* ADRAM address */
    temp |= (uint32_t)(intensity & 0xFF) << 8;

    /* Write to IC */
    lc75710_write(temp);
     812:	9f ce       	rjmp	.-706    	; 0x552 <lc75710_write>

00000814 <display_string_len>:
 *
 * @param string    string to display
 * @param len       length of the string
 */
void display_string_len(char* string, uint8_t len)
{
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	16 2f       	mov	r17, r22
     820:	08 2f       	mov	r16, r24
     822:	ec 01       	movw	r28, r24
     824:	f8 2e       	mov	r15, r24
     826:	f6 0e       	add	r15, r22

    uint8_t addr = 0;

    do
    {
        lc75710_dcram_write(len - 1 - addr++, *string);
     828:	69 91       	ld	r22, Y+
     82a:	8f 2d       	mov	r24, r15
     82c:	8c 1b       	sub	r24, r28
     82e:	97 df       	rcall	.-210    	; 0x75e <lc75710_dcram_write>
     830:	8c 2f       	mov	r24, r28
     832:	80 1b       	sub	r24, r16
        string++;
    }
    while (addr < len);
     834:	81 17       	cp	r24, r17
     836:	c0 f3       	brcs	.-16     	; 0x828 <display_string_len+0x14>

}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	08 95       	ret

00000844 <display_string>:
 * @brief Display a string
 *
 * @param string zero-terminated string to display
 */
void display_string(char* string)
{
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	8c 01       	movw	r16, r24
    uint8_t len = 0;

    len = strlen(string);
     84e:	ec 01       	movw	r28, r24
     850:	09 90       	ld	r0, Y+
     852:	00 20       	and	r0, r0
     854:	e9 f7       	brne	.-6      	; 0x850 <display_string+0xc>
     856:	21 97       	sbiw	r28, 0x01	; 1
     858:	c8 1b       	sub	r28, r24
     85a:	d9 0b       	sbc	r29, r25

    lc75710_set_ac_address(0, 0);
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	68 df       	rcall	.-304    	; 0x732 <lc75710_set_ac_address>

    display_string_len(string, len);
     862:	6c 2f       	mov	r22, r28
     864:	c8 01       	movw	r24, r16
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16

    len = strlen(string);

    lc75710_set_ac_address(0, 0);

    display_string_len(string, len);
     86e:	d2 cf       	rjmp	.-92     	; 0x814 <display_string_len>

00000870 <display_string_center>:
 * @brief Display a string, center justified
 *
 * @param string zero-terminated string to display
 */
void display_string_center(char* string)
{
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	8c 01       	movw	r16, r24

    uint8_t len = 0;

    len = strlen(string);
     87a:	ec 01       	movw	r28, r24
     87c:	09 90       	ld	r0, Y+
     87e:	00 20       	and	r0, r0
     880:	e9 f7       	brne	.-6      	; 0x87c <display_string_center+0xc>
     882:	21 97       	sbiw	r28, 0x01	; 1
     884:	c8 1b       	sub	r28, r24
     886:	d9 0b       	sbc	r29, r25

    lc75710_set_ac_address(LC75710_DRAM_SIZE - ((LC75710_DIGITS - len) / 2), 0);
     888:	2a e0       	ldi	r18, 0x0A	; 10
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	2c 1b       	sub	r18, r28
     88e:	31 09       	sbc	r19, r1
     890:	36 95       	lsr	r19
     892:	27 95       	ror	r18
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	82 1b       	sub	r24, r18
     89a:	4b df       	rcall	.-362    	; 0x732 <lc75710_set_ac_address>

    display_string_len(string, len);
     89c:	6c 2f       	mov	r22, r28
     89e:	c8 01       	movw	r24, r16

}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16

    len = strlen(string);

    lc75710_set_ac_address(LC75710_DRAM_SIZE - ((LC75710_DIGITS - len) / 2), 0);

    display_string_len(string, len);
     8a8:	b5 cf       	rjmp	.-150    	; 0x814 <display_string_len>

000008aa <display_clear>:
 *
 * @brief Clear display (i.e. sets RAM to 0x20) AND reset RAM pointer
 *
 */
void display_clear(void)
{
     8aa:	cf 93       	push	r28

    uint8_t i = 0;

    lc75710_set_ac_address(0, 0);
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	40 df       	rcall	.-384    	; 0x732 <lc75710_set_ac_address>

    for (i = 0; i < LC75710_DIGITS; i++)
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
    {
        /* Fill with spaces */
        lc75710_dcram_write(i, 0x20);
     8b4:	60 e2       	ldi	r22, 0x20	; 32
     8b6:	8c 2f       	mov	r24, r28
     8b8:	52 df       	rcall	.-348    	; 0x75e <lc75710_dcram_write>

    uint8_t i = 0;

    lc75710_set_ac_address(0, 0);

    for (i = 0; i < LC75710_DIGITS; i++)
     8ba:	cf 5f       	subi	r28, 0xFF	; 255
     8bc:	ca 30       	cpi	r28, 0x0A	; 10
     8be:	d1 f7       	brne	.-12     	; 0x8b4 <display_clear+0xa>
    {
        /* Fill with spaces */
        lc75710_dcram_write(i, 0x20);
    }

}
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <display_load_bars_vert>:
 *
 * @brief Load vertical bars in the CGRAM of the chip
 *
 */
void display_load_bars_vert(void)
{
     8c4:	7f 92       	push	r7
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ce e1       	ldi	r28, 0x1E	; 30
     8e0:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i = 0;
    uint64_t c = 0;
     8e2:	71 2c       	mov	r7, r1
     8e4:	81 2c       	mov	r8, r1
     8e6:	91 2c       	mov	r9, r1
     8e8:	a1 2c       	mov	r10, r1
     8ea:	b1 2c       	mov	r11, r1
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	e1 2c       	mov	r14, r1

    for (i = 0; i < 7; i++)
     8f2:	f1 2c       	mov	r15, r1
    {
        c |= (uint64_t)0x1F << (30 - (i*5));
     8f4:	2f e1       	ldi	r18, 0x1F	; 31
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0c 2f       	mov	r16, r28
     906:	43 d5       	rcall	.+2694   	; 0x138e <__ashldi3>
     908:	72 2a       	or	r7, r18
     90a:	83 2a       	or	r8, r19
     90c:	94 2a       	or	r9, r20
     90e:	a5 2a       	or	r10, r21
     910:	b6 2a       	or	r11, r22
     912:	c7 2a       	or	r12, r23
     914:	d8 2a       	or	r13, r24
     916:	e9 2a       	or	r14, r25
        lc75710_cgram_write(i, c);
     918:	07 2d       	mov	r16, r7
     91a:	18 2d       	mov	r17, r8
     91c:	29 2d       	mov	r18, r9
     91e:	3a 2d       	mov	r19, r10
     920:	4b 2d       	mov	r20, r11
     922:	5c 2d       	mov	r21, r12
     924:	6d 2d       	mov	r22, r13
     926:	7e 2d       	mov	r23, r14
     928:	8f 2d       	mov	r24, r15
     92a:	23 df       	rcall	.-442    	; 0x772 <lc75710_cgram_write>
{

    uint8_t i = 0;
    uint64_t c = 0;

    for (i = 0; i < 7; i++)
     92c:	f3 94       	inc	r15
     92e:	25 97       	sbiw	r28, 0x05	; 5
     930:	87 e0       	ldi	r24, 0x07	; 7
     932:	f8 12       	cpse	r15, r24
     934:	df cf       	rjmp	.-66     	; 0x8f4 <display_load_bars_vert+0x30>
    {
        c |= (uint64_t)0x1F << (30 - (i*5));
        lc75710_cgram_write(i, c);
    }

}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	08 95       	ret

00000952 <display_load_vumeter_harrows>:
 *
 * @brief Load VU-meter bars in the CGRAM of the chip
 *
 */
void display_load_vumeter_harrows(void)
{
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17

    /* Arrow-like symbol */

    lc75710_cgram_write(0, (uint64_t) (0xCC3));         /* Right Channel (above) */
     956:	03 ec       	ldi	r16, 0xC3	; 195
     958:	1c e0       	ldi	r17, 0x0C	; 12
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	04 df       	rcall	.-504    	; 0x772 <lc75710_cgram_write>
    lc75710_cgram_write(1, (uint64_t) 0xCC3 << 20);   /* Left Channel (below)  */
     96a:	00 e0       	ldi	r16, 0x00	; 0
     96c:	10 e0       	ldi	r17, 0x00	; 0
     96e:	20 e3       	ldi	r18, 0x30	; 48
     970:	3c ec       	ldi	r19, 0xCC	; 204
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	fa de       	rcall	.-524    	; 0x772 <lc75710_cgram_write>
    lc75710_cgram_write(2, (uint64_t) 0xCC3 | (uint64_t) 0xCC3 << 20);   /* R+L Channel */
     97e:	03 ec       	ldi	r16, 0xC3	; 195
     980:	1c e0       	ldi	r17, 0x0C	; 12
     982:	20 e3       	ldi	r18, 0x30	; 48
     984:	3c ec       	ldi	r19, 0xCC	; 204
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	f0 de       	rcall	.-544    	; 0x772 <lc75710_cgram_write>

}
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <display_show_vumeter_harrows>:
 * \param   right      Right Level 0-10
 * \param   right_left true: left to right; false: right to left
 *
 */
void display_show_vumeter_harrows(uint8_t left, uint8_t right, bool right_left)
{
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	18 2f       	mov	r17, r24
     9a6:	d6 2f       	mov	r29, r22
     9a8:	f4 2e       	mov	r15, r20

    uint8_t i = 0;
    uint8_t c = 0;

    /* Clear display */
    display_clear();
     9aa:	7f df       	rcall	.-258    	; 0x8aa <display_clear>
     9ac:	1b 30       	cpi	r17, 0x0B	; 11
     9ae:	08 f0       	brcs	.+2      	; 0x9b2 <display_show_vumeter_harrows+0x1a>
     9b0:	1a e0       	ldi	r17, 0x0A	; 10
     9b2:	db 30       	cpi	r29, 0x0B	; 11
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <display_show_vumeter_harrows+0x20>
     9b6:	da e0       	ldi	r29, 0x0A	; 10
 */
void display_show_vumeter_harrows(uint8_t left, uint8_t right, bool right_left)
{

    uint8_t i = 0;
    uint8_t c = 0;
     9b8:	00 e0       	ldi	r16, 0x00	; 0
    display_clear();

    /* Full bars */
    if (left > LC75710_DIGITS) left = LC75710_DIGITS;
    if (right > LC75710_DIGITS) right = LC75710_DIGITS;
    for (i = 1; i <= (left > right ? left : right); i++)
     9ba:	c1 e0       	ldi	r28, 0x01	; 1
        }
        else if (left >= i)
        {
            c = 1;
        }
        lc75710_dcram_write(right_left ? (LC75710_DIGITS - i) : i, c);
     9bc:	2a e0       	ldi	r18, 0x0A	; 10
     9be:	e2 2e       	mov	r14, r18
    display_clear();

    /* Full bars */
    if (left > LC75710_DIGITS) left = LC75710_DIGITS;
    if (right > LC75710_DIGITS) right = LC75710_DIGITS;
    for (i = 1; i <= (left > right ? left : right); i++)
     9c0:	ec 2f       	mov	r30, r28
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	21 2f       	mov	r18, r17
     9c6:	1d 17       	cp	r17, r29
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <display_show_vumeter_harrows+0x34>
     9ca:	2d 2f       	mov	r18, r29
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	2e 17       	cp	r18, r30
     9d0:	3f 07       	cpc	r19, r31
     9d2:	ac f0       	brlt	.+42     	; 0x9fe <display_show_vumeter_harrows+0x66>
    {
        if (left >= i && right >= i)
     9d4:	1c 17       	cp	r17, r28
     9d6:	30 f0       	brcs	.+12     	; 0x9e4 <display_show_vumeter_harrows+0x4c>
     9d8:	dc 17       	cp	r29, r28
     9da:	10 f4       	brcc	.+4      	; 0x9e0 <display_show_vumeter_harrows+0x48>
        {
            c = 0;
        }
        else if (left >= i)
        {
            c = 1;
     9dc:	01 e0       	ldi	r16, 0x01	; 1
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <display_show_vumeter_harrows+0x52>
    if (right > LC75710_DIGITS) right = LC75710_DIGITS;
    for (i = 1; i <= (left > right ? left : right); i++)
    {
        if (left >= i && right >= i)
        {
            c = 2;
     9e0:	02 e0       	ldi	r16, 0x02	; 2
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <display_show_vumeter_harrows+0x52>
        }
        else if (right >= i)
     9e4:	dc 17       	cp	r29, r28
     9e6:	08 f0       	brcs	.+2      	; 0x9ea <display_show_vumeter_harrows+0x52>
        {
            c = 0;
     9e8:	00 e0       	ldi	r16, 0x00	; 0
        }
        else if (left >= i)
        {
            c = 1;
        }
        lc75710_dcram_write(right_left ? (LC75710_DIGITS - i) : i, c);
     9ea:	ff 20       	and	r15, r15
     9ec:	19 f0       	breq	.+6      	; 0x9f4 <display_show_vumeter_harrows+0x5c>
     9ee:	8e 2d       	mov	r24, r14
     9f0:	8c 1b       	sub	r24, r28
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <display_show_vumeter_harrows+0x5e>
     9f4:	8c 2f       	mov	r24, r28
     9f6:	60 2f       	mov	r22, r16
     9f8:	b2 de       	rcall	.-668    	; 0x75e <lc75710_dcram_write>
    display_clear();

    /* Full bars */
    if (left > LC75710_DIGITS) left = LC75710_DIGITS;
    if (right > LC75710_DIGITS) right = LC75710_DIGITS;
    for (i = 1; i <= (left > right ? left : right); i++)
     9fa:	cf 5f       	subi	r28, 0xFF	; 255
     9fc:	e1 cf       	rjmp	.-62     	; 0x9c0 <display_show_vumeter_harrows+0x28>
            c = 1;
        }
        lc75710_dcram_write(right_left ? (LC75710_DIGITS - i) : i, c);
    }

}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	08 95       	ret

00000a0c <__vector_14>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	8f 93       	push	r24
     a1c:	9f 93       	push	r25
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31

    if (capture_index >= FFT_N)
     a22:	20 91 5c 03 	lds	r18, 0x035C
     a26:	20 34       	cpi	r18, 0x40	; 64
     a28:	7c f4       	brge	.+30     	; 0xa48 <__vector_14+0x3c>
        capture[capture_index] = last_captureS;
        /* HARDWARE NOISE DEBUG */
        if (last_captureS > adc_maxS) adc_maxS = last_captureS;
        if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
        capture[capture_index] = (ADCL | (ADCH << 8U));
     a2a:	84 b1       	in	r24, 0x04	; 4
     a2c:	35 b1       	in	r19, 0x05	; 5
     a2e:	e2 2f       	mov	r30, r18
     a30:	ee 0f       	add	r30, r30
     a32:	ff 0b       	sbc	r31, r31
     a34:	e4 52       	subi	r30, 0x24	; 36
     a36:	fd 4f       	sbci	r31, 0xFD	; 253
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	93 2b       	or	r25, r19
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
#endif

        /* Increment buffer index */
        capture_index++;
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	20 93 5c 03 	sts	0x035C, r18

        /* Kick-in another conversion */
        /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
        ADCSRA |= (1 << ADSC);
     a46:	36 9a       	sbi	0x06, 6	; 6
    }

}
     a48:	ff 91       	pop	r31
     a4a:	ef 91       	pop	r30
     a4c:	9f 91       	pop	r25
     a4e:	8f 91       	pop	r24
     a50:	3f 91       	pop	r19
     a52:	2f 91       	pop	r18
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <ma_audio_init>:

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     a5e:	87 b1       	in	r24, 0x07	; 7
     a60:	80 71       	andi	r24, 0x10	; 16
     a62:	87 b9       	out	0x07, r24	; 7

    /* Set the internal 2.56V reference */
    ADMUX |= ((1 << REFS1) | (1 << REFS0));
     a64:	87 b1       	in	r24, 0x07	; 7
     a66:	80 6c       	ori	r24, 0xC0	; 192
     a68:	87 b9       	out	0x07, r24	; 7

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     a6a:	37 9a       	sbi	0x06, 7	; 6

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    ADCSRA &= ~(1 << ADFR);
     a6c:	35 98       	cbi	0x06, 5	; 6

    /* Set the Prescaler to 32 */
    ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0) |
     a6e:	86 b1       	in	r24, 0x06	; 6
     a70:	8d 64       	ori	r24, 0x4D	; 77
     a72:	86 b9       	out	0x06, r24	; 6
     a74:	08 95       	ret

00000a76 <hann_window>:
/* Quick and dirty Hann Window for post-process the FFT spectrum
 * - optimize
 * - clean
 * - ? ;=)*/
void hann_window(uint16_t *stream, uint8_t len)
{
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	76 2e       	mov	r7, r22
     a92:	8c 01       	movw	r16, r24
     a94:	0e 5f       	subi	r16, 0xFE	; 254
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
    for (uint8_t i = 1; i < len; i++)
     a98:	c0 e0       	ldi	r28, 0x00	; 0
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        stream[i] = 0.5f * (1.0f - cos(2.0f * 3.14f * i / (len - 1.0f))) * stream[i];
     a9c:	c6 2e       	mov	r12, r22
     a9e:	d1 2c       	mov	r13, r1
     aa0:	e1 2c       	mov	r14, r1
     aa2:	f1 2c       	mov	r15, r1
     aa4:	21 96       	adiw	r28, 0x01	; 1
 * - optimize
 * - clean
 * - ? ;=)*/
void hann_window(uint16_t *stream, uint8_t len)
{
    for (uint8_t i = 1; i < len; i++)
     aa6:	c7 15       	cp	r28, r7
     aa8:	d0 f5       	brcc	.+116    	; 0xb1e <hann_window+0xa8>
    {
        stream[i] = 0.5f * (1.0f - cos(2.0f * 3.14f * i / (len - 1.0f))) * stream[i];
     aaa:	be 01       	movw	r22, r28
     aac:	88 27       	eor	r24, r24
     aae:	77 fd       	sbrc	r23, 7
     ab0:	80 95       	com	r24
     ab2:	98 2f       	mov	r25, r24
     ab4:	ad d5       	rcall	.+2906   	; 0x1610 <__floatsisf>
     ab6:	23 ec       	ldi	r18, 0xC3	; 195
     ab8:	35 ef       	ldi	r19, 0xF5	; 245
     aba:	48 ec       	ldi	r20, 0xC8	; 200
     abc:	50 e4       	ldi	r21, 0x40	; 64
     abe:	b8 d6       	rcall	.+3440   	; 0x1830 <__mulsf3>
     ac0:	4b 01       	movw	r8, r22
     ac2:	5c 01       	movw	r10, r24
     ac4:	c7 01       	movw	r24, r14
     ac6:	b6 01       	movw	r22, r12
     ac8:	a3 d5       	rcall	.+2886   	; 0x1610 <__floatsisf>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e8       	ldi	r20, 0x80	; 128
     ad0:	5f e3       	ldi	r21, 0x3F	; 63
     ad2:	a0 d4       	rcall	.+2368   	; 0x1414 <__subsf3>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	c5 01       	movw	r24, r10
     ada:	b4 01       	movw	r22, r8
     adc:	03 d5       	rcall	.+2566   	; 0x14e4 <__divsf3>
     ade:	ff d4       	rcall	.+2558   	; 0x14de <cos>
     ae0:	9b 01       	movw	r18, r22
     ae2:	ac 01       	movw	r20, r24
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	80 e8       	ldi	r24, 0x80	; 128
     aea:	9f e3       	ldi	r25, 0x3F	; 63
     aec:	93 d4       	rcall	.+2342   	; 0x1414 <__subsf3>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	5f e3       	ldi	r21, 0x3F	; 63
     af6:	9c d6       	rcall	.+3384   	; 0x1830 <__mulsf3>
     af8:	4b 01       	movw	r8, r22
     afa:	5c 01       	movw	r10, r24
     afc:	f8 01       	movw	r30, r16
     afe:	60 81       	ld	r22, Z
     b00:	71 81       	ldd	r23, Z+1	; 0x01
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	82 d5       	rcall	.+2820   	; 0x160c <__floatunsisf>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	c5 01       	movw	r24, r10
     b0e:	b4 01       	movw	r22, r8
     b10:	8f d6       	rcall	.+3358   	; 0x1830 <__mulsf3>
     b12:	50 d5       	rcall	.+2720   	; 0x15b4 <__fixunssfsi>
     b14:	f8 01       	movw	r30, r16
     b16:	61 93       	st	Z+, r22
     b18:	71 93       	st	Z+, r23
     b1a:	8f 01       	movw	r16, r30
     b1c:	c3 cf       	rjmp	.-122    	; 0xaa4 <hann_window+0x2e>
    }
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	08 95       	ret

00000b3a <ma_audio_process>:
 * @brief This function shall be periodically called
 * on the audio buffer to compute FFT / VU-meter
 *
 */
void ma_audio_process(void)
{
     b3a:	cf 93       	push	r28
    uint8_t old_mux;
    uint32_t rms = 0;
    uint16_t tmp = 0;
    uint8_t c = 0;

    if (((ADCSRA >> ADSC) & 0x1) == 0)
     b3c:	36 99       	sbic	0x06, 6	; 6
     b3e:	51 c0       	rjmp	.+162    	; 0xbe2 <ma_audio_process+0xa8>
    {
        /* Sampling complete */
        fft_input(capture, bfly_buff);
     b40:	6c ed       	ldi	r22, 0xDC	; 220
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	8c ed       	ldi	r24, 0xDC	; 220
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	70 db       	rcall	.-2336   	; 0x22a <fft_input>
        fft_execute(bfly_buff);
     b4a:	8c ed       	ldi	r24, 0xDC	; 220
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	9c db       	rcall	.-2248   	; 0x288 <fft_execute>
        fft_output(bfly_buff, spektrum);
     b50:	6c e9       	ldi	r22, 0x9C	; 156
     b52:	71 e0       	ldi	r23, 0x01	; 1
     b54:	8c ed       	ldi	r24, 0xDC	; 220
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	61 dc       	rcall	.-1854   	; 0x41c <fft_output>
        hann_window(spektrum, FFT_N/2);
     b5a:	60 e2       	ldi	r22, 0x20	; 32
     b5c:	8c e9       	ldi	r24, 0x9C	; 156
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	8a df       	rcall	.-236    	; 0xa76 <hann_window>

        /* Toggle channel */
        /* iterate through the needed channels:
         * Audio (R+L) has higher priority */
        old_mux = ADMUX & 0x7U;
     b62:	c7 b1       	in	r28, 0x07	; 7
     b64:	c7 70       	andi	r28, 0x07	; 7

        /* zero current mux option */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     b66:	87 b1       	in	r24, 0x07	; 7
     b68:	80 7f       	andi	r24, 0xF0	; 240
     b6a:	87 b9       	out	0x07, r24	; 7
        /* set the new mux */
        ADMUX |= (old_mux + 1U) % 2U;
     b6c:	97 b1       	in	r25, 0x07	; 7
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	8c 0f       	add	r24, r28
     b72:	81 70       	andi	r24, 0x01	; 1
     b74:	89 2b       	or	r24, r25
     b76:	87 b9       	out	0x07, r24	; 7
     b78:	ec ed       	ldi	r30, 0xDC	; 220
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
{

    uint8_t old_mux;
    uint32_t rms = 0;
    uint16_t tmp = 0;
    uint8_t c = 0;
     b7c:	20 e0       	ldi	r18, 0x00	; 0
 */
void ma_audio_process(void)
{

    uint8_t old_mux;
    uint32_t rms = 0;
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	cb 01       	movw	r24, r22
        ADMUX |= (old_mux + 1U) % 2U;

        /* VU-METER testing */
        for(uint8_t i = 0; i < FFT_N; i++)
        {
            if (capture[i] >= 512)
     b84:	41 91       	ld	r20, Z+
     b86:	51 91       	ld	r21, Z+
     b88:	41 15       	cp	r20, r1
     b8a:	32 e0       	ldi	r19, 0x02	; 2
     b8c:	53 07       	cpc	r21, r19
     b8e:	64 f0       	brlt	.+24     	; 0xba8 <ma_audio_process+0x6e>
            {
                tmp = (capture[i] - 512);
     b90:	52 50       	subi	r21, 0x02	; 2
                rms += tmp * tmp;
     b92:	44 9f       	mul	r20, r20
     b94:	d0 01       	movw	r26, r0
     b96:	45 9f       	mul	r20, r21
     b98:	b0 0d       	add	r27, r0
     b9a:	b0 0d       	add	r27, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	6a 0f       	add	r22, r26
     ba0:	7b 1f       	adc	r23, r27
     ba2:	81 1d       	adc	r24, r1
     ba4:	91 1d       	adc	r25, r1
                c++;
     ba6:	2f 5f       	subi	r18, 0xFF	; 255
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
        /* set the new mux */
        ADMUX |= (old_mux + 1U) % 2U;

        /* VU-METER testing */
        for(uint8_t i = 0; i < FFT_N; i++)
     ba8:	33 e0       	ldi	r19, 0x03	; 3
     baa:	ec 35       	cpi	r30, 0x5C	; 92
     bac:	f3 07       	cpc	r31, r19
     bae:	51 f7       	brne	.-44     	; 0xb84 <ma_audio_process+0x4a>
                tmp = (capture[i] - 512);
                rms += tmp * tmp;
                c++;
            }
        }
        rms = sqrt(rms / c);
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	c9 d3       	rcall	.+1938   	; 0x134a <__udivmodsi4>
     bb8:	ca 01       	movw	r24, r20
     bba:	b9 01       	movw	r22, r18
     bbc:	27 d5       	rcall	.+2638   	; 0x160c <__floatunsisf>
     bbe:	9f d6       	rcall	.+3390   	; 0x18fe <sqrt>
     bc0:	f9 d4       	rcall	.+2546   	; 0x15b4 <__fixunssfsi>

        if (old_mux == 0U)
     bc2:	c1 11       	cpse	r28, r1
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <ma_audio_process+0x96>
        {
            /* Left Channel */
            input_level.left = rms;
     bc6:	70 93 99 01 	sts	0x0199, r23
     bca:	60 93 98 01 	sts	0x0198, r22
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <ma_audio_process+0xa2>
        }
        else if(old_mux == 1U)
     bd0:	c1 30       	cpi	r28, 0x01	; 1
     bd2:	21 f4       	brne	.+8      	; 0xbdc <ma_audio_process+0xa2>
        {
            /* Left Right */
            input_level.right = rms;
     bd4:	70 93 9b 01 	sts	0x019B, r23
     bd8:	60 93 9a 01 	sts	0x019A, r22
        }

        /* Unset completion flag
         * NOTE: modifying shared variables is valid here,
         * no ISR shall be executed now */
        capture_index = 0;
     bdc:	10 92 5c 03 	sts	0x035C, r1
        ADCSRA |= (1 << ADSC);
     be0:	36 9a       	sbi	0x06, 6	; 6

    }

}
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <ma_audio_spectrum>:
 *
 * @return  the audio spectrum (FFT output)
 */
uint16_t* ma_audio_spectrum(uint8_t *buckets)
{
    *buckets = FFT_N;
     be6:	20 e4       	ldi	r18, 0x40	; 64
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
    return spektrum;
}
     bec:	8c e9       	ldi	r24, 0x9C	; 156
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	08 95       	ret

00000bf2 <ma_audio_last_reset>:
    *adc_max = adc_maxS;
#endif
}

void ma_audio_last_reset(void)
{
     bf2:	08 95       	ret

00000bf4 <ma_audio_last_levels>:
}

t_audio_voltage* ma_audio_last_levels(void)
{
    return &input_level;
}
     bf4:	88 e9       	ldi	r24, 0x98	; 152
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	08 95       	ret

00000bfa <ma_gui_menu_display_entry>:
#include "lc75710_graphics.h"

#include "ma_strings.h"     /* String table */

void ma_gui_menu_display_entry(t_menu* menu)
{
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ec 01       	movw	r28, r24

    display_clear();
     c00:	54 de       	rcall	.-856    	; 0x8aa <display_clear>

    if (menu != NULL && menu->page->entries[menu->index].label < STRING_NUM_IDS)
     c02:	20 97       	sbiw	r28, 0x00	; 0
     c04:	c1 f0       	breq	.+48     	; 0xc36 <ma_gui_menu_display_entry+0x3c>
     c06:	88 81       	ld	r24, Y
     c08:	e9 81       	ldd	r30, Y+1	; 0x01
     c0a:	fa 81       	ldd	r31, Y+2	; 0x02
     c0c:	04 80       	ldd	r0, Z+4	; 0x04
     c0e:	f5 81       	ldd	r31, Z+5	; 0x05
     c10:	e0 2d       	mov	r30, r0
     c12:	93 e0       	ldi	r25, 0x03	; 3
     c14:	89 9f       	mul	r24, r25
     c16:	e0 0d       	add	r30, r0
     c18:	f1 1d       	adc	r31, r1
     c1a:	11 24       	eor	r1, r1
     c1c:	e0 81       	ld	r30, Z
     c1e:	ef 30       	cpi	r30, 0x0F	; 15
     c20:	50 f4       	brcc	.+20     	; 0xc36 <ma_gui_menu_display_entry+0x3c>
    {
        display_string_center(g_string_table[menu->page->entries[menu->index].label]);
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e0 5a       	subi	r30, 0xA0	; 160
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
    }

}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28

    display_clear();

    if (menu != NULL && menu->page->entries[menu->index].label < STRING_NUM_IDS)
    {
        display_string_center(g_string_table[menu->page->entries[menu->index].label]);
     c34:	1d ce       	rjmp	.-966    	; 0x870 <display_string_center>
    }

}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <ma_gui_menu_goto_previous>:

t_menu_page* ma_gui_menu_goto_previous(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	21 f4       	brne	.+8      	; 0xc48 <ma_gui_menu_goto_previous+0xc>
        return page->page_previous;
     c40:	fa 01       	movw	r30, r20
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	08 95       	ret
    return NULL;
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
}
     c4c:	08 95       	ret

00000c4e <ma_gui_init>:

void ma_gui_init(t_menu* menu, t_keypad* keypad, t_menu_page* start_page)
{
     c4e:	fb 01       	movw	r30, r22
     c50:	db 01       	movw	r26, r22
     c52:	23 e0       	ldi	r18, 0x03	; 3
    uint8_t i = 0;

    /* Init keypad */
    for (i = 0; i < NUM_BUTTONS; i++)
    {
        keypad->input[i] = false;
     c54:	11 92       	st	Z+, r1
        keypad->buttons[i]  = false;
     c56:	11 8a       	std	Z+17, r1	; 0x11
        keypad->latches[i]  = false;
     c58:	16 86       	std	Z+14, r1	; 0x0e
        keypad->debounce[i] = 0;
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	1d 92       	st	X+, r1
     c5e:	1d 92       	st	X+, r1
     c60:	1d 92       	st	X+, r1
     c62:	1c 92       	st	X, r1
     c64:	16 97       	sbiw	r26, 0x06	; 6
     c66:	21 50       	subi	r18, 0x01	; 1
     c68:	14 96       	adiw	r26, 0x04	; 4
{

    uint8_t i = 0;

    /* Init keypad */
    for (i = 0; i < NUM_BUTTONS; i++)
     c6a:	21 11       	cpse	r18, r1
     c6c:	f3 cf       	rjmp	.-26     	; 0xc54 <ma_gui_init+0x6>
        keypad->latches[i]  = false;
        keypad->debounce[i] = 0;
    }

    /* First selected page: audio sources */
    menu->page            = start_page;
     c6e:	fc 01       	movw	r30, r24
     c70:	52 83       	std	Z+2, r21	; 0x02
     c72:	41 83       	std	Z+1, r20	; 0x01
    menu->page->page_previous = NULL;
     c74:	fa 01       	movw	r30, r20
     c76:	11 82       	std	Z+1, r1	; 0x01
     c78:	10 82       	st	Z, r1
    menu->index           = 0;
     c7a:	fc 01       	movw	r30, r24
     c7c:	10 82       	st	Z, r1
  
    ma_gui_menu_display_entry(menu);
     c7e:	bd cf       	rjmp	.-134    	; 0xbfa <ma_gui_menu_display_entry>

00000c80 <keypad_periodic>:

}

/* Read the keypad, apply debounce to inputs and detect the rising edge */
void keypad_periodic(t_keypad* keypad)
{
     c80:	4f 92       	push	r4
     c82:	5f 92       	push	r5
     c84:	6f 92       	push	r6
     c86:	7f 92       	push	r7
     c88:	8f 92       	push	r8
     c8a:	9f 92       	push	r9
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
      {
        t = false;

        /* debounce the raw input */
        if (keypad->debounce[i] == 0)
          keypad->debounce[i] = g_timestamp;
     ca0:	40 91 8a 03 	lds	r20, 0x038A
     ca4:	50 91 8b 03 	lds	r21, 0x038B
     ca8:	60 91 8c 03 	lds	r22, 0x038C
     cac:	70 91 8d 03 	lds	r23, 0x038D
     cb0:	7c 01       	movw	r14, r24
     cb2:	fc 01       	movw	r30, r24
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
      }
      
      if (t == true && keypad->latches[i] == false)
      {
          /* Falling edge */
          keypad->buttons[i] = true;
     cb8:	cc 24       	eor	r12, r12
     cba:	c3 94       	inc	r12
  uint8_t i = 0;
  bool t = false;

  for (i = 0; i < NUM_BUTTONS; i++)
  {
      t = keypad->input[i];
     cbc:	e7 01       	movw	r28, r14
     cbe:	d9 90       	ld	r13, Y+
     cc0:	7e 01       	movw	r14, r28
     cc2:	ec 01       	movw	r28, r24
     cc4:	ca 0f       	add	r28, r26
     cc6:	db 1f       	adc	r29, r27
      
      if (t == true)
     cc8:	dd 20       	and	r13, r13
     cca:	e1 f0       	breq	.+56     	; 0xd04 <keypad_periodic+0x84>
      {
        t = false;

        /* debounce the raw input */
        if (keypad->debounce[i] == 0)
     ccc:	03 81       	ldd	r16, Z+3	; 0x03
     cce:	14 81       	ldd	r17, Z+4	; 0x04
     cd0:	25 81       	ldd	r18, Z+5	; 0x05
     cd2:	36 81       	ldd	r19, Z+6	; 0x06
     cd4:	01 15       	cp	r16, r1
     cd6:	11 05       	cpc	r17, r1
     cd8:	21 05       	cpc	r18, r1
     cda:	31 05       	cpc	r19, r1
     cdc:	29 f4       	brne	.+10     	; 0xce8 <keypad_periodic+0x68>
          keypad->debounce[i] = g_timestamp;
     cde:	43 83       	std	Z+3, r20	; 0x03
     ce0:	54 83       	std	Z+4, r21	; 0x04
     ce2:	65 83       	std	Z+5, r22	; 0x05
     ce4:	76 83       	std	Z+6, r23	; 0x06
     ce6:	12 c0       	rjmp	.+36     	; 0xd0c <keypad_periodic+0x8c>
        else
          if ((g_timestamp - keypad->debounce[i]) > DEBOUNCE_BUTTONS)
     ce8:	2a 01       	movw	r4, r20
     cea:	3b 01       	movw	r6, r22
     cec:	40 1a       	sub	r4, r16
     cee:	51 0a       	sbc	r5, r17
     cf0:	62 0a       	sbc	r6, r18
     cf2:	73 0a       	sbc	r7, r19
     cf4:	21 e5       	ldi	r18, 0x51	; 81
     cf6:	42 16       	cp	r4, r18
     cf8:	23 ec       	ldi	r18, 0xC3	; 195
     cfa:	52 06       	cpc	r5, r18
     cfc:	61 04       	cpc	r6, r1
     cfe:	71 04       	cpc	r7, r1
     d00:	f0 f4       	brcc	.+60     	; 0xd3e <keypad_periodic+0xbe>
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <keypad_periodic+0x8c>
            t = true;
      }
      else
      {
          keypad->debounce[i] = 0;
     d04:	13 82       	std	Z+3, r1	; 0x03
     d06:	14 82       	std	Z+4, r1	; 0x04
     d08:	15 82       	std	Z+5, r1	; 0x05
     d0a:	16 82       	std	Z+6, r1	; 0x06
      {
        t = false;

        /* debounce the raw input */
        if (keypad->debounce[i] == 0)
          keypad->debounce[i] = g_timestamp;
     d0c:	d1 2c       	mov	r13, r1
          /* Falling edge */
          keypad->buttons[i] = true;
      }
      else
      {
          keypad->buttons[i] = false;
     d0e:	1a 8a       	std	Y+18, r1	; 0x12
      }

      keypad->latches[i] = t;
     d10:	df 86       	std	Y+15, r13	; 0x0f
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	34 96       	adiw	r30, 0x04	; 4
{

  uint8_t i = 0;
  bool t = false;

  for (i = 0; i < NUM_BUTTONS; i++)
     d16:	a3 30       	cpi	r26, 0x03	; 3
     d18:	b1 05       	cpc	r27, r1
     d1a:	81 f6       	brne	.-96     	; 0xcbc <keypad_periodic+0x3c>
      }

      keypad->latches[i] = t;
  }

}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	9f 90       	pop	r9
     d32:	8f 90       	pop	r8
     d34:	7f 90       	pop	r7
     d36:	6f 90       	pop	r6
     d38:	5f 90       	pop	r5
     d3a:	4f 90       	pop	r4
     d3c:	08 95       	ret
      {
          keypad->debounce[i] = 0;
          t = false;
      }
      
      if (t == true && keypad->latches[i] == false)
     d3e:	2f 85       	ldd	r18, Y+15	; 0x0f
     d40:	21 11       	cpse	r18, r1
     d42:	e5 cf       	rjmp	.-54     	; 0xd0e <keypad_periodic+0x8e>
      {
          /* Falling edge */
          keypad->buttons[i] = true;
     d44:	ca 8a       	std	Y+18, r12	; 0x12
     d46:	e4 cf       	rjmp	.-56     	; 0xd10 <keypad_periodic+0x90>

00000d48 <ma_gui_page_change>:
  }

}

void ma_gui_page_change(t_menu *menu, t_menu_page *page_next)
{
     d48:	fc 01       	movw	r30, r24
    if (page_next != NULL)
     d4a:	61 15       	cp	r22, r1
     d4c:	71 05       	cpc	r23, r1
     d4e:	71 f0       	breq	.+28     	; 0xd6c <ma_gui_page_change+0x24>
    {

        menu->page = page_next;
     d50:	72 83       	std	Z+2, r23	; 0x02
     d52:	61 83       	std	Z+1, r22	; 0x01
        menu->index = 0;
     d54:	10 82       	st	Z, r1
        menu->refresh = true;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	83 83       	std	Z+3, r24	; 0x03

        /* call the pre function */
        if (menu->page->pre_post != NULL)
     d5a:	db 01       	movw	r26, r22
     d5c:	12 96       	adiw	r26, 0x02	; 2
     d5e:	ed 91       	ld	r30, X+
     d60:	fc 91       	ld	r31, X
     d62:	13 97       	sbiw	r26, 0x03	; 3
     d64:	30 97       	sbiw	r30, 0x00	; 0
     d66:	11 f0       	breq	.+4      	; 0xd6c <ma_gui_page_change+0x24>
            menu->page->pre_post(REASON_PRE);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	09 94       	ijmp
     d6c:	08 95       	ret

00000d6e <ma_gui_periodic>:

/*

 */
void ma_gui_periodic(t_menu* menu, t_keypad* keypad)
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	fb 01       	movw	r30, r22

    t_menu_page* page_next = NULL;

    if ((menu->index > 0) && keypad->buttons[BUTTON_UP] == true)
     d76:	68 81       	ld	r22, Y
     d78:	66 23       	and	r22, r22
     d7a:	29 f0       	breq	.+10     	; 0xd86 <ma_gui_periodic+0x18>
     d7c:	84 89       	ldd	r24, Z+20	; 0x14
     d7e:	88 23       	and	r24, r24
     d80:	11 f0       	breq	.+4      	; 0xd86 <ma_gui_periodic+0x18>
    {
        menu->index--;
     d82:	61 50       	subi	r22, 0x01	; 1
     d84:	10 c0       	rjmp	.+32     	; 0xda6 <ma_gui_periodic+0x38>
        menu->refresh = true;
    }
    else if (((menu->index + 1) < menu->page->elements) && keypad->buttons[BUTTON_DOWN] == true)
     d86:	49 81       	ldd	r20, Y+1	; 0x01
     d88:	5a 81       	ldd	r21, Y+2	; 0x02
     d8a:	86 2f       	mov	r24, r22
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	da 01       	movw	r26, r20
     d92:	16 96       	adiw	r26, 0x06	; 6
     d94:	2c 91       	ld	r18, X
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	82 17       	cp	r24, r18
     d9a:	93 07       	cpc	r25, r19
     d9c:	44 f4       	brge	.+16     	; 0xdae <ma_gui_periodic+0x40>
     d9e:	82 89       	ldd	r24, Z+18	; 0x12
     da0:	88 23       	and	r24, r24
     da2:	29 f0       	breq	.+10     	; 0xdae <ma_gui_periodic+0x40>
    {
        menu->index++;
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	68 83       	st	Y, r22
        menu->refresh = true;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	8b 83       	std	Y+3, r24	; 0x03
     dac:	17 c0       	rjmp	.+46     	; 0xddc <ma_gui_periodic+0x6e>
    }
    else if (keypad->buttons[BUTTON_SELECT] == true)
     dae:	83 89       	ldd	r24, Z+19	; 0x13
     db0:	88 23       	and	r24, r24
     db2:	a1 f0       	breq	.+40     	; 0xddc <ma_gui_periodic+0x6e>
    {
        if (menu->page->entries[menu->index].cb != NULL)
     db4:	da 01       	movw	r26, r20
     db6:	14 96       	adiw	r26, 0x04	; 4
     db8:	ed 91       	ld	r30, X+
     dba:	fc 91       	ld	r31, X
     dbc:	15 97       	sbiw	r26, 0x05	; 5
     dbe:	b3 e0       	ldi	r27, 0x03	; 3
     dc0:	6b 9f       	mul	r22, r27
     dc2:	e0 0d       	add	r30, r0
     dc4:	f1 1d       	adc	r31, r1
     dc6:	11 24       	eor	r1, r1
     dc8:	01 80       	ldd	r0, Z+1	; 0x01
     dca:	f2 81       	ldd	r31, Z+2	; 0x02
     dcc:	e0 2d       	mov	r30, r0
     dce:	30 97       	sbiw	r30, 0x00	; 0
     dd0:	29 f0       	breq	.+10     	; 0xddc <ma_gui_periodic+0x6e>
        {
            page_next = menu->page->entries[menu->index].cb(REASON_SELECT, menu->index, menu->page);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	09 95       	icall

            ma_gui_page_change(menu, page_next);
     dd6:	bc 01       	movw	r22, r24
     dd8:	ce 01       	movw	r24, r28
     dda:	b6 df       	rcall	.-148    	; 0xd48 <ma_gui_page_change>
        }

    }
    
    if (menu->refresh == true)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	88 23       	and	r24, r24
     de0:	c9 f0       	breq	.+50     	; 0xe14 <ma_gui_periodic+0xa6>
    {
        menu->refresh = false;
     de2:	1b 82       	std	Y+3, r1	; 0x03
        ma_gui_menu_display_entry(menu);
     de4:	ce 01       	movw	r24, r28
     de6:	09 df       	rcall	.-494    	; 0xbfa <ma_gui_menu_display_entry>
        if (menu->page->entries[menu->index].cb != NULL)
     de8:	49 81       	ldd	r20, Y+1	; 0x01
     dea:	5a 81       	ldd	r21, Y+2	; 0x02
     dec:	68 81       	ld	r22, Y
     dee:	da 01       	movw	r26, r20
     df0:	14 96       	adiw	r26, 0x04	; 4
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	15 97       	sbiw	r26, 0x05	; 5
     df8:	b3 e0       	ldi	r27, 0x03	; 3
     dfa:	6b 9f       	mul	r22, r27
     dfc:	e0 0d       	add	r30, r0
     dfe:	f1 1d       	adc	r31, r1
     e00:	11 24       	eor	r1, r1
     e02:	01 80       	ldd	r0, Z+1	; 0x01
     e04:	f2 81       	ldd	r31, Z+2	; 0x02
     e06:	e0 2d       	mov	r30, r0
     e08:	30 97       	sbiw	r30, 0x00	; 0
     e0a:	21 f0       	breq	.+8      	; 0xe14 <ma_gui_periodic+0xa6>
            menu->page->entries[menu->index].cb(REASON_HOOVER, menu->index, menu->page);
     e0c:	80 e0       	ldi	r24, 0x00	; 0
    }

}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
    if (menu->refresh == true)
    {
        menu->refresh = false;
        ma_gui_menu_display_entry(menu);
        if (menu->page->entries[menu->index].cb != NULL)
            menu->page->entries[menu->index].cb(REASON_HOOVER, menu->index, menu->page);
     e12:	09 94       	ijmp
    }

}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <read_from_persistent>:
*
* @brief Read persistent variables from the non volatile storage
* @param persistent the persistent variables to write to
*/
void read_from_persistent(t_persistent* persistent)
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
    //eeprom_read_block(persistent, (void*)5, sizeof(t_persistent));
    persistent->brightness = eeprom_read_byte((const uint8_t*)5);
     e20:	85 e0       	ldi	r24, 0x05	; 5
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	f5 d5       	rcall	.+3050   	; 0x1a10 <__eerd_byte_m8>
     e26:	88 83       	st	Y, r24
    persistent->audio_source = eeprom_read_byte((const uint8_t*)6);
     e28:	86 e0       	ldi	r24, 0x06	; 6
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	f1 d5       	rcall	.+3042   	; 0x1a10 <__eerd_byte_m8>
     e2e:	89 83       	std	Y+1, r24	; 0x01
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <write_to_persistent>:
*
* @brief Write persistent variables to the non volatile storage
* @param persistent the persistent variables to read from
*/
void write_to_persistent(t_persistent* persistent)
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	ec 01       	movw	r28, r24
    //eeprom_write_block((void*)5, persistent, sizeof(t_persistent));
    eeprom_write_byte((uint8_t*)5, persistent->brightness);
     e3c:	68 81       	ld	r22, Y
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	ee d5       	rcall	.+3036   	; 0x1a20 <__eewr_byte_m8>
    eeprom_write_byte((uint8_t*)6, persistent->audio_source);
     e44:	69 81       	ldd	r22, Y+1	; 0x01
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	90 e0       	ldi	r25, 0x00	; 0
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
*/
void write_to_persistent(t_persistent* persistent)
{
    //eeprom_write_block((void*)5, persistent, sizeof(t_persistent));
    eeprom_write_byte((uint8_t*)5, persistent->brightness);
    eeprom_write_byte((uint8_t*)6, persistent->audio_source);
     e4e:	e8 c5       	rjmp	.+3024   	; 0x1a20 <__eewr_byte_m8>

00000e50 <source_select>:
    return debounce->input_old;

}

uint8_t source_select(uint8_t source)
{
     e50:	81 50       	subi	r24, 0x01	; 1
     e52:	83 30       	cpi	r24, 0x03	; 3
     e54:	30 f4       	brcc	.+12     	; 0xe62 <source_select+0x12>
     e56:	e8 2f       	mov	r30, r24
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ef 57       	subi	r30, 0x7F	; 127
     e5c:	fe 4f       	sbci	r31, 0xFE	; 254
     e5e:	80 81       	ld	r24, Z
     e60:	08 95       	ret
     e62:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }

    return outputs;

}
     e64:	08 95       	ret

00000e66 <ma_gui_menu_goto_sett_display>:

/* MENU: callbacks */

t_menu_page* ma_gui_menu_goto_sett_display(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	19 f4       	brne	.+6      	; 0xe70 <ma_gui_menu_goto_sett_display+0xa>
        return &PAGE_SETTINGS_DISPLAY;
     e6a:	80 ec       	ldi	r24, 0xC0	; 192
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret
    else
        return NULL;
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
}
     e74:	08 95       	ret

00000e76 <ma_gui_menu_goto_sett_brightness>:

t_menu_page* ma_gui_menu_goto_sett_brightness(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	19 f4       	brne	.+6      	; 0xe80 <ma_gui_menu_goto_sett_brightness+0xa>
        return &PAGE_SETTINGS_BRIGHTNESS;
     e7a:	8a ea       	ldi	r24, 0xAA	; 170
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	08 95       	ret
    else
        return NULL;
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
}
     e84:	08 95       	ret

00000e86 <ma_gui_menu_goto_tools>:
    return NULL;
}

t_menu_page* ma_gui_menu_goto_tools(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	19 f4       	brne	.+6      	; 0xe90 <ma_gui_menu_goto_tools+0xa>
        return &PAGE_SETTINGS_TOOLS;
     e8a:	8a e9       	ldi	r24, 0x9A	; 154
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	08 95       	ret
    else
        return NULL;
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
}
     e94:	08 95       	ret

00000e96 <ma_gui_settings_brightness_pre>:
        .elements = sizeof(MENU_DEBUG) / sizeof(t_menu_entry)
};

void ma_gui_settings_brightness_pre(uint8_t reason)
{
    if (reason == REASON_PRE)
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	41 f4       	brne	.+16     	; 0xeaa <ma_gui_settings_brightness_pre+0x14>
    {
        if (persistent.brightness < PAGE_SETTINGS_BRIGHTNESS.elements)
     e9a:	80 91 5d 03 	lds	r24, 0x035D
     e9e:	90 91 b0 00 	lds	r25, 0x00B0
     ea2:	89 17       	cp	r24, r25
     ea4:	10 f4       	brcc	.+4      	; 0xeaa <ma_gui_settings_brightness_pre+0x14>
            menu.index = persistent.brightness;
     ea6:	80 93 74 03 	sts	0x0374, r24
     eaa:	08 95       	ret

00000eac <ma_gui_source_select_pre>:
    }
}

void ma_gui_source_select_pre(uint8_t reason)
{
    if (reason == REASON_PRE)
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	41 f4       	brne	.+16     	; 0xec0 <ma_gui_source_select_pre+0x14>
    {
        if (persistent.audio_source < PAGE_SOURCE.elements)
     eb0:	80 91 5e 03 	lds	r24, 0x035E
     eb4:	90 91 ef 00 	lds	r25, 0x00EF
     eb8:	89 17       	cp	r24, r25
     eba:	10 f4       	brcc	.+4      	; 0xec0 <ma_gui_source_select_pre+0x14>
        {
            menu.index = persistent.audio_source;
     ebc:	80 93 74 03 	sts	0x0374, r24
     ec0:	08 95       	ret

00000ec2 <ma_gui_menu_tools_selection>:
t_menu_page* ma_gui_menu_tools_selection(uint8_t reason, uint8_t id, t_menu_page* page)
{

    void (*start)(void) = 0;

    if (reason == REASON_SELECT)
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	59 f4       	brne	.+22     	; 0xedc <ma_gui_menu_tools_selection+0x1a>
    {
        switch(id)
     ec6:	66 23       	and	r22, r22
     ec8:	31 f0       	breq	.+12     	; 0xed6 <ma_gui_menu_tools_selection+0x14>
     eca:	61 30       	cpi	r22, 0x01	; 1
     ecc:	39 f4       	brne	.+14     	; 0xedc <ma_gui_menu_tools_selection+0x1a>
        {
            case 0:
                return &PAGE_DEBUG;
            case 1:
                start();
     ece:	e0 e0       	ldi	r30, 0x00	; 0
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	09 95       	icall
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <ma_gui_menu_tools_selection+0x1a>
    if (reason == REASON_SELECT)
    {
        switch(id)
        {
            case 0:
                return &PAGE_DEBUG;
     ed6:	8e e7       	ldi	r24, 0x7E	; 126
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	08 95       	ret
            default:
                break;
        }
    }

    return NULL;
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0

}
     ee0:	08 95       	ret

00000ee2 <ma_gui_source_select>:
}

t_menu_page* ma_gui_source_select(uint8_t reason, uint8_t id, t_menu_page* page)
{

    if (reason == REASON_HOOVER)
     ee2:	81 11       	cpse	r24, r1
     ee4:	0a c0       	rjmp	.+20     	; 0xefa <ma_gui_source_select+0x18>
    {
        persistent.audio_source = id;
     ee6:	60 93 5e 03 	sts	0x035E, r22
        operational.output.relays = source_select(id);
     eea:	86 2f       	mov	r24, r22
     eec:	b1 df       	rcall	.-158    	; 0xe50 <source_select>
     eee:	80 93 80 03 	sts	0x0380, r24
        write_to_persistent(&persistent);
     ef2:	8d e5       	ldi	r24, 0x5D	; 93
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	9f df       	rcall	.-194    	; 0xe36 <write_to_persistent>
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <ma_gui_source_select+0x22>
    }
    else if (reason == REASON_SELECT)
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	19 f4       	brne	.+6      	; 0xf04 <ma_gui_source_select+0x22>
    {
        return &PAGE_SETTINGS;
     efe:	80 ed       	ldi	r24, 0xD0	; 208
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	08 95       	ret
    }

    return NULL;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0

}
     f08:	08 95       	ret

00000f0a <ma_gui_refresh>:
    return NULL;

}

void ma_gui_refresh()
{
     f0a:	af 92       	push	r10
     f0c:	bf 92       	push	r11
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	1f 92       	push	r1
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
    uint16_t max_capture = 0;
    uint16_t min_capture = 0;
    uint8_t t;
    uint16_t v = 0;

    spektrum = ma_audio_spectrum(&fft_n);
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	5f de       	rcall	.-834    	; 0xbe6 <ma_audio_spectrum>

    if (menu.page == &PAGE_DEBUG)
     f28:	80 91 75 03 	lds	r24, 0x0375
     f2c:	90 91 76 03 	lds	r25, 0x0376
     f30:	8e 57       	subi	r24, 0x7E	; 126
     f32:	90 40       	sbci	r25, 0x00	; 0
     f34:	09 f0       	breq	.+2      	; 0xf38 <ma_gui_refresh+0x2e>
     f36:	74 c0       	rjmp	.+232    	; 0x1020 <ma_gui_refresh+0x116>
    {
menu.index = 5;
     f38:	85 e0       	ldi	r24, 0x05	; 5
     f3a:	80 93 74 03 	sts	0x0374, r24
            	*/
            	break;

            case 5:

                display_load_vumeter_harrows();
     f3e:	09 dd       	rcall	.-1518   	; 0x952 <display_load_vumeter_harrows>

                t_audio_voltage* levels = ma_audio_last_levels();
     f40:	59 de       	rcall	.-846    	; 0xbf4 <ma_audio_last_levels>
     f42:	5c 01       	movw	r10, r24
                uint8_t disp_left = 0;
                uint8_t disp_right = 0;

                if (levels->left > 0)
     f44:	fc 01       	movw	r30, r24
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	61 15       	cp	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	01 f1       	breq	.+64     	; 0xf90 <ma_gui_refresh+0x86>
                {
                    x_dB = 20.0f * log10(levels->left / operational.adc_max);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	5b d3       	rcall	.+1718   	; 0x160c <__floatunsisf>
     f56:	20 91 86 03 	lds	r18, 0x0386
     f5a:	30 91 87 03 	lds	r19, 0x0387
     f5e:	40 91 88 03 	lds	r20, 0x0388
     f62:	50 91 89 03 	lds	r21, 0x0389
     f66:	be d2       	rcall	.+1404   	; 0x14e4 <__divsf3>
     f68:	18 d4       	rcall	.+2096   	; 0x179a <log10>
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 ea       	ldi	r20, 0xA0	; 160
     f70:	51 e4       	ldi	r21, 0x41	; 65
     f72:	5e d4       	rcall	.+2236   	; 0x1830 <__mulsf3>
                    t = operational.adc_min_ref - fabs(x_dB);
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	5f 77       	andi	r21, 0x7F	; 127
     f7a:	60 91 82 03 	lds	r22, 0x0382
     f7e:	70 91 83 03 	lds	r23, 0x0383
     f82:	80 91 84 03 	lds	r24, 0x0384
     f86:	90 91 85 03 	lds	r25, 0x0385
     f8a:	44 d2       	rcall	.+1160   	; 0x1414 <__subsf3>
     f8c:	13 d3       	rcall	.+1574   	; 0x15b4 <__fixunssfsi>
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <ma_gui_refresh+0x88>
                }
                else
                {
                    t = 0;
     f90:	60 e0       	ldi	r22, 0x00	; 0
                }
                disp_left = (t / operational.adc_min_ref) * 9.0f;
     f92:	c0 90 82 03 	lds	r12, 0x0382
     f96:	d0 90 83 03 	lds	r13, 0x0383
     f9a:	e0 90 84 03 	lds	r14, 0x0384
     f9e:	f0 90 85 03 	lds	r15, 0x0385
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	33 d3       	rcall	.+1638   	; 0x1610 <__floatsisf>
     faa:	a7 01       	movw	r20, r14
     fac:	96 01       	movw	r18, r12
     fae:	9a d2       	rcall	.+1332   	; 0x14e4 <__divsf3>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e1       	ldi	r20, 0x10	; 16
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	3b d4       	rcall	.+2166   	; 0x1830 <__mulsf3>
     fba:	fc d2       	rcall	.+1528   	; 0x15b4 <__fixunssfsi>
     fbc:	16 2f       	mov	r17, r22

                if (levels->right > 0)
     fbe:	f5 01       	movw	r30, r10
     fc0:	62 81       	ldd	r22, Z+2	; 0x02
     fc2:	73 81       	ldd	r23, Z+3	; 0x03
     fc4:	61 15       	cp	r22, r1
     fc6:	71 05       	cpc	r23, r1
     fc8:	d1 f0       	breq	.+52     	; 0xffe <ma_gui_refresh+0xf4>
                {
                    x_dB = 20.0f * log10(levels->right / operational.adc_max);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	1e d3       	rcall	.+1596   	; 0x160c <__floatunsisf>
     fd0:	20 91 86 03 	lds	r18, 0x0386
     fd4:	30 91 87 03 	lds	r19, 0x0387
     fd8:	40 91 88 03 	lds	r20, 0x0388
     fdc:	50 91 89 03 	lds	r21, 0x0389
     fe0:	81 d2       	rcall	.+1282   	; 0x14e4 <__divsf3>
     fe2:	db d3       	rcall	.+1974   	; 0x179a <log10>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 ea       	ldi	r20, 0xA0	; 160
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	21 d4       	rcall	.+2114   	; 0x1830 <__mulsf3>
                    t = operational.adc_min_ref - fabs(x_dB);
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	5f 77       	andi	r21, 0x7F	; 127
     ff4:	c7 01       	movw	r24, r14
     ff6:	b6 01       	movw	r22, r12
     ff8:	0d d2       	rcall	.+1050   	; 0x1414 <__subsf3>
     ffa:	dc d2       	rcall	.+1464   	; 0x15b4 <__fixunssfsi>
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <ma_gui_refresh+0xf6>

                }
                else
                {
                    t = 0;
     ffe:	60 e0       	ldi	r22, 0x00	; 0
                }
                disp_right = (t / operational.adc_min_ref) * 9.0f;
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	04 d3       	rcall	.+1544   	; 0x1610 <__floatsisf>
    1008:	a7 01       	movw	r20, r14
    100a:	96 01       	movw	r18, r12
    100c:	6b d2       	rcall	.+1238   	; 0x14e4 <__divsf3>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e1       	ldi	r20, 0x10	; 16
    1014:	51 e4       	ldi	r21, 0x41	; 65
    1016:	0c d4       	rcall	.+2072   	; 0x1830 <__mulsf3>
    1018:	cd d2       	rcall	.+1434   	; 0x15b4 <__fixunssfsi>

                display_show_vumeter_harrows(disp_left,disp_right,true);
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	81 2f       	mov	r24, r17
    101e:	bc dc       	rcall	.-1672   	; 0x998 <display_show_vumeter_harrows>
            default:
                break;
        }
    }

}
    1020:	0f 90       	pop	r0
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	08 95       	ret

00001036 <set_display_brightness>:
* set_display_brightness
*
* @brief Set application display brightness
*/
void set_display_brightness(uint8_t level)
{
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <set_display_brightness+0x8>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <set_display_brightness+0xa>
    1040:	1f 92       	push	r1
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	18 2f       	mov	r17, r24
    uint8_t brightness_levels[5] = { 48, 96, 144, 192, 240 };
    1048:	85 e0       	ldi	r24, 0x05	; 5
    104a:	e8 e1       	ldi	r30, 0x18	; 24
    104c:	f1 e0       	ldi	r31, 0x01	; 1
    104e:	de 01       	movw	r26, r28
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	01 90       	ld	r0, Z+
    1054:	0d 92       	st	X+, r0
    1056:	8a 95       	dec	r24
    1058:	e1 f7       	brne	.-8      	; 0x1052 <set_display_brightness+0x1c>
    
    if (level < 5)
    105a:	15 30       	cpi	r17, 0x05	; 5
    105c:	a8 f4       	brcc	.+42     	; 0x1088 <set_display_brightness+0x52>
    {
        lc75710_intensity(brightness_levels[level]);
    105e:	e1 e0       	ldi	r30, 0x01	; 1
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	ec 0f       	add	r30, r28
    1064:	fd 1f       	adc	r31, r29
    1066:	e1 0f       	add	r30, r17
    1068:	f1 1d       	adc	r31, r1
    106a:	80 81       	ld	r24, Z
    106c:	6f db       	rcall	.-2338   	; 0x74c <lc75710_intensity>
        persistent.brightness = level;
    106e:	10 93 5d 03 	sts	0x035D, r17
        write_to_persistent(&persistent);
    1072:	8d e5       	ldi	r24, 0x5D	; 93
    1074:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    
    if (level < 5)
    {
        lc75710_intensity(brightness_levels[level]);
        persistent.brightness = level;
        write_to_persistent(&persistent);
    1086:	d7 ce       	rjmp	.-594    	; 0xe36 <write_to_persistent>
    }
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	08 95       	ret

0000109a <ma_gui_menu_set_brightness>:
        return NULL;
}

t_menu_page* ma_gui_menu_set_brightness(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_HOOVER)
    109a:	81 11       	cpse	r24, r1
        set_display_brightness(id);
    else
        return ma_gui_menu_goto_previous(reason, id, page);
    109c:	cf cd       	rjmp	.-1122   	; 0xc3c <ma_gui_menu_goto_previous>
}

t_menu_page* ma_gui_menu_set_brightness(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_HOOVER)
        set_display_brightness(id);
    109e:	86 2f       	mov	r24, r22
    10a0:	ca df       	rcall	.-108    	; 0x1036 <set_display_brightness>
    else
        return ma_gui_menu_goto_previous(reason, id, page);
    return NULL;
}
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	08 95       	ret

000010a8 <io_init>:
{

    /* I/O init */

    /* Audio Switch Relays init */
    RLY_DDR |= 1 << RLY_1;  /* OUTPUT */
    10a8:	8d 9a       	sbi	0x11, 5	; 17
    RLY_DDR |= 1 << RLY_2;  /* OUTPUT */
    10aa:	8e 9a       	sbi	0x11, 6	; 17
    RLY_DDR |= 1 << RLY_3;  /* OUTPUT */
    10ac:	8f 9a       	sbi	0x11, 7	; 17

    /* Keypad */
    DDRB &= ~(1 << KEY_1);  /* INPUT */
    10ae:	b8 98       	cbi	0x17, 0	; 23
    DDRB &= ~(1 << KEY_2);  /* INPUT */
    10b0:	b9 98       	cbi	0x17, 1	; 23
    DDRB &= ~(1 << KEY_3);  /* INPUT */
    10b2:	ba 98       	cbi	0x17, 2	; 23
    PORTB |=  (1 << KEY_1);  /* PULL-UP */
    10b4:	c0 9a       	sbi	0x18, 0	; 24
    PORTB |=  (1 << KEY_2);  /* PULL-UP */
    10b6:	c1 9a       	sbi	0x18, 1	; 24
    PORTB |=  (1 << KEY_3);  /* PULL-UP */
    10b8:	c2 9a       	sbi	0x18, 2	; 24
    10ba:	08 95       	ret

000010bc <setup>:

void setup()
{

    /* Initialize the I/O */
    io_init();
    10bc:	f5 df       	rcall	.-22     	; 0x10a8 <io_init>

    /* Initialze the display */
    lc75710_init();
    10be:	84 db       	rcall	.-2296   	; 0x7c8 <lc75710_init>

    /* Timer: start ticking */
    timer_init();
    10c0:	fb d0       	rcall	.+502    	; 0x12b8 <timer_init>

    /* ADC */
    ma_audio_init();
    10c2:	cd dc       	rcall	.-1638   	; 0xa5e <ma_audio_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c4:	2f e3       	ldi	r18, 0x3F	; 63
    10c6:	87 e7       	ldi	r24, 0x77	; 119
    10c8:	9b e1       	ldi	r25, 0x1B	; 27
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	80 40       	sbci	r24, 0x00	; 0
    10ce:	90 40       	sbci	r25, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <setup+0xe>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <setup+0x18>
    10d4:	00 00       	nop

    /* Wait Aref stabilization (0.47uF capacitance) */
    _delay_ms(750);

    /* Initialize the serial port */
    uart_init();
    10d6:	21 d1       	rcall	.+578    	; 0x131a <uart_init>
    stdout = &uart_output;
    10d8:	8a e0       	ldi	r24, 0x0A	; 10
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	90 93 91 03 	sts	0x0391, r25
    10e0:	80 93 90 03 	sts	0x0390, r24
    stdin  = &uart_input;
    10e4:	8c ef       	ldi	r24, 0xFC	; 252
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	90 93 8f 03 	sts	0x038F, r25
    10ec:	80 93 8e 03 	sts	0x038E, r24

    /* Load persistent data */
    read_from_persistent(&persistent);
    10f0:	8d e5       	ldi	r24, 0x5D	; 93
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	92 de       	rcall	.-732    	; 0xe1a <read_from_persistent>

    /* Initialize the GUI */
    ma_gui_init(&menu, &keypad, &PAGE_SOURCE);
    10f6:	49 ee       	ldi	r20, 0xE9	; 233
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	6f e5       	ldi	r22, 0x5F	; 95
    10fc:	73 e0       	ldi	r23, 0x03	; 3
    10fe:	84 e7       	ldi	r24, 0x74	; 116
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	a5 dd       	rcall	.-1206   	; 0xc4e <ma_gui_init>

    /* Apply persistent data */
    set_display_brightness(persistent.brightness);
    1104:	80 91 5d 03 	lds	r24, 0x035D
    1108:	96 cf       	rjmp	.-212    	; 0x1036 <set_display_brightness>

0000110a <input>:

}

void input(t_keypad *keypad)
{
    110a:	fc 01       	movw	r30, r24

    /* Keypad */
    keypad->input[BUTTON_SELECT]    = !((PINB >> KEY_1) & 0x1);
    110c:	86 b3       	in	r24, 0x16	; 22
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	89 27       	eor	r24, r25
    1114:	81 83       	std	Z+1, r24	; 0x01
    keypad->input[BUTTON_UP]        = !((PINB >> KEY_2) & 0x1);
    1116:	86 b3       	in	r24, 0x16	; 22
    1118:	86 95       	lsr	r24
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	89 27       	eor	r24, r25
    111e:	82 83       	std	Z+2, r24	; 0x02
    keypad->input[BUTTON_DOWN]      = !((PINB >> KEY_3) & 0x1);
    1120:	86 b3       	in	r24, 0x16	; 22
    1122:	82 fb       	bst	r24, 2
    1124:	88 27       	eor	r24, r24
    1126:	80 f9       	bld	r24, 0
    1128:	89 27       	eor	r24, r25
    112a:	80 83       	st	Z, r24
    112c:	08 95       	ret

0000112e <output>:

void output()
{

    /* Relays */
    (operational.output.relays      & 0x1) ? (RLY_PORT |= 1 << RLY_1) : (RLY_PORT &= ~(1 << RLY_1));
    112e:	80 91 80 03 	lds	r24, 0x0380
    1132:	80 ff       	sbrs	r24, 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <output+0xc>
    1136:	95 9a       	sbi	0x12, 5	; 18
    1138:	01 c0       	rjmp	.+2      	; 0x113c <output+0xe>
    113a:	95 98       	cbi	0x12, 5	; 18
    (operational.output.relays >> 1 & 0x1) ? (RLY_PORT |= 1 << RLY_2) : (RLY_PORT &= ~(1 << RLY_2));
    113c:	81 ff       	sbrs	r24, 1
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <output+0x16>
    1140:	96 9a       	sbi	0x12, 6	; 18
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <output+0x18>
    1144:	96 98       	cbi	0x12, 6	; 18
    (operational.output.relays >> 2 & 0x1) ? (RLY_PORT |= 1 << RLY_3) : (RLY_PORT &= ~(1 << RLY_3));
    1146:	82 ff       	sbrs	r24, 2
    1148:	02 c0       	rjmp	.+4      	; 0x114e <output+0x20>
    114a:	97 9a       	sbi	0x12, 7	; 18
    114c:	08 95       	ret
    114e:	97 98       	cbi	0x12, 7	; 18
    1150:	08 95       	ret

00001152 <main>:

    uint32_t start = 0;
    bool init_done = false;

    /* Disable interrupts for the whole init period */
    cli();
    1152:	f8 94       	cli

    /* System stuff */
    system_init();
    1154:	ac d0       	rcall	.+344    	; 0x12ae <system_init>
    1156:	2f eb       	ldi	r18, 0xBF	; 191
    1158:	87 e2       	ldi	r24, 0x27	; 39
    115a:	99 e0       	ldi	r25, 0x09	; 9
    115c:	21 50       	subi	r18, 0x01	; 1
    115e:	80 40       	sbci	r24, 0x00	; 0
    1160:	90 40       	sbci	r25, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <main+0xa>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <main+0x14>
    1166:	00 00       	nop

    /* Wait for power and LC75710 stabilization */
    _delay_ms(250);

    /* Setup the peripherals */
    setup();
    1168:	a9 df       	rcall	.-174    	; 0x10bc <setup>

    /* Start the application: re-enable interrupts */
    sei();
    116a:	78 94       	sei

    /* Load CGRAM data */
    display_load_bars_vert();
    116c:	ab db       	rcall	.-2218   	; 0x8c4 <display_load_bars_vert>
//        j++;
//        j  %= 10;
//        _delay_us(25);
    //}

    if (!((PINB >> KEY_1) & 0x1))
    116e:	b0 99       	sbic	0x16, 0	; 22
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <main+0x26>
    {
        /* Directly go to the debug menu */
        ma_gui_page_change(&menu, &PAGE_DEBUG);
    1172:	6e e7       	ldi	r22, 0x7E	; 126
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <main+0x2a>
    }
    else
    {
        /* Start with the SOURCE menu */
        ma_gui_page_change(&menu, &PAGE_SOURCE);
    1178:	69 ee       	ldi	r22, 0xE9	; 233
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	84 e7       	ldi	r24, 0x74	; 116
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	e3 dd       	rcall	.-1082   	; 0xd48 <ma_gui_page_change>
    }
    ma_gui_page_change(&menu, &PAGE_DEBUG);
    1182:	6e e7       	ldi	r22, 0x7E	; 126
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	84 e7       	ldi	r24, 0x74	; 116
    1188:	93 e0       	ldi	r25, 0x03	; 3
    118a:	de dd       	rcall	.-1092   	; 0xd48 <ma_gui_page_change>

    /* Set operational data */
    operational.adc_max = 85.0f;
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	aa ea       	ldi	r26, 0xAA	; 170
    1192:	b2 e4       	ldi	r27, 0x42	; 66
    1194:	80 93 86 03 	sts	0x0386, r24
    1198:	90 93 87 03 	sts	0x0387, r25
    119c:	a0 93 88 03 	sts	0x0388, r26
    11a0:	b0 93 89 03 	sts	0x0389, r27
    operational.adc_min_ref  = 38.59f;
    11a4:	89 e2       	ldi	r24, 0x29	; 41
    11a6:	9c e5       	ldi	r25, 0x5C	; 92
    11a8:	aa e1       	ldi	r26, 0x1A	; 26
    11aa:	b2 e4       	ldi	r27, 0x42	; 66
    11ac:	80 93 82 03 	sts	0x0382, r24
    11b0:	90 93 83 03 	sts	0x0383, r25
    11b4:	a0 93 84 03 	sts	0x0384, r26
    11b8:	b0 93 85 03 	sts	0x0385, r27

int main(void)
{

    uint32_t start = 0;
    bool init_done = false;
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    /* Start the main loop (and never return) */
    while (1)
    {

        /* Cycle start */
        start = g_timestamp;
    11be:	c0 90 8a 03 	lds	r12, 0x038A
    11c2:	d0 90 8b 03 	lds	r13, 0x038B
    11c6:	e0 90 8c 03 	lds	r14, 0x038C
    11ca:	f0 90 8d 03 	lds	r15, 0x038D

        /* Read inputs */
        input(&keypad);
    11ce:	8f e5       	ldi	r24, 0x5F	; 95
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	9b df       	rcall	.-202    	; 0x110a <input>

        /* Keypad logic */
        keypad_periodic(&keypad);
    11d4:	8f e5       	ldi	r24, 0x5F	; 95
    11d6:	93 e0       	ldi	r25, 0x03	; 3
    11d8:	53 dd       	rcall	.-1370   	; 0xc80 <keypad_periodic>

        /* Process audio (FFT / VU-METER) */
        ma_audio_process();
    11da:	af dc       	rcall	.-1698   	; 0xb3a <ma_audio_process>

        /* Run the periodic GUI logic */
        ma_gui_periodic(&menu, &keypad);
    11dc:	6f e5       	ldi	r22, 0x5F	; 95
    11de:	73 e0       	ldi	r23, 0x03	; 3
    11e0:	84 e7       	ldi	r24, 0x74	; 116
    11e2:	93 e0       	ldi	r25, 0x03	; 3
    11e4:	c4 dd       	rcall	.-1144   	; 0xd6e <ma_gui_periodic>

        /* Run the periodic menu refresh handler */
        ma_gui_refresh();
    11e6:	91 de       	rcall	.-734    	; 0xf0a <ma_gui_refresh>

        /* Set outputs */
        output();
    11e8:	a2 df       	rcall	.-188    	; 0x112e <output>

        /* Cycle end */
        operational.cycle_time = g_timestamp - start;
    11ea:	80 91 8a 03 	lds	r24, 0x038A
    11ee:	90 91 8b 03 	lds	r25, 0x038B
    11f2:	a0 91 8c 03 	lds	r26, 0x038C
    11f6:	b0 91 8d 03 	lds	r27, 0x038D
    11fa:	8c 19       	sub	r24, r12
    11fc:	9d 09       	sbc	r25, r13
    11fe:	ae 09       	sbc	r26, r14
    1200:	bf 09       	sbc	r27, r15
    1202:	80 93 78 03 	sts	0x0378, r24
    1206:	90 93 79 03 	sts	0x0379, r25
    120a:	a0 93 7a 03 	sts	0x037A, r26
    120e:	b0 93 7b 03 	sts	0x037B, r27

        /* Save peak cycle time */
        if (operational.cycle_time > operational.cycle_time_max)
    1212:	40 91 7c 03 	lds	r20, 0x037C
    1216:	50 91 7d 03 	lds	r21, 0x037D
    121a:	60 91 7e 03 	lds	r22, 0x037E
    121e:	70 91 7f 03 	lds	r23, 0x037F
    1222:	48 17       	cp	r20, r24
    1224:	59 07       	cpc	r21, r25
    1226:	6a 07       	cpc	r22, r26
    1228:	7b 07       	cpc	r23, r27
    122a:	40 f4       	brcc	.+16     	; 0x123c <main+0xea>
        {
            operational.cycle_time_max = operational.cycle_time;
    122c:	80 93 7c 03 	sts	0x037C, r24
    1230:	90 93 7d 03 	sts	0x037D, r25
    1234:	a0 93 7e 03 	sts	0x037E, r26
    1238:	b0 93 7f 03 	sts	0x037F, r27
        }

        /* Check stack sanity */
        if (StackCount() == 0U)
    123c:	1f d0       	rcall	.+62     	; 0x127c <StackCount>
    123e:	89 2b       	or	r24, r25
    1240:	29 f4       	brne	.+10     	; 0x124c <main+0xfa>
        {
            display_clear();
    1242:	33 db       	rcall	.-2458   	; 0x8aa <display_clear>
            display_string("StackOver!");
    1244:	84 e8       	ldi	r24, 0x84	; 132
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	fd da       	rcall	.-2566   	; 0x844 <display_string>
    124a:	ff cf       	rjmp	.-2      	; 0x124a <main+0xf8>
            for(;;);
        }

        if ((init_done == false) && (g_timestamp > (1000U * 500)))
    124c:	c1 11       	cpse	r28, r1
    124e:	b7 cf       	rjmp	.-146    	; 0x11be <main+0x6c>
    1250:	80 91 8a 03 	lds	r24, 0x038A
    1254:	90 91 8b 03 	lds	r25, 0x038B
    1258:	a0 91 8c 03 	lds	r26, 0x038C
    125c:	b0 91 8d 03 	lds	r27, 0x038D
    1260:	81 32       	cpi	r24, 0x21	; 33
    1262:	91 4a       	sbci	r25, 0xA1	; 161
    1264:	a1 05       	cpc	r26, r1
    1266:	b1 05       	cpc	r27, r1
    1268:	08 f4       	brcc	.+2      	; 0x126c <main+0x11a>
    126a:	a9 cf       	rjmp	.-174    	; 0x11be <main+0x6c>
        {
            /* do after - init operations once */

            /* turn on the display */
            lc75710_on_off(MDATA_AND_ADATA, true, 0xFFFF);
    126c:	4f ef       	ldi	r20, 0xFF	; 255
    126e:	5f ef       	ldi	r21, 0xFF	; 255
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	47 da       	rcall	.-2930   	; 0x704 <lc75710_on_off>

            /* ADC stats reset */
            ma_audio_last_reset();
    1276:	bd dc       	rcall	.-1670   	; 0xbf2 <ma_audio_last_reset>

            /* set the flag */
            init_done = true;
    1278:	c1 e0       	ldi	r28, 0x01	; 1
    127a:	a1 cf       	rjmp	.-190    	; 0x11be <main+0x6c>

0000127c <StackCount>:
    #endif
    }

uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    127c:	e4 e9       	ldi	r30, 0x94	; 148
    127e:	f3 e0       	ldi	r31, 0x03	; 3
    1280:	cf 01       	movw	r24, r30
    1282:	84 59       	subi	r24, 0x94	; 148
    1284:	93 40       	sbci	r25, 0x03	; 3
    uint16_t       c = 0;

    while(*p == 0xc5 && p <= &__stack)
    1286:	20 81       	ld	r18, Z
    1288:	25 3c       	cpi	r18, 0xC5	; 197
    128a:	39 f4       	brne	.+14     	; 0x129a <StackCount+0x1e>
    128c:	24 e0       	ldi	r18, 0x04	; 4
    128e:	ef 35       	cpi	r30, 0x5F	; 95
    1290:	f2 07       	cpc	r31, r18
    1292:	09 f0       	breq	.+2      	; 0x1296 <StackCount+0x1a>
    1294:	10 f4       	brcc	.+4      	; 0x129a <StackCount+0x1e>
    {
        p++;
    1296:	31 96       	adiw	r30, 0x01	; 1
    1298:	f3 cf       	rjmp	.-26     	; 0x1280 <StackCount+0x4>
        c++;
    }

    return c;
}
    129a:	08 95       	ret

0000129c <__vector_default>:
 * @brief This interrupt handler is executed whenever an ISR is fired
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 */
ISR(BADISR_vect)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    display_string("no ISR!");
    12a6:	8f e8       	ldi	r24, 0x8F	; 143
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	cc da       	rcall	.-2664   	; 0x844 <display_string>
    12ac:	ff cf       	rjmp	.-2      	; 0x12ac <__vector_default+0x10>

000012ae <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    operational.reset_reason = MCUCSR;
    12ae:	84 b7       	in	r24, 0x34	; 52
    12b0:	80 93 81 03 	sts	0x0381, r24

    /* Reset state for the next proper detection */
    MCUCSR = 0;
    12b4:	14 be       	out	0x34, r1	; 52
    12b6:	08 95       	ret

000012b8 <timer_init>:
 */
void timer_init(void)
{

    /* set up timer with prescaler */
    TCCR0 = TIMER_0_PRESCALER_8;
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	83 bf       	out	0x33, r24	; 51

    /* initialize counter */
    TCNT0 = 105;
    12bc:	89 e6       	ldi	r24, 0x69	; 105
    12be:	82 bf       	out	0x32, r24	; 50

    /* enable overflow interrupt */
    TIMSK |= (1 << TOIE0);
    12c0:	89 b7       	in	r24, 0x39	; 57
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	89 bf       	out	0x39, r24	; 57
    12c6:	08 95       	ret

000012c8 <__vector_9>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_OVF_vect)
{
    12c8:	1f 92       	push	r1
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	0f 92       	push	r0
    12d0:	11 24       	eor	r1, r1
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
    12da:	80 91 8a 03 	lds	r24, 0x038A
    12de:	90 91 8b 03 	lds	r25, 0x038B
    12e2:	a0 91 8c 03 	lds	r26, 0x038C
    12e6:	b0 91 8d 03 	lds	r27, 0x038D
    12ea:	8c 59       	subi	r24, 0x9C	; 156
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	af 4f       	sbci	r26, 0xFF	; 255
    12f0:	bf 4f       	sbci	r27, 0xFF	; 255
    12f2:	80 93 8a 03 	sts	0x038A, r24
    12f6:	90 93 8b 03 	sts	0x038B, r25
    12fa:	a0 93 8c 03 	sts	0x038C, r26
    12fe:	b0 93 8d 03 	sts	0x038D, r27
    TCNT0 		+= 105;		/* Advance internal counter */
    1302:	82 b7       	in	r24, 0x32	; 50
    1304:	87 59       	subi	r24, 0x97	; 151
    1306:	82 bf       	out	0x32, r24	; 50
}
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    UBRRH = UBRRH_VALUE;
    131a:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
    131c:	8c e0       	ldi	r24, 0x0C	; 12
    131e:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= _BV(U2X);
    1320:	59 9a       	sbi	0x0b, 1	; 11
#else
    UCSRA &= ~(_BV(U2X0));
#endif

    UCSRC = _BV(UCSZ1) | _BV(UCSZ0); /* 8-bit data */
    1322:	86 e0       	ldi	r24, 0x06	; 6
    1324:	80 bd       	out	0x20, r24	; 32
    UCSRB = _BV(RXEN) | _BV(TXEN);   /* Enable RX and TX */
    1326:	88 e1       	ldi	r24, 0x18	; 24
    1328:	8a b9       	out	0x0a, r24	; 10
    132a:	08 95       	ret

0000132c <uart_putchar>:
}

void uart_putchar(char c, FILE *stream) {
    132c:	cf 93       	push	r28
    132e:	c8 2f       	mov	r28, r24
    if (c == '\n') {
    1330:	8a 30       	cpi	r24, 0x0A	; 10
    1332:	11 f4       	brne	.+4      	; 0x1338 <uart_putchar+0xc>
        uart_putchar('\r', stream);
    1334:	8d e0       	ldi	r24, 0x0D	; 13
    1336:	fa df       	rcall	.-12     	; 0x132c <uart_putchar>
    }
    loop_until_bit_is_set(UCSRA, UDRE);
    1338:	5d 9b       	sbis	0x0b, 5	; 11
    133a:	fe cf       	rjmp	.-4      	; 0x1338 <uart_putchar+0xc>
    UDR = c;
    133c:	cc b9       	out	0x0c, r28	; 12
}
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSRA, RXC);
    1342:	5f 9b       	sbis	0x0b, 7	; 11
    1344:	fe cf       	rjmp	.-4      	; 0x1342 <uart_getchar>
    return UDR;
    1346:	8c b1       	in	r24, 0x0c	; 12
}
    1348:	08 95       	ret

0000134a <__udivmodsi4>:
    134a:	a1 e2       	ldi	r26, 0x21	; 33
    134c:	1a 2e       	mov	r1, r26
    134e:	aa 1b       	sub	r26, r26
    1350:	bb 1b       	sub	r27, r27
    1352:	fd 01       	movw	r30, r26
    1354:	0d c0       	rjmp	.+26     	; 0x1370 <__udivmodsi4_ep>

00001356 <__udivmodsi4_loop>:
    1356:	aa 1f       	adc	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	ee 1f       	adc	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	a2 17       	cp	r26, r18
    1360:	b3 07       	cpc	r27, r19
    1362:	e4 07       	cpc	r30, r20
    1364:	f5 07       	cpc	r31, r21
    1366:	20 f0       	brcs	.+8      	; 0x1370 <__udivmodsi4_ep>
    1368:	a2 1b       	sub	r26, r18
    136a:	b3 0b       	sbc	r27, r19
    136c:	e4 0b       	sbc	r30, r20
    136e:	f5 0b       	sbc	r31, r21

00001370 <__udivmodsi4_ep>:
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	1a 94       	dec	r1
    137a:	69 f7       	brne	.-38     	; 0x1356 <__udivmodsi4_loop>
    137c:	60 95       	com	r22
    137e:	70 95       	com	r23
    1380:	80 95       	com	r24
    1382:	90 95       	com	r25
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	bd 01       	movw	r22, r26
    138a:	cf 01       	movw	r24, r30
    138c:	08 95       	ret

0000138e <__ashldi3>:
    138e:	0f 93       	push	r16
    1390:	08 30       	cpi	r16, 0x08	; 8
    1392:	90 f0       	brcs	.+36     	; 0x13b8 <__ashldi3+0x2a>
    1394:	98 2f       	mov	r25, r24
    1396:	87 2f       	mov	r24, r23
    1398:	76 2f       	mov	r23, r22
    139a:	65 2f       	mov	r22, r21
    139c:	54 2f       	mov	r21, r20
    139e:	43 2f       	mov	r20, r19
    13a0:	32 2f       	mov	r19, r18
    13a2:	22 27       	eor	r18, r18
    13a4:	08 50       	subi	r16, 0x08	; 8
    13a6:	f4 cf       	rjmp	.-24     	; 0x1390 <__ashldi3+0x2>
    13a8:	22 0f       	add	r18, r18
    13aa:	33 1f       	adc	r19, r19
    13ac:	44 1f       	adc	r20, r20
    13ae:	55 1f       	adc	r21, r21
    13b0:	66 1f       	adc	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 95       	dec	r16
    13ba:	b2 f7       	brpl	.-20     	; 0x13a8 <__ashldi3+0x1a>
    13bc:	0f 91       	pop	r16
    13be:	08 95       	ret

000013c0 <__ashrdi3>:
    13c0:	97 fb       	bst	r25, 7
    13c2:	10 f8       	bld	r1, 0

000013c4 <__lshrdi3>:
    13c4:	16 94       	lsr	r1
    13c6:	00 08       	sbc	r0, r0
    13c8:	0f 93       	push	r16
    13ca:	08 30       	cpi	r16, 0x08	; 8
    13cc:	98 f0       	brcs	.+38     	; 0x13f4 <__lshrdi3+0x30>
    13ce:	08 50       	subi	r16, 0x08	; 8
    13d0:	23 2f       	mov	r18, r19
    13d2:	34 2f       	mov	r19, r20
    13d4:	45 2f       	mov	r20, r21
    13d6:	56 2f       	mov	r21, r22
    13d8:	67 2f       	mov	r22, r23
    13da:	78 2f       	mov	r23, r24
    13dc:	89 2f       	mov	r24, r25
    13de:	90 2d       	mov	r25, r0
    13e0:	f4 cf       	rjmp	.-24     	; 0x13ca <__lshrdi3+0x6>
    13e2:	05 94       	asr	r0
    13e4:	97 95       	ror	r25
    13e6:	87 95       	ror	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	57 95       	ror	r21
    13ee:	47 95       	ror	r20
    13f0:	37 95       	ror	r19
    13f2:	27 95       	ror	r18
    13f4:	0a 95       	dec	r16
    13f6:	aa f7       	brpl	.-22     	; 0x13e2 <__lshrdi3+0x1e>
    13f8:	0f 91       	pop	r16
    13fa:	08 95       	ret

000013fc <__cmpdi2_s8>:
    13fc:	00 24       	eor	r0, r0
    13fe:	a7 fd       	sbrc	r26, 7
    1400:	00 94       	com	r0
    1402:	2a 17       	cp	r18, r26
    1404:	30 05       	cpc	r19, r0
    1406:	40 05       	cpc	r20, r0
    1408:	50 05       	cpc	r21, r0
    140a:	60 05       	cpc	r22, r0
    140c:	70 05       	cpc	r23, r0
    140e:	80 05       	cpc	r24, r0
    1410:	90 05       	cpc	r25, r0
    1412:	08 95       	ret

00001414 <__subsf3>:
    1414:	50 58       	subi	r21, 0x80	; 128

00001416 <__addsf3>:
    1416:	bb 27       	eor	r27, r27
    1418:	aa 27       	eor	r26, r26
    141a:	0e d0       	rcall	.+28     	; 0x1438 <__addsf3x>
    141c:	73 c1       	rjmp	.+742    	; 0x1704 <__fp_round>
    141e:	3c d1       	rcall	.+632    	; 0x1698 <__fp_pscA>
    1420:	30 f0       	brcs	.+12     	; 0x142e <__addsf3+0x18>
    1422:	41 d1       	rcall	.+642    	; 0x16a6 <__fp_pscB>
    1424:	20 f0       	brcs	.+8      	; 0x142e <__addsf3+0x18>
    1426:	31 f4       	brne	.+12     	; 0x1434 <__addsf3+0x1e>
    1428:	9f 3f       	cpi	r25, 0xFF	; 255
    142a:	11 f4       	brne	.+4      	; 0x1430 <__addsf3+0x1a>
    142c:	1e f4       	brtc	.+6      	; 0x1434 <__addsf3+0x1e>
    142e:	31 c1       	rjmp	.+610    	; 0x1692 <__fp_nan>
    1430:	0e f4       	brtc	.+2      	; 0x1434 <__addsf3+0x1e>
    1432:	e0 95       	com	r30
    1434:	e7 fb       	bst	r30, 7
    1436:	27 c1       	rjmp	.+590    	; 0x1686 <__fp_inf>

00001438 <__addsf3x>:
    1438:	e9 2f       	mov	r30, r25
    143a:	86 d1       	rcall	.+780    	; 0x1748 <__fp_split3>
    143c:	80 f3       	brcs	.-32     	; 0x141e <__addsf3+0x8>
    143e:	ba 17       	cp	r27, r26
    1440:	62 07       	cpc	r22, r18
    1442:	73 07       	cpc	r23, r19
    1444:	84 07       	cpc	r24, r20
    1446:	95 07       	cpc	r25, r21
    1448:	18 f0       	brcs	.+6      	; 0x1450 <__addsf3x+0x18>
    144a:	71 f4       	brne	.+28     	; 0x1468 <__addsf3x+0x30>
    144c:	9e f5       	brtc	.+102    	; 0x14b4 <__addsf3x+0x7c>
    144e:	9e c1       	rjmp	.+828    	; 0x178c <__fp_zero>
    1450:	0e f4       	brtc	.+2      	; 0x1454 <__addsf3x+0x1c>
    1452:	e0 95       	com	r30
    1454:	0b 2e       	mov	r0, r27
    1456:	ba 2f       	mov	r27, r26
    1458:	a0 2d       	mov	r26, r0
    145a:	0b 01       	movw	r0, r22
    145c:	b9 01       	movw	r22, r18
    145e:	90 01       	movw	r18, r0
    1460:	0c 01       	movw	r0, r24
    1462:	ca 01       	movw	r24, r20
    1464:	a0 01       	movw	r20, r0
    1466:	11 24       	eor	r1, r1
    1468:	ff 27       	eor	r31, r31
    146a:	59 1b       	sub	r21, r25
    146c:	99 f0       	breq	.+38     	; 0x1494 <__addsf3x+0x5c>
    146e:	59 3f       	cpi	r21, 0xF9	; 249
    1470:	50 f4       	brcc	.+20     	; 0x1486 <__addsf3x+0x4e>
    1472:	50 3e       	cpi	r21, 0xE0	; 224
    1474:	68 f1       	brcs	.+90     	; 0x14d0 <__addsf3x+0x98>
    1476:	1a 16       	cp	r1, r26
    1478:	f0 40       	sbci	r31, 0x00	; 0
    147a:	a2 2f       	mov	r26, r18
    147c:	23 2f       	mov	r18, r19
    147e:	34 2f       	mov	r19, r20
    1480:	44 27       	eor	r20, r20
    1482:	58 5f       	subi	r21, 0xF8	; 248
    1484:	f3 cf       	rjmp	.-26     	; 0x146c <__addsf3x+0x34>
    1486:	46 95       	lsr	r20
    1488:	37 95       	ror	r19
    148a:	27 95       	ror	r18
    148c:	a7 95       	ror	r26
    148e:	f0 40       	sbci	r31, 0x00	; 0
    1490:	53 95       	inc	r21
    1492:	c9 f7       	brne	.-14     	; 0x1486 <__addsf3x+0x4e>
    1494:	7e f4       	brtc	.+30     	; 0x14b4 <__addsf3x+0x7c>
    1496:	1f 16       	cp	r1, r31
    1498:	ba 0b       	sbc	r27, r26
    149a:	62 0b       	sbc	r22, r18
    149c:	73 0b       	sbc	r23, r19
    149e:	84 0b       	sbc	r24, r20
    14a0:	ba f0       	brmi	.+46     	; 0x14d0 <__addsf3x+0x98>
    14a2:	91 50       	subi	r25, 0x01	; 1
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <__addsf3x+0x96>
    14a6:	ff 0f       	add	r31, r31
    14a8:	bb 1f       	adc	r27, r27
    14aa:	66 1f       	adc	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	c2 f7       	brpl	.-16     	; 0x14a2 <__addsf3x+0x6a>
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <__addsf3x+0x98>
    14b4:	ba 0f       	add	r27, r26
    14b6:	62 1f       	adc	r22, r18
    14b8:	73 1f       	adc	r23, r19
    14ba:	84 1f       	adc	r24, r20
    14bc:	48 f4       	brcc	.+18     	; 0x14d0 <__addsf3x+0x98>
    14be:	87 95       	ror	r24
    14c0:	77 95       	ror	r23
    14c2:	67 95       	ror	r22
    14c4:	b7 95       	ror	r27
    14c6:	f7 95       	ror	r31
    14c8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <__addsf3x+0x96>
    14cc:	b3 cf       	rjmp	.-154    	; 0x1434 <__addsf3+0x1e>
    14ce:	93 95       	inc	r25
    14d0:	88 0f       	add	r24, r24
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <__addsf3x+0x9e>
    14d4:	99 27       	eor	r25, r25
    14d6:	ee 0f       	add	r30, r30
    14d8:	97 95       	ror	r25
    14da:	87 95       	ror	r24
    14dc:	08 95       	ret

000014de <cos>:
    14de:	eb d0       	rcall	.+470    	; 0x16b6 <__fp_rempio2>
    14e0:	e3 95       	inc	r30
    14e2:	21 c1       	rjmp	.+578    	; 0x1726 <__fp_sinus>

000014e4 <__divsf3>:
    14e4:	0c d0       	rcall	.+24     	; 0x14fe <__divsf3x>
    14e6:	0e c1       	rjmp	.+540    	; 0x1704 <__fp_round>
    14e8:	de d0       	rcall	.+444    	; 0x16a6 <__fp_pscB>
    14ea:	40 f0       	brcs	.+16     	; 0x14fc <__divsf3+0x18>
    14ec:	d5 d0       	rcall	.+426    	; 0x1698 <__fp_pscA>
    14ee:	30 f0       	brcs	.+12     	; 0x14fc <__divsf3+0x18>
    14f0:	21 f4       	brne	.+8      	; 0x14fa <__divsf3+0x16>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	19 f0       	breq	.+6      	; 0x14fc <__divsf3+0x18>
    14f6:	c7 c0       	rjmp	.+398    	; 0x1686 <__fp_inf>
    14f8:	51 11       	cpse	r21, r1
    14fa:	49 c1       	rjmp	.+658    	; 0x178e <__fp_szero>
    14fc:	ca c0       	rjmp	.+404    	; 0x1692 <__fp_nan>

000014fe <__divsf3x>:
    14fe:	24 d1       	rcall	.+584    	; 0x1748 <__fp_split3>
    1500:	98 f3       	brcs	.-26     	; 0x14e8 <__divsf3+0x4>

00001502 <__divsf3_pse>:
    1502:	99 23       	and	r25, r25
    1504:	c9 f3       	breq	.-14     	; 0x14f8 <__divsf3+0x14>
    1506:	55 23       	and	r21, r21
    1508:	b1 f3       	breq	.-20     	; 0x14f6 <__divsf3+0x12>
    150a:	95 1b       	sub	r25, r21
    150c:	55 0b       	sbc	r21, r21
    150e:	bb 27       	eor	r27, r27
    1510:	aa 27       	eor	r26, r26
    1512:	62 17       	cp	r22, r18
    1514:	73 07       	cpc	r23, r19
    1516:	84 07       	cpc	r24, r20
    1518:	38 f0       	brcs	.+14     	; 0x1528 <__divsf3_pse+0x26>
    151a:	9f 5f       	subi	r25, 0xFF	; 255
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	44 1f       	adc	r20, r20
    1524:	aa 1f       	adc	r26, r26
    1526:	a9 f3       	breq	.-22     	; 0x1512 <__divsf3_pse+0x10>
    1528:	33 d0       	rcall	.+102    	; 0x1590 <__divsf3_pse+0x8e>
    152a:	0e 2e       	mov	r0, r30
    152c:	3a f0       	brmi	.+14     	; 0x153c <__divsf3_pse+0x3a>
    152e:	e0 e8       	ldi	r30, 0x80	; 128
    1530:	30 d0       	rcall	.+96     	; 0x1592 <__divsf3_pse+0x90>
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	50 40       	sbci	r21, 0x00	; 0
    1536:	e6 95       	lsr	r30
    1538:	00 1c       	adc	r0, r0
    153a:	ca f7       	brpl	.-14     	; 0x152e <__divsf3_pse+0x2c>
    153c:	29 d0       	rcall	.+82     	; 0x1590 <__divsf3_pse+0x8e>
    153e:	fe 2f       	mov	r31, r30
    1540:	27 d0       	rcall	.+78     	; 0x1590 <__divsf3_pse+0x8e>
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	bb 1f       	adc	r27, r27
    154a:	26 17       	cp	r18, r22
    154c:	37 07       	cpc	r19, r23
    154e:	48 07       	cpc	r20, r24
    1550:	ab 07       	cpc	r26, r27
    1552:	b0 e8       	ldi	r27, 0x80	; 128
    1554:	09 f0       	breq	.+2      	; 0x1558 <__divsf3_pse+0x56>
    1556:	bb 0b       	sbc	r27, r27
    1558:	80 2d       	mov	r24, r0
    155a:	bf 01       	movw	r22, r30
    155c:	ff 27       	eor	r31, r31
    155e:	93 58       	subi	r25, 0x83	; 131
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	2a f0       	brmi	.+10     	; 0x156e <__divsf3_pse+0x6c>
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	51 05       	cpc	r21, r1
    1568:	68 f0       	brcs	.+26     	; 0x1584 <__divsf3_pse+0x82>
    156a:	8d c0       	rjmp	.+282    	; 0x1686 <__fp_inf>
    156c:	10 c1       	rjmp	.+544    	; 0x178e <__fp_szero>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	ec f3       	brlt	.-6      	; 0x156c <__divsf3_pse+0x6a>
    1572:	98 3e       	cpi	r25, 0xE8	; 232
    1574:	dc f3       	brlt	.-10     	; 0x156c <__divsf3_pse+0x6a>
    1576:	86 95       	lsr	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b7 95       	ror	r27
    157e:	f7 95       	ror	r31
    1580:	9f 5f       	subi	r25, 0xFF	; 255
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__divsf3_pse+0x74>
    1584:	88 0f       	add	r24, r24
    1586:	91 1d       	adc	r25, r1
    1588:	96 95       	lsr	r25
    158a:	87 95       	ror	r24
    158c:	97 f9       	bld	r25, 7
    158e:	08 95       	ret
    1590:	e1 e0       	ldi	r30, 0x01	; 1
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	bb 1f       	adc	r27, r27
    159a:	62 17       	cp	r22, r18
    159c:	73 07       	cpc	r23, r19
    159e:	84 07       	cpc	r24, r20
    15a0:	ba 07       	cpc	r27, r26
    15a2:	20 f0       	brcs	.+8      	; 0x15ac <__divsf3_pse+0xaa>
    15a4:	62 1b       	sub	r22, r18
    15a6:	73 0b       	sbc	r23, r19
    15a8:	84 0b       	sbc	r24, r20
    15aa:	ba 0b       	sbc	r27, r26
    15ac:	ee 1f       	adc	r30, r30
    15ae:	88 f7       	brcc	.-30     	; 0x1592 <__divsf3_pse+0x90>
    15b0:	e0 95       	com	r30
    15b2:	08 95       	ret

000015b4 <__fixunssfsi>:
    15b4:	d1 d0       	rcall	.+418    	; 0x1758 <__fp_splitA>
    15b6:	88 f0       	brcs	.+34     	; 0x15da <__fixunssfsi+0x26>
    15b8:	9f 57       	subi	r25, 0x7F	; 127
    15ba:	90 f0       	brcs	.+36     	; 0x15e0 <__fixunssfsi+0x2c>
    15bc:	b9 2f       	mov	r27, r25
    15be:	99 27       	eor	r25, r25
    15c0:	b7 51       	subi	r27, 0x17	; 23
    15c2:	a0 f0       	brcs	.+40     	; 0x15ec <__fixunssfsi+0x38>
    15c4:	d1 f0       	breq	.+52     	; 0x15fa <__fixunssfsi+0x46>
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	1a f0       	brmi	.+6      	; 0x15d6 <__fixunssfsi+0x22>
    15d0:	ba 95       	dec	r27
    15d2:	c9 f7       	brne	.-14     	; 0x15c6 <__fixunssfsi+0x12>
    15d4:	12 c0       	rjmp	.+36     	; 0x15fa <__fixunssfsi+0x46>
    15d6:	b1 30       	cpi	r27, 0x01	; 1
    15d8:	81 f0       	breq	.+32     	; 0x15fa <__fixunssfsi+0x46>
    15da:	d8 d0       	rcall	.+432    	; 0x178c <__fp_zero>
    15dc:	b1 e0       	ldi	r27, 0x01	; 1
    15de:	08 95       	ret
    15e0:	d5 c0       	rjmp	.+426    	; 0x178c <__fp_zero>
    15e2:	67 2f       	mov	r22, r23
    15e4:	78 2f       	mov	r23, r24
    15e6:	88 27       	eor	r24, r24
    15e8:	b8 5f       	subi	r27, 0xF8	; 248
    15ea:	39 f0       	breq	.+14     	; 0x15fa <__fixunssfsi+0x46>
    15ec:	b9 3f       	cpi	r27, 0xF9	; 249
    15ee:	cc f3       	brlt	.-14     	; 0x15e2 <__fixunssfsi+0x2e>
    15f0:	86 95       	lsr	r24
    15f2:	77 95       	ror	r23
    15f4:	67 95       	ror	r22
    15f6:	b3 95       	inc	r27
    15f8:	d9 f7       	brne	.-10     	; 0x15f0 <__fixunssfsi+0x3c>
    15fa:	3e f4       	brtc	.+14     	; 0x160a <__fixunssfsi+0x56>
    15fc:	90 95       	com	r25
    15fe:	80 95       	com	r24
    1600:	70 95       	com	r23
    1602:	61 95       	neg	r22
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	08 95       	ret

0000160c <__floatunsisf>:
    160c:	e8 94       	clt
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <__floatsisf+0x12>

00001610 <__floatsisf>:
    1610:	97 fb       	bst	r25, 7
    1612:	3e f4       	brtc	.+14     	; 0x1622 <__floatsisf+0x12>
    1614:	90 95       	com	r25
    1616:	80 95       	com	r24
    1618:	70 95       	com	r23
    161a:	61 95       	neg	r22
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	99 23       	and	r25, r25
    1624:	a9 f0       	breq	.+42     	; 0x1650 <__floatsisf+0x40>
    1626:	f9 2f       	mov	r31, r25
    1628:	96 e9       	ldi	r25, 0x96	; 150
    162a:	bb 27       	eor	r27, r27
    162c:	93 95       	inc	r25
    162e:	f6 95       	lsr	r31
    1630:	87 95       	ror	r24
    1632:	77 95       	ror	r23
    1634:	67 95       	ror	r22
    1636:	b7 95       	ror	r27
    1638:	f1 11       	cpse	r31, r1
    163a:	f8 cf       	rjmp	.-16     	; 0x162c <__floatsisf+0x1c>
    163c:	fa f4       	brpl	.+62     	; 0x167c <__floatsisf+0x6c>
    163e:	bb 0f       	add	r27, r27
    1640:	11 f4       	brne	.+4      	; 0x1646 <__floatsisf+0x36>
    1642:	60 ff       	sbrs	r22, 0
    1644:	1b c0       	rjmp	.+54     	; 0x167c <__floatsisf+0x6c>
    1646:	6f 5f       	subi	r22, 0xFF	; 255
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	16 c0       	rjmp	.+44     	; 0x167c <__floatsisf+0x6c>
    1650:	88 23       	and	r24, r24
    1652:	11 f0       	breq	.+4      	; 0x1658 <__floatsisf+0x48>
    1654:	96 e9       	ldi	r25, 0x96	; 150
    1656:	11 c0       	rjmp	.+34     	; 0x167a <__floatsisf+0x6a>
    1658:	77 23       	and	r23, r23
    165a:	21 f0       	breq	.+8      	; 0x1664 <__floatsisf+0x54>
    165c:	9e e8       	ldi	r25, 0x8E	; 142
    165e:	87 2f       	mov	r24, r23
    1660:	76 2f       	mov	r23, r22
    1662:	05 c0       	rjmp	.+10     	; 0x166e <__floatsisf+0x5e>
    1664:	66 23       	and	r22, r22
    1666:	71 f0       	breq	.+28     	; 0x1684 <__floatsisf+0x74>
    1668:	96 e8       	ldi	r25, 0x86	; 134
    166a:	86 2f       	mov	r24, r22
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	2a f0       	brmi	.+10     	; 0x167c <__floatsisf+0x6c>
    1672:	9a 95       	dec	r25
    1674:	66 0f       	add	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	da f7       	brpl	.-10     	; 0x1672 <__floatsisf+0x62>
    167c:	88 0f       	add	r24, r24
    167e:	96 95       	lsr	r25
    1680:	87 95       	ror	r24
    1682:	97 f9       	bld	r25, 7
    1684:	08 95       	ret

00001686 <__fp_inf>:
    1686:	97 f9       	bld	r25, 7
    1688:	9f 67       	ori	r25, 0x7F	; 127
    168a:	80 e8       	ldi	r24, 0x80	; 128
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	08 95       	ret

00001692 <__fp_nan>:
    1692:	9f ef       	ldi	r25, 0xFF	; 255
    1694:	80 ec       	ldi	r24, 0xC0	; 192
    1696:	08 95       	ret

00001698 <__fp_pscA>:
    1698:	00 24       	eor	r0, r0
    169a:	0a 94       	dec	r0
    169c:	16 16       	cp	r1, r22
    169e:	17 06       	cpc	r1, r23
    16a0:	18 06       	cpc	r1, r24
    16a2:	09 06       	cpc	r0, r25
    16a4:	08 95       	ret

000016a6 <__fp_pscB>:
    16a6:	00 24       	eor	r0, r0
    16a8:	0a 94       	dec	r0
    16aa:	12 16       	cp	r1, r18
    16ac:	13 06       	cpc	r1, r19
    16ae:	14 06       	cpc	r1, r20
    16b0:	05 06       	cpc	r0, r21
    16b2:	08 95       	ret
    16b4:	ee cf       	rjmp	.-36     	; 0x1692 <__fp_nan>

000016b6 <__fp_rempio2>:
    16b6:	50 d0       	rcall	.+160    	; 0x1758 <__fp_splitA>
    16b8:	e8 f3       	brcs	.-6      	; 0x16b4 <__fp_pscB+0xe>
    16ba:	e8 94       	clt
    16bc:	e0 e0       	ldi	r30, 0x00	; 0
    16be:	bb 27       	eor	r27, r27
    16c0:	9f 57       	subi	r25, 0x7F	; 127
    16c2:	f0 f0       	brcs	.+60     	; 0x1700 <__fp_rempio2+0x4a>
    16c4:	2a ed       	ldi	r18, 0xDA	; 218
    16c6:	3f e0       	ldi	r19, 0x0F	; 15
    16c8:	49 ec       	ldi	r20, 0xC9	; 201
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <__fp_rempio2+0x22>
    16cc:	ee 0f       	add	r30, r30
    16ce:	bb 0f       	add	r27, r27
    16d0:	66 1f       	adc	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	28 f0       	brcs	.+10     	; 0x16e2 <__fp_rempio2+0x2c>
    16d8:	b2 3a       	cpi	r27, 0xA2	; 162
    16da:	62 07       	cpc	r22, r18
    16dc:	73 07       	cpc	r23, r19
    16de:	84 07       	cpc	r24, r20
    16e0:	28 f0       	brcs	.+10     	; 0x16ec <__fp_rempio2+0x36>
    16e2:	b2 5a       	subi	r27, 0xA2	; 162
    16e4:	62 0b       	sbc	r22, r18
    16e6:	73 0b       	sbc	r23, r19
    16e8:	84 0b       	sbc	r24, r20
    16ea:	e3 95       	inc	r30
    16ec:	9a 95       	dec	r25
    16ee:	72 f7       	brpl	.-36     	; 0x16cc <__fp_rempio2+0x16>
    16f0:	80 38       	cpi	r24, 0x80	; 128
    16f2:	30 f4       	brcc	.+12     	; 0x1700 <__fp_rempio2+0x4a>
    16f4:	9a 95       	dec	r25
    16f6:	bb 0f       	add	r27, r27
    16f8:	66 1f       	adc	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	d2 f7       	brpl	.-12     	; 0x16f4 <__fp_rempio2+0x3e>
    1700:	90 48       	sbci	r25, 0x80	; 128
    1702:	3d c1       	rjmp	.+634    	; 0x197e <__fp_mpack_finite>

00001704 <__fp_round>:
    1704:	09 2e       	mov	r0, r25
    1706:	03 94       	inc	r0
    1708:	00 0c       	add	r0, r0
    170a:	11 f4       	brne	.+4      	; 0x1710 <__fp_round+0xc>
    170c:	88 23       	and	r24, r24
    170e:	52 f0       	brmi	.+20     	; 0x1724 <__fp_round+0x20>
    1710:	bb 0f       	add	r27, r27
    1712:	40 f4       	brcc	.+16     	; 0x1724 <__fp_round+0x20>
    1714:	bf 2b       	or	r27, r31
    1716:	11 f4       	brne	.+4      	; 0x171c <__fp_round+0x18>
    1718:	60 ff       	sbrs	r22, 0
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <__fp_round+0x20>
    171c:	6f 5f       	subi	r22, 0xFF	; 255
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	08 95       	ret

00001726 <__fp_sinus>:
    1726:	ef 93       	push	r30
    1728:	e0 ff       	sbrs	r30, 0
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <__fp_sinus+0x12>
    172c:	a2 ea       	ldi	r26, 0xA2	; 162
    172e:	2a ed       	ldi	r18, 0xDA	; 218
    1730:	3f e0       	ldi	r19, 0x0F	; 15
    1732:	49 ec       	ldi	r20, 0xC9	; 201
    1734:	5f eb       	ldi	r21, 0xBF	; 191
    1736:	80 de       	rcall	.-768    	; 0x1438 <__addsf3x>
    1738:	e5 df       	rcall	.-54     	; 0x1704 <__fp_round>
    173a:	0f 90       	pop	r0
    173c:	03 94       	inc	r0
    173e:	01 fc       	sbrc	r0, 1
    1740:	90 58       	subi	r25, 0x80	; 128
    1742:	e6 e2       	ldi	r30, 0x26	; 38
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	53 c1       	rjmp	.+678    	; 0x19ee <__fp_powsodd>

00001748 <__fp_split3>:
    1748:	57 fd       	sbrc	r21, 7
    174a:	90 58       	subi	r25, 0x80	; 128
    174c:	44 0f       	add	r20, r20
    174e:	55 1f       	adc	r21, r21
    1750:	59 f0       	breq	.+22     	; 0x1768 <__fp_splitA+0x10>
    1752:	5f 3f       	cpi	r21, 0xFF	; 255
    1754:	71 f0       	breq	.+28     	; 0x1772 <__fp_splitA+0x1a>
    1756:	47 95       	ror	r20

00001758 <__fp_splitA>:
    1758:	88 0f       	add	r24, r24
    175a:	97 fb       	bst	r25, 7
    175c:	99 1f       	adc	r25, r25
    175e:	61 f0       	breq	.+24     	; 0x1778 <__fp_splitA+0x20>
    1760:	9f 3f       	cpi	r25, 0xFF	; 255
    1762:	79 f0       	breq	.+30     	; 0x1782 <__fp_splitA+0x2a>
    1764:	87 95       	ror	r24
    1766:	08 95       	ret
    1768:	12 16       	cp	r1, r18
    176a:	13 06       	cpc	r1, r19
    176c:	14 06       	cpc	r1, r20
    176e:	55 1f       	adc	r21, r21
    1770:	f2 cf       	rjmp	.-28     	; 0x1756 <__fp_split3+0xe>
    1772:	46 95       	lsr	r20
    1774:	f1 df       	rcall	.-30     	; 0x1758 <__fp_splitA>
    1776:	08 c0       	rjmp	.+16     	; 0x1788 <__fp_splitA+0x30>
    1778:	16 16       	cp	r1, r22
    177a:	17 06       	cpc	r1, r23
    177c:	18 06       	cpc	r1, r24
    177e:	99 1f       	adc	r25, r25
    1780:	f1 cf       	rjmp	.-30     	; 0x1764 <__fp_splitA+0xc>
    1782:	86 95       	lsr	r24
    1784:	71 05       	cpc	r23, r1
    1786:	61 05       	cpc	r22, r1
    1788:	08 94       	sec
    178a:	08 95       	ret

0000178c <__fp_zero>:
    178c:	e8 94       	clt

0000178e <__fp_szero>:
    178e:	bb 27       	eor	r27, r27
    1790:	66 27       	eor	r22, r22
    1792:	77 27       	eor	r23, r23
    1794:	cb 01       	movw	r24, r22
    1796:	97 f9       	bld	r25, 7
    1798:	08 95       	ret

0000179a <log10>:
    179a:	0a d0       	rcall	.+20     	; 0x17b0 <log>
    179c:	29 ed       	ldi	r18, 0xD9	; 217
    179e:	3b e5       	ldi	r19, 0x5B	; 91
    17a0:	4e ed       	ldi	r20, 0xDE	; 222
    17a2:	5e e3       	ldi	r21, 0x3E	; 62
    17a4:	45 c0       	rjmp	.+138    	; 0x1830 <__mulsf3>
    17a6:	0e f0       	brts	.+2      	; 0x17aa <log10+0x10>
    17a8:	e8 c0       	rjmp	.+464    	; 0x197a <__fp_mpack>
    17aa:	73 cf       	rjmp	.-282    	; 0x1692 <__fp_nan>
    17ac:	68 94       	set
    17ae:	6b cf       	rjmp	.-298    	; 0x1686 <__fp_inf>

000017b0 <log>:
    17b0:	d3 df       	rcall	.-90     	; 0x1758 <__fp_splitA>
    17b2:	c8 f3       	brcs	.-14     	; 0x17a6 <log10+0xc>
    17b4:	99 23       	and	r25, r25
    17b6:	d1 f3       	breq	.-12     	; 0x17ac <log10+0x12>
    17b8:	c6 f3       	brts	.-16     	; 0x17aa <log10+0x10>
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	1f 93       	push	r17
    17c0:	0f 93       	push	r16
    17c2:	ff 92       	push	r15
    17c4:	c9 2f       	mov	r28, r25
    17c6:	dd 27       	eor	r29, r29
    17c8:	88 23       	and	r24, r24
    17ca:	2a f0       	brmi	.+10     	; 0x17d6 <log+0x26>
    17cc:	21 97       	sbiw	r28, 0x01	; 1
    17ce:	66 0f       	add	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	88 1f       	adc	r24, r24
    17d4:	da f7       	brpl	.-10     	; 0x17cc <log+0x1c>
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e8       	ldi	r20, 0x80	; 128
    17dc:	5f eb       	ldi	r21, 0xBF	; 191
    17de:	9f e3       	ldi	r25, 0x3F	; 63
    17e0:	88 39       	cpi	r24, 0x98	; 152
    17e2:	20 f0       	brcs	.+8      	; 0x17ec <log+0x3c>
    17e4:	80 3e       	cpi	r24, 0xE0	; 224
    17e6:	30 f0       	brcs	.+12     	; 0x17f4 <log+0x44>
    17e8:	21 96       	adiw	r28, 0x01	; 1
    17ea:	8f 77       	andi	r24, 0x7F	; 127
    17ec:	14 de       	rcall	.-984    	; 0x1416 <__addsf3>
    17ee:	e4 e4       	ldi	r30, 0x44	; 68
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <log+0x4a>
    17f4:	10 de       	rcall	.-992    	; 0x1416 <__addsf3>
    17f6:	e1 e7       	ldi	r30, 0x71	; 113
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	d4 d0       	rcall	.+424    	; 0x19a4 <__fp_powser>
    17fc:	8b 01       	movw	r16, r22
    17fe:	be 01       	movw	r22, r28
    1800:	ec 01       	movw	r28, r24
    1802:	fb 2e       	mov	r15, r27
    1804:	6f 57       	subi	r22, 0x7F	; 127
    1806:	71 09       	sbc	r23, r1
    1808:	75 95       	asr	r23
    180a:	77 1f       	adc	r23, r23
    180c:	88 0b       	sbc	r24, r24
    180e:	99 0b       	sbc	r25, r25
    1810:	ff de       	rcall	.-514    	; 0x1610 <__floatsisf>
    1812:	28 e1       	ldi	r18, 0x18	; 24
    1814:	32 e7       	ldi	r19, 0x72	; 114
    1816:	41 e3       	ldi	r20, 0x31	; 49
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	16 d0       	rcall	.+44     	; 0x1848 <__mulsf3x>
    181c:	af 2d       	mov	r26, r15
    181e:	98 01       	movw	r18, r16
    1820:	ae 01       	movw	r20, r28
    1822:	ff 90       	pop	r15
    1824:	0f 91       	pop	r16
    1826:	1f 91       	pop	r17
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	05 de       	rcall	.-1014   	; 0x1438 <__addsf3x>
    182e:	6a cf       	rjmp	.-300    	; 0x1704 <__fp_round>

00001830 <__mulsf3>:
    1830:	0b d0       	rcall	.+22     	; 0x1848 <__mulsf3x>
    1832:	68 cf       	rjmp	.-304    	; 0x1704 <__fp_round>
    1834:	31 df       	rcall	.-414    	; 0x1698 <__fp_pscA>
    1836:	28 f0       	brcs	.+10     	; 0x1842 <__mulsf3+0x12>
    1838:	36 df       	rcall	.-404    	; 0x16a6 <__fp_pscB>
    183a:	18 f0       	brcs	.+6      	; 0x1842 <__mulsf3+0x12>
    183c:	95 23       	and	r25, r21
    183e:	09 f0       	breq	.+2      	; 0x1842 <__mulsf3+0x12>
    1840:	22 cf       	rjmp	.-444    	; 0x1686 <__fp_inf>
    1842:	27 cf       	rjmp	.-434    	; 0x1692 <__fp_nan>
    1844:	11 24       	eor	r1, r1
    1846:	a3 cf       	rjmp	.-186    	; 0x178e <__fp_szero>

00001848 <__mulsf3x>:
    1848:	7f df       	rcall	.-258    	; 0x1748 <__fp_split3>
    184a:	a0 f3       	brcs	.-24     	; 0x1834 <__mulsf3+0x4>

0000184c <__mulsf3_pse>:
    184c:	95 9f       	mul	r25, r21
    184e:	d1 f3       	breq	.-12     	; 0x1844 <__mulsf3+0x14>
    1850:	95 0f       	add	r25, r21
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	55 1f       	adc	r21, r21
    1856:	62 9f       	mul	r22, r18
    1858:	f0 01       	movw	r30, r0
    185a:	72 9f       	mul	r23, r18
    185c:	bb 27       	eor	r27, r27
    185e:	f0 0d       	add	r31, r0
    1860:	b1 1d       	adc	r27, r1
    1862:	63 9f       	mul	r22, r19
    1864:	aa 27       	eor	r26, r26
    1866:	f0 0d       	add	r31, r0
    1868:	b1 1d       	adc	r27, r1
    186a:	aa 1f       	adc	r26, r26
    186c:	64 9f       	mul	r22, r20
    186e:	66 27       	eor	r22, r22
    1870:	b0 0d       	add	r27, r0
    1872:	a1 1d       	adc	r26, r1
    1874:	66 1f       	adc	r22, r22
    1876:	82 9f       	mul	r24, r18
    1878:	22 27       	eor	r18, r18
    187a:	b0 0d       	add	r27, r0
    187c:	a1 1d       	adc	r26, r1
    187e:	62 1f       	adc	r22, r18
    1880:	73 9f       	mul	r23, r19
    1882:	b0 0d       	add	r27, r0
    1884:	a1 1d       	adc	r26, r1
    1886:	62 1f       	adc	r22, r18
    1888:	83 9f       	mul	r24, r19
    188a:	a0 0d       	add	r26, r0
    188c:	61 1d       	adc	r22, r1
    188e:	22 1f       	adc	r18, r18
    1890:	74 9f       	mul	r23, r20
    1892:	33 27       	eor	r19, r19
    1894:	a0 0d       	add	r26, r0
    1896:	61 1d       	adc	r22, r1
    1898:	23 1f       	adc	r18, r19
    189a:	84 9f       	mul	r24, r20
    189c:	60 0d       	add	r22, r0
    189e:	21 1d       	adc	r18, r1
    18a0:	82 2f       	mov	r24, r18
    18a2:	76 2f       	mov	r23, r22
    18a4:	6a 2f       	mov	r22, r26
    18a6:	11 24       	eor	r1, r1
    18a8:	9f 57       	subi	r25, 0x7F	; 127
    18aa:	50 40       	sbci	r21, 0x00	; 0
    18ac:	8a f0       	brmi	.+34     	; 0x18d0 <__mulsf3_pse+0x84>
    18ae:	e1 f0       	breq	.+56     	; 0x18e8 <__mulsf3_pse+0x9c>
    18b0:	88 23       	and	r24, r24
    18b2:	4a f0       	brmi	.+18     	; 0x18c6 <__mulsf3_pse+0x7a>
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	bb 1f       	adc	r27, r27
    18ba:	66 1f       	adc	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	88 1f       	adc	r24, r24
    18c0:	91 50       	subi	r25, 0x01	; 1
    18c2:	50 40       	sbci	r21, 0x00	; 0
    18c4:	a9 f7       	brne	.-22     	; 0x18b0 <__mulsf3_pse+0x64>
    18c6:	9e 3f       	cpi	r25, 0xFE	; 254
    18c8:	51 05       	cpc	r21, r1
    18ca:	70 f0       	brcs	.+28     	; 0x18e8 <__mulsf3_pse+0x9c>
    18cc:	dc ce       	rjmp	.-584    	; 0x1686 <__fp_inf>
    18ce:	5f cf       	rjmp	.-322    	; 0x178e <__fp_szero>
    18d0:	5f 3f       	cpi	r21, 0xFF	; 255
    18d2:	ec f3       	brlt	.-6      	; 0x18ce <__mulsf3_pse+0x82>
    18d4:	98 3e       	cpi	r25, 0xE8	; 232
    18d6:	dc f3       	brlt	.-10     	; 0x18ce <__mulsf3_pse+0x82>
    18d8:	86 95       	lsr	r24
    18da:	77 95       	ror	r23
    18dc:	67 95       	ror	r22
    18de:	b7 95       	ror	r27
    18e0:	f7 95       	ror	r31
    18e2:	e7 95       	ror	r30
    18e4:	9f 5f       	subi	r25, 0xFF	; 255
    18e6:	c1 f7       	brne	.-16     	; 0x18d8 <__mulsf3_pse+0x8c>
    18e8:	fe 2b       	or	r31, r30
    18ea:	88 0f       	add	r24, r24
    18ec:	91 1d       	adc	r25, r1
    18ee:	96 95       	lsr	r25
    18f0:	87 95       	ror	r24
    18f2:	97 f9       	bld	r25, 7
    18f4:	08 95       	ret
    18f6:	11 f4       	brne	.+4      	; 0x18fc <__mulsf3_pse+0xb0>
    18f8:	0e f4       	brtc	.+2      	; 0x18fc <__mulsf3_pse+0xb0>
    18fa:	cb ce       	rjmp	.-618    	; 0x1692 <__fp_nan>
    18fc:	3e c0       	rjmp	.+124    	; 0x197a <__fp_mpack>

000018fe <sqrt>:
    18fe:	2c df       	rcall	.-424    	; 0x1758 <__fp_splitA>
    1900:	d0 f3       	brcs	.-12     	; 0x18f6 <__mulsf3_pse+0xaa>
    1902:	99 23       	and	r25, r25
    1904:	d9 f3       	breq	.-10     	; 0x18fc <__mulsf3_pse+0xb0>
    1906:	ce f3       	brts	.-14     	; 0x18fa <__mulsf3_pse+0xae>
    1908:	9f 57       	subi	r25, 0x7F	; 127
    190a:	55 0b       	sbc	r21, r21
    190c:	87 ff       	sbrs	r24, 7
    190e:	43 d0       	rcall	.+134    	; 0x1996 <__fp_norm2>
    1910:	00 24       	eor	r0, r0
    1912:	a0 e6       	ldi	r26, 0x60	; 96
    1914:	40 ea       	ldi	r20, 0xA0	; 160
    1916:	90 01       	movw	r18, r0
    1918:	80 58       	subi	r24, 0x80	; 128
    191a:	56 95       	lsr	r21
    191c:	97 95       	ror	r25
    191e:	28 f4       	brcc	.+10     	; 0x192a <sqrt+0x2c>
    1920:	80 5c       	subi	r24, 0xC0	; 192
    1922:	66 0f       	add	r22, r22
    1924:	77 1f       	adc	r23, r23
    1926:	88 1f       	adc	r24, r24
    1928:	20 f0       	brcs	.+8      	; 0x1932 <sqrt+0x34>
    192a:	26 17       	cp	r18, r22
    192c:	37 07       	cpc	r19, r23
    192e:	48 07       	cpc	r20, r24
    1930:	30 f4       	brcc	.+12     	; 0x193e <sqrt+0x40>
    1932:	62 1b       	sub	r22, r18
    1934:	73 0b       	sbc	r23, r19
    1936:	84 0b       	sbc	r24, r20
    1938:	20 29       	or	r18, r0
    193a:	31 29       	or	r19, r1
    193c:	4a 2b       	or	r20, r26
    193e:	a6 95       	lsr	r26
    1940:	17 94       	ror	r1
    1942:	07 94       	ror	r0
    1944:	20 25       	eor	r18, r0
    1946:	31 25       	eor	r19, r1
    1948:	4a 27       	eor	r20, r26
    194a:	58 f7       	brcc	.-42     	; 0x1922 <sqrt+0x24>
    194c:	66 0f       	add	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	20 f0       	brcs	.+8      	; 0x195c <sqrt+0x5e>
    1954:	26 17       	cp	r18, r22
    1956:	37 07       	cpc	r19, r23
    1958:	48 07       	cpc	r20, r24
    195a:	30 f4       	brcc	.+12     	; 0x1968 <sqrt+0x6a>
    195c:	62 0b       	sbc	r22, r18
    195e:	73 0b       	sbc	r23, r19
    1960:	84 0b       	sbc	r24, r20
    1962:	20 0d       	add	r18, r0
    1964:	31 1d       	adc	r19, r1
    1966:	41 1d       	adc	r20, r1
    1968:	a0 95       	com	r26
    196a:	81 f7       	brne	.-32     	; 0x194c <sqrt+0x4e>
    196c:	b9 01       	movw	r22, r18
    196e:	84 2f       	mov	r24, r20
    1970:	91 58       	subi	r25, 0x81	; 129
    1972:	88 0f       	add	r24, r24
    1974:	96 95       	lsr	r25
    1976:	87 95       	ror	r24
    1978:	08 95       	ret

0000197a <__fp_mpack>:
    197a:	9f 3f       	cpi	r25, 0xFF	; 255
    197c:	31 f0       	breq	.+12     	; 0x198a <__fp_mpack_finite+0xc>

0000197e <__fp_mpack_finite>:
    197e:	91 50       	subi	r25, 0x01	; 1
    1980:	20 f4       	brcc	.+8      	; 0x198a <__fp_mpack_finite+0xc>
    1982:	87 95       	ror	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b7 95       	ror	r27
    198a:	88 0f       	add	r24, r24
    198c:	91 1d       	adc	r25, r1
    198e:	96 95       	lsr	r25
    1990:	87 95       	ror	r24
    1992:	97 f9       	bld	r25, 7
    1994:	08 95       	ret

00001996 <__fp_norm2>:
    1996:	91 50       	subi	r25, 0x01	; 1
    1998:	50 40       	sbci	r21, 0x00	; 0
    199a:	66 0f       	add	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	88 1f       	adc	r24, r24
    19a0:	d2 f7       	brpl	.-12     	; 0x1996 <__fp_norm2>
    19a2:	08 95       	ret

000019a4 <__fp_powser>:
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	1f 93       	push	r17
    19aa:	0f 93       	push	r16
    19ac:	ff 92       	push	r15
    19ae:	ef 92       	push	r14
    19b0:	df 92       	push	r13
    19b2:	7b 01       	movw	r14, r22
    19b4:	8c 01       	movw	r16, r24
    19b6:	68 94       	set
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <__fp_powser+0x20>
    19ba:	da 2e       	mov	r13, r26
    19bc:	ef 01       	movw	r28, r30
    19be:	44 df       	rcall	.-376    	; 0x1848 <__mulsf3x>
    19c0:	fe 01       	movw	r30, r28
    19c2:	e8 94       	clt
    19c4:	a5 91       	lpm	r26, Z+
    19c6:	25 91       	lpm	r18, Z+
    19c8:	35 91       	lpm	r19, Z+
    19ca:	45 91       	lpm	r20, Z+
    19cc:	55 91       	lpm	r21, Z+
    19ce:	ae f3       	brts	.-22     	; 0x19ba <__fp_powser+0x16>
    19d0:	ef 01       	movw	r28, r30
    19d2:	32 dd       	rcall	.-1436   	; 0x1438 <__addsf3x>
    19d4:	fe 01       	movw	r30, r28
    19d6:	97 01       	movw	r18, r14
    19d8:	a8 01       	movw	r20, r16
    19da:	da 94       	dec	r13
    19dc:	79 f7       	brne	.-34     	; 0x19bc <__fp_powser+0x18>
    19de:	df 90       	pop	r13
    19e0:	ef 90       	pop	r14
    19e2:	ff 90       	pop	r15
    19e4:	0f 91       	pop	r16
    19e6:	1f 91       	pop	r17
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <__fp_powsodd>:
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	7f 93       	push	r23
    19f4:	6f 93       	push	r22
    19f6:	ff 93       	push	r31
    19f8:	ef 93       	push	r30
    19fa:	9b 01       	movw	r18, r22
    19fc:	ac 01       	movw	r20, r24
    19fe:	18 df       	rcall	.-464    	; 0x1830 <__mulsf3>
    1a00:	ef 91       	pop	r30
    1a02:	ff 91       	pop	r31
    1a04:	cf df       	rcall	.-98     	; 0x19a4 <__fp_powser>
    1a06:	2f 91       	pop	r18
    1a08:	3f 91       	pop	r19
    1a0a:	4f 91       	pop	r20
    1a0c:	5f 91       	pop	r21
    1a0e:	10 cf       	rjmp	.-480    	; 0x1830 <__mulsf3>

00001a10 <__eerd_byte_m8>:
    1a10:	e1 99       	sbic	0x1c, 1	; 28
    1a12:	fe cf       	rjmp	.-4      	; 0x1a10 <__eerd_byte_m8>
    1a14:	9f bb       	out	0x1f, r25	; 31
    1a16:	8e bb       	out	0x1e, r24	; 30
    1a18:	e0 9a       	sbi	0x1c, 0	; 28
    1a1a:	99 27       	eor	r25, r25
    1a1c:	8d b3       	in	r24, 0x1d	; 29
    1a1e:	08 95       	ret

00001a20 <__eewr_byte_m8>:
    1a20:	26 2f       	mov	r18, r22

00001a22 <__eewr_r18_m8>:
    1a22:	e1 99       	sbic	0x1c, 1	; 28
    1a24:	fe cf       	rjmp	.-4      	; 0x1a22 <__eewr_r18_m8>
    1a26:	9f bb       	out	0x1f, r25	; 31
    1a28:	8e bb       	out	0x1e, r24	; 30
    1a2a:	2d bb       	out	0x1d, r18	; 29
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	e2 9a       	sbi	0x1c, 2	; 28
    1a32:	e1 9a       	sbi	0x1c, 1	; 28
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	08 95       	ret

00001a3a <_exit>:
    1a3a:	f8 94       	cli

00001a3c <__stop_program>:
    1a3c:	ff cf       	rjmp	.-2      	; 0x1a3c <__stop_program>
