
ManageAudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  000015cc  00001660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020f  008001ca  008001ca  000017ca  2**0
                  ALLOC
  3 .stab         00003ccc  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002330  00000000  00000000  00005498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000077c8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	3f c0       	rjmp	.+126    	; 0x80 <__ctors_end>
       2:	59 c0       	rjmp	.+178    	; 0xb6 <__bad_interrupt>
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	57 c0       	rjmp	.+174    	; 0xb6 <__bad_interrupt>
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	55 c0       	rjmp	.+170    	; 0xb6 <__bad_interrupt>
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	53 c0       	rjmp	.+166    	; 0xb6 <__bad_interrupt>
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	d3 c7       	rjmp	.+4006   	; 0xfba <__vector_9>
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	4f c0       	rjmp	.+158    	; 0xb6 <__bad_interrupt>
      18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
      1a:	4d c0       	rjmp	.+154    	; 0xb6 <__bad_interrupt>
      1c:	80 c4       	rjmp	.+2304   	; 0x91e <__vector_14>
      1e:	4b c0       	rjmp	.+150    	; 0xb6 <__bad_interrupt>
      20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
      22:	49 c0       	rjmp	.+146    	; 0xb6 <__bad_interrupt>
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	08 00       	.word	0x0008	; ????
      28:	00 00       	nop
      2a:	be 92       	st	-X, r11
      2c:	24 49       	sbci	r18, 0x94	; 148
      2e:	12 3e       	cpi	r17, 0xE2	; 226
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	be cd       	rjmp	.-1156   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>
      36:	cc cc       	rjmp	.-1640   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
      38:	4c 3e       	cpi	r20, 0xEC	; 236
      3a:	00 00       	nop
      3c:	00 80       	ld	r0, Z
      3e:	be ab       	std	Y+54, r27	; 0x36
      40:	aa aa       	std	Y+50, r10	; 0x32
      42:	aa 3e       	cpi	r26, 0xEA	; 234
      44:	00 00       	nop
      46:	00 00       	nop
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	00 00       	nop
      50:	00 00       	nop
      52:	00 08       	sbc	r0, r0
      54:	41 78       	andi	r20, 0x81	; 129
      56:	d3 bb       	out	0x13, r29	; 19
      58:	43 87       	std	Z+11, r20	; 0x0b
      5a:	d1 13       	cpse	r29, r17
      5c:	3d 19       	sub	r19, r13
      5e:	0e 3c       	cpi	r16, 0xCE	; 206
      60:	c3 bd       	out	0x23, r28	; 35
      62:	42 82       	std	Z+2, r4	; 0x02
      64:	ad 2b       	or	r26, r29
      66:	3e 68       	ori	r19, 0x8E	; 142
      68:	ec 82       	std	Y+4, r14	; 0x04
      6a:	76 be       	out	0x36, r7	; 54
      6c:	d9 8f       	std	Y+25, r29	; 0x19
      6e:	e1 a9       	ldd	r30, Z+49	; 0x31
      70:	3e 4c       	sbci	r19, 0xCE	; 206
      72:	80 ef       	ldi	r24, 0xF0	; 240
      74:	ff be       	out	0x3f, r15	; 63
      76:	01 c4       	rjmp	.+2050   	; 0x87a <display_clear+0x18>
      78:	ff 7f       	andi	r31, 0xFF	; 255
      7a:	3f 00       	.word	0x003f	; ????
      7c:	00 00       	nop
	...

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf e5       	ldi	r28, 0x5F	; 95
      86:	d4 e0       	ldi	r29, 0x04	; 4
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a0 e6       	ldi	r26, 0x60	; 96
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	ec ec       	ldi	r30, 0xCC	; 204
      94:	f5 e1       	ldi	r31, 0x15	; 21
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	aa 3c       	cpi	r26, 0xCA	; 202
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	23 e0       	ldi	r18, 0x03	; 3
      a4:	aa ec       	ldi	r26, 0xCA	; 202
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a9 3d       	cpi	r26, 0xD9	; 217
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	15 d7       	rcall	.+3626   	; 0xede <main>
      b4:	89 ca       	rjmp	.-2798   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>

000000b6 <__bad_interrupt>:
      b6:	6b c7       	rjmp	.+3798   	; 0xf8e <__vector_default>

000000b8 <tbl_window>:
      b8:	3d 0a       	sbc	r3, r29
      ba:	85 0a       	sbc	r8, r21
      bc:	5e 0b       	sbc	r21, r30
      be:	c6 0c       	add	r12, r6
      c0:	b8 0e       	add	r11, r24
      c2:	31 11       	cpse	r19, r1
      c4:	29 14       	cp	r2, r9
      c6:	9a 17       	cp	r25, r26
      c8:	7c 1b       	sub	r23, r28
      ca:	c4 1f       	adc	r28, r20
      cc:	68 24       	eor	r6, r8
      ce:	5c 29       	or	r21, r12
      d0:	96 2e       	mov	r9, r22
      d2:	06 34       	cpi	r16, 0x46	; 70
      d4:	a1 39       	cpi	r26, 0x91	; 145
      d6:	58 3f       	cpi	r21, 0xF8	; 248
      d8:	1e 45       	sbci	r17, 0x5E	; 94
      da:	e3 4a       	sbci	r30, 0xA3	; 163
      dc:	9a 50       	subi	r25, 0x0A	; 10
      de:	35 56       	subi	r19, 0x65	; 101
      e0:	a6 5b       	subi	r26, 0xB6	; 182
      e2:	df 60       	ori	r29, 0x0F	; 15
      e4:	d4 65       	ori	r29, 0x54	; 84
      e6:	78 6a       	ori	r23, 0xA8	; 168
      e8:	c0 6e       	ori	r28, 0xE0	; 224
      ea:	a1 72       	andi	r26, 0x21	; 33
      ec:	12 76       	andi	r17, 0x62	; 98
      ee:	0b 79       	andi	r16, 0x9B	; 155
      f0:	83 7b       	andi	r24, 0xB3	; 179
      f2:	75 7d       	andi	r23, 0xD5	; 213
      f4:	dd 7e       	andi	r29, 0xED	; 237
      f6:	b6 7f       	andi	r27, 0xF6	; 246
      f8:	fe 7f       	andi	r31, 0xFE	; 254
      fa:	b6 7f       	andi	r27, 0xF6	; 246
      fc:	dd 7e       	andi	r29, 0xED	; 237
      fe:	75 7d       	andi	r23, 0xD5	; 213
     100:	83 7b       	andi	r24, 0xB3	; 179
     102:	0b 79       	andi	r16, 0x9B	; 155
     104:	12 76       	andi	r17, 0x62	; 98
     106:	a1 72       	andi	r26, 0x21	; 33
     108:	c0 6e       	ori	r28, 0xE0	; 224
     10a:	78 6a       	ori	r23, 0xA8	; 168
     10c:	d4 65       	ori	r29, 0x54	; 84
     10e:	df 60       	ori	r29, 0x0F	; 15
     110:	a6 5b       	subi	r26, 0xB6	; 182
     112:	35 56       	subi	r19, 0x65	; 101
     114:	9a 50       	subi	r25, 0x0A	; 10
     116:	e3 4a       	sbci	r30, 0xA3	; 163
     118:	1e 45       	sbci	r17, 0x5E	; 94
     11a:	58 3f       	cpi	r21, 0xF8	; 248
     11c:	a1 39       	cpi	r26, 0x91	; 145
     11e:	06 34       	cpi	r16, 0x46	; 70
     120:	96 2e       	mov	r9, r22
     122:	5c 29       	or	r21, r12
     124:	68 24       	eor	r6, r8
     126:	c4 1f       	adc	r28, r20
     128:	7c 1b       	sub	r23, r28
     12a:	9a 17       	cp	r25, r26
     12c:	29 14       	cp	r2, r9
     12e:	31 11       	cpse	r19, r1
     130:	b8 0e       	add	r11, r24
     132:	c6 0c       	add	r12, r6
     134:	5e 0b       	sbc	r21, r30
     136:	85 0a       	sbc	r8, r21

00000138 <tbl_cos_sin>:
     138:	ff 7f       	andi	r31, 0xFF	; 255
     13a:	00 00       	nop
     13c:	61 7f       	andi	r22, 0xF1	; 241
     13e:	8b 0c       	add	r8, r11
     140:	89 7d       	andi	r24, 0xD9	; 217
     142:	f8 18       	sub	r15, r8
     144:	7c 7a       	andi	r23, 0xAC	; 172
     146:	27 25       	eor	r18, r7
     148:	40 76       	andi	r20, 0x60	; 96
     14a:	fb 30       	cpi	r31, 0x0B	; 11
     14c:	e1 70       	andi	r30, 0x01	; 1
     14e:	56 3c       	cpi	r21, 0xC6	; 198
     150:	6c 6a       	ori	r22, 0xAC	; 172
     152:	1c 47       	sbci	r17, 0x7C	; 124
     154:	f1 62       	ori	r31, 0x21	; 33
     156:	33 51       	subi	r19, 0x13	; 19
     158:	81 5a       	subi	r24, 0xA1	; 161
     15a:	81 5a       	subi	r24, 0xA1	; 161
     15c:	33 51       	subi	r19, 0x13	; 19
     15e:	f1 62       	ori	r31, 0x21	; 33
     160:	1c 47       	sbci	r17, 0x7C	; 124
     162:	6c 6a       	ori	r22, 0xAC	; 172
     164:	56 3c       	cpi	r21, 0xC6	; 198
     166:	e1 70       	andi	r30, 0x01	; 1
     168:	fb 30       	cpi	r31, 0x0B	; 11
     16a:	40 76       	andi	r20, 0x60	; 96
     16c:	27 25       	eor	r18, r7
     16e:	7c 7a       	andi	r23, 0xAC	; 172
     170:	f8 18       	sub	r15, r8
     172:	89 7d       	andi	r24, 0xD9	; 217
     174:	8b 0c       	add	r8, r11
     176:	61 7f       	andi	r22, 0xF1	; 241
     178:	00 00       	nop
     17a:	fe 7f       	andi	r31, 0xFE	; 254
     17c:	75 f3       	brhs	.-36     	; 0x15a <tbl_cos_sin+0x22>
     17e:	61 7f       	andi	r22, 0xF1	; 241
     180:	08 e7       	ldi	r16, 0x78	; 120
     182:	89 7d       	andi	r24, 0xD9	; 217
     184:	d9 da       	rcall	.-2638   	; 0xfffff738 <__eeprom_end+0xff7ef738>
     186:	7c 7a       	andi	r23, 0xAC	; 172
     188:	05 cf       	rjmp	.-502    	; 0xffffff94 <__eeprom_end+0xff7eff94>
     18a:	40 76       	andi	r20, 0x60	; 96
     18c:	aa c3       	rjmp	.+1876   	; 0x8e2 <display_load_bars_vert+0x66>
     18e:	e1 70       	andi	r30, 0x01	; 1
     190:	e4 b8       	out	0x04, r14	; 4
     192:	6c 6a       	ori	r22, 0xAC	; 172
     194:	cd ae       	std	Y+61, r12	; 0x3d
     196:	f1 62       	ori	r31, 0x21	; 33
     198:	7f a5       	ldd	r23, Y+47	; 0x2f
     19a:	81 5a       	subi	r24, 0xA1	; 161
     19c:	0f 9d       	mul	r16, r15
     19e:	33 51       	subi	r19, 0x13	; 19
     1a0:	94 95       	.word	0x9594	; ????
     1a2:	1c 47       	sbci	r17, 0x7C	; 124
     1a4:	1f 8f       	std	Y+31, r17	; 0x1f
     1a6:	56 3c       	cpi	r21, 0xC6	; 198
     1a8:	c0 89       	ldd	r28, Z+16	; 0x10
     1aa:	fb 30       	cpi	r31, 0x0B	; 11
     1ac:	84 85       	ldd	r24, Z+12	; 0x0c
     1ae:	27 25       	eor	r18, r7
     1b0:	77 82       	std	Z+7, r7	; 0x07
     1b2:	f8 18       	sub	r15, r8
     1b4:	9f 80       	ldd	r9, Y+7	; 0x07
     1b6:	8b 0c       	add	r8, r11

000001b8 <tbl_bitrev>:
     1b8:	00 00       	nop
     1ba:	80 00       	.word	0x0080	; ????
     1bc:	40 00       	.word	0x0040	; ????
     1be:	c0 00       	.word	0x00c0	; ????
     1c0:	20 00       	.word	0x0020	; ????
     1c2:	a0 00       	.word	0x00a0	; ????
     1c4:	60 00       	.word	0x0060	; ????
     1c6:	e0 00       	.word	0x00e0	; ????
     1c8:	10 00       	.word	0x0010	; ????
     1ca:	90 00       	.word	0x0090	; ????
     1cc:	50 00       	.word	0x0050	; ????
     1ce:	d0 00       	.word	0x00d0	; ????
     1d0:	30 00       	.word	0x0030	; ????
     1d2:	b0 00       	.word	0x00b0	; ????
     1d4:	70 00       	.word	0x0070	; ????
     1d6:	f0 00       	.word	0x00f0	; ????
     1d8:	08 00       	.word	0x0008	; ????
     1da:	88 00       	.word	0x0088	; ????
     1dc:	48 00       	.word	0x0048	; ????
     1de:	c8 00       	.word	0x00c8	; ????
     1e0:	28 00       	.word	0x0028	; ????
     1e2:	a8 00       	.word	0x00a8	; ????
     1e4:	68 00       	.word	0x0068	; ????
     1e6:	e8 00       	.word	0x00e8	; ????
     1e8:	18 00       	.word	0x0018	; ????
     1ea:	98 00       	.word	0x0098	; ????
     1ec:	58 00       	.word	0x0058	; ????
     1ee:	d8 00       	.word	0x00d8	; ????
     1f0:	38 00       	.word	0x0038	; ????
     1f2:	b8 00       	.word	0x00b8	; ????
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	f8 00       	.word	0x00f8	; ????

000001f8 <fft_input>:
;----------------------------------------------------------------------------;
#ifndef INPUT_NOUSE
.global fft_input
.func fft_input
fft_input:
	pushw	T2H,T2L
     1f8:	3f 92       	push	r3
     1fa:	2f 92       	push	r2
	pushw	AH,AL
     1fc:	1f 93       	push	r17
     1fe:	0f 93       	push	r16
	pushw	YH,YL
     200:	df 93       	push	r29
     202:	cf 93       	push	r28

	movw	XL, EL				;X = array_src;
     204:	dc 01       	movw	r26, r24
	movw	YL, DL				;Y = array_bfly;
     206:	eb 01       	movw	r28, r22
	clr	EH				;Zero
     208:	99 27       	eor	r25, r25
	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
     20a:	e8 eb       	ldi	r30, 0xB8	; 184
     20c:	f0 e0       	ldi	r31, 0x00	; 0
	ldiw	AH,AL, FFT_N			;A = FFT_N;
     20e:	00 e4       	ldi	r16, 0x40	; 64
     210:	10 e0       	ldi	r17, 0x00	; 0
1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
     212:	25 91       	lpm	r18, Z+
     214:	35 91       	lpm	r19, Z+
	ldw	CH,CL, X+			;C = *X++; (I-axis)
     216:	4d 91       	ld	r20, X+
     218:	5d 91       	ld	r21, X+
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
     21a:	b5 03       	fmuls	r19, r21
     21c:	b0 01       	movw	r22, r0
     21e:	2c 03       	fmul	r18, r20
     220:	10 01       	movw	r2, r0
     222:	69 1f       	adc	r22, r25
     224:	bc 03       	fmulsu	r19, r20
     226:	79 0b       	sbc	r23, r25
     228:	30 0c       	add	r3, r0
     22a:	61 1d       	adc	r22, r1
     22c:	79 1f       	adc	r23, r25
     22e:	da 03       	fmulsu	r21, r18
     230:	79 0b       	sbc	r23, r25
     232:	30 0c       	add	r3, r0
     234:	61 1d       	adc	r22, r1
     236:	79 1f       	adc	r23, r25
	stw	Y+, DH,DL			;*Y++ = D;
     238:	69 93       	st	Y+, r22
     23a:	79 93       	st	Y+, r23
#ifdef INPUT_IQ
	ldw	CH,CL, X+			;C = *X++; (Q-axis)
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
#endif
	stw	Y+, DH,DL			;*Y++ = D;
     23c:	69 93       	st	Y+, r22
     23e:	79 93       	st	Y+, r23
	subiw	AH,AL, 1			;while(--A)
     240:	01 50       	subi	r16, 0x01	; 1
     242:	10 40       	sbci	r17, 0x00	; 0
	brne	1b				;/
     244:	31 f7       	brne	.-52     	; 0x212 <fft_input+0x1a>

	popw	YH,YL
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
	popw	AH,AL
     24a:	0f 91       	pop	r16
     24c:	1f 91       	pop	r17
	popw	T2H,T2L
     24e:	2f 90       	pop	r2
     250:	3f 90       	pop	r3
	clr	r1
     252:	11 24       	eor	r1, r1
	ret
     254:	08 95       	ret

00000256 <fft_execute>:

;----------------------------------------------------------------------------;
.global fft_execute
.func fft_execute
fft_execute:
	pushw	T2H,T2L
     256:	3f 92       	push	r3
     258:	2f 92       	push	r2
	pushw	T4H,T4L
     25a:	5f 92       	push	r5
     25c:	4f 92       	push	r4
	pushw	T6H,T6L
     25e:	7f 92       	push	r7
     260:	6f 92       	push	r6
	pushw	T8H,T8L
     262:	9f 92       	push	r9
     264:	8f 92       	push	r8
	pushw	T10H,T10L
     266:	bf 92       	push	r11
     268:	af 92       	push	r10
	pushw	T12H,T12L
     26a:	df 92       	push	r13
     26c:	cf 92       	push	r12
	pushw	T14H,T14L
     26e:	ff 92       	push	r15
     270:	ef 92       	push	r14
	pushw	AH,AL
     272:	1f 93       	push	r17
     274:	0f 93       	push	r16
	pushw	YH,YL
     276:	df 93       	push	r29
     278:	cf 93       	push	r28

	movw	ZL, EL				;Z = array_bfly;
     27a:	fc 01       	movw	r30, r24
	ldiw	EH,EL, 1			;E = 1;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
     280:	a0 e2       	ldi	r26, 0x20	; 32
     282:	b0 e0       	ldi	r27, 0x00	; 0
1:	ldi	AL, 4				;T12 = E; (angular speed)
     284:	04 e0       	ldi	r16, 0x04	; 4
	mul	EL, AL				;
     286:	80 9f       	mul	r24, r16
	movw	T12L, T0L			;
     288:	60 01       	movw	r12, r0
	mul	EH, AL				;
     28a:	90 9f       	mul	r25, r16
	add	T12H, T0L			;/
     28c:	d0 0c       	add	r13, r0
	movw	T14L, EL			;T14 = E;
     28e:	7c 01       	movw	r14, r24
	pushw	EH,EL
     290:	9f 93       	push	r25
     292:	8f 93       	push	r24
	movw	YL, ZL				;Z = &array_bfly[0];
     294:	ef 01       	movw	r28, r30
	mul	XL, AL				;Y = &array_bfly[X];
     296:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
     298:	c0 0d       	add	r28, r0
     29a:	d1 1d       	adc	r29, r1
	mul	XH, AL				;
     29c:	b0 9f       	mul	r27, r16
	add	YH, T0L				;/
     29e:	d0 0d       	add	r29, r0
	pushw	ZH,ZL
     2a0:	ff 93       	push	r31
     2a2:	ef 93       	push	r30
2:	clrw	T10H,T10L			;T10 = 0 (angle)
     2a4:	bb 24       	eor	r11, r11
     2a6:	aa 24       	eor	r10, r10
	clr	EH				;Zero reg.
     2a8:	99 27       	eor	r25, r25
3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
     2aa:	00 81       	ld	r16, Z
     2ac:	11 81       	ldd	r17, Z+1	; 0x01
	asrw	AH,AL				;
     2ae:	15 95       	asr	r17
     2b0:	07 95       	ror	r16
	lddw	DH,DL, Y+0			;
     2b2:	68 81       	ld	r22, Y
     2b4:	79 81       	ldd	r23, Y+1	; 0x01
	asrw	DH,DL				;
     2b6:	75 95       	asr	r23
     2b8:	67 95       	ror	r22
	movw	CL, AL				;
     2ba:	a8 01       	movw	r20, r16
	subw	AH,AL, DH,DL			;
     2bc:	06 1b       	sub	r16, r22
     2be:	17 0b       	sbc	r17, r23
	addw	CH,CL, DH,DL			;
     2c0:	46 0f       	add	r20, r22
     2c2:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
     2c4:	41 93       	st	Z+, r20
     2c6:	51 93       	st	Z+, r21
	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
     2c8:	20 81       	ld	r18, Z
     2ca:	31 81       	ldd	r19, Z+1	; 0x01
	asrw	BH,BL				;
     2cc:	35 95       	asr	r19
     2ce:	27 95       	ror	r18
	lddw	DH,DL, Y+2			;
     2d0:	6a 81       	ldd	r22, Y+2	; 0x02
     2d2:	7b 81       	ldd	r23, Y+3	; 0x03
	asrw	DH,DL				;
     2d4:	75 95       	asr	r23
     2d6:	67 95       	ror	r22
	movw	CL, BL				;
     2d8:	a9 01       	movw	r20, r18
	subw	BH,BL, DH,DL			;
     2da:	26 1b       	sub	r18, r22
     2dc:	37 0b       	sbc	r19, r23
	addw	CH,CL, DH,DL			;
     2de:	46 0f       	add	r20, r22
     2e0:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
     2e2:	41 93       	st	Z+, r20
     2e4:	51 93       	st	Z+, r21
	movw	T0L, ZL
     2e6:	0f 01       	movw	r0, r30
	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
     2e8:	e8 e3       	ldi	r30, 0x38	; 56
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
	addw	ZH,ZL, T10H,T10L		;
     2ec:	ea 0d       	add	r30, r10
     2ee:	fb 1d       	adc	r31, r11
	lpmw	CH,CL, Z+			;
     2f0:	45 91       	lpm	r20, Z+
     2f2:	55 91       	lpm	r21, Z+
	lpmw	DH,DL, Z+			;/
     2f4:	65 91       	lpm	r22, Z+
     2f6:	75 91       	lpm	r23, Z+
	movw	ZL, T0L
     2f8:	f0 01       	movw	r30, r0
	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
     2fa:	95 03       	fmuls	r17, r21
     2fc:	20 01       	movw	r4, r0
     2fe:	0c 03       	fmul	r16, r20
     300:	10 01       	movw	r2, r0
     302:	49 1e       	adc	r4, r25
     304:	9c 03       	fmulsu	r17, r20
     306:	59 0a       	sbc	r5, r25
     308:	30 0c       	add	r3, r0
     30a:	41 1c       	adc	r4, r1
     30c:	59 1e       	adc	r5, r25
     30e:	d8 03       	fmulsu	r21, r16
     310:	59 0a       	sbc	r5, r25
     312:	30 0c       	add	r3, r0
     314:	41 1c       	adc	r4, r1
     316:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
     318:	b7 03       	fmuls	r19, r23
     31a:	40 01       	movw	r8, r0
     31c:	2e 03       	fmul	r18, r22
     31e:	30 01       	movw	r6, r0
     320:	89 1e       	adc	r8, r25
     322:	be 03       	fmulsu	r19, r22
     324:	99 0a       	sbc	r9, r25
     326:	70 0c       	add	r7, r0
     328:	81 1c       	adc	r8, r1
     32a:	99 1e       	adc	r9, r25
     32c:	fa 03       	fmulsu	r23, r18
     32e:	99 0a       	sbc	r9, r25
     330:	70 0c       	add	r7, r0
     332:	81 1c       	adc	r8, r1
     334:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
     336:	26 0c       	add	r2, r6
     338:	37 1c       	adc	r3, r7
     33a:	48 1c       	adc	r4, r8
     33c:	59 1c       	adc	r5, r9
	stw	Y+, T4H,T4L			;/
     33e:	49 92       	st	Y+, r4
     340:	59 92       	st	Y+, r5
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
     342:	b5 03       	fmuls	r19, r21
     344:	20 01       	movw	r4, r0
     346:	2c 03       	fmul	r18, r20
     348:	10 01       	movw	r2, r0
     34a:	49 1e       	adc	r4, r25
     34c:	bc 03       	fmulsu	r19, r20
     34e:	59 0a       	sbc	r5, r25
     350:	30 0c       	add	r3, r0
     352:	41 1c       	adc	r4, r1
     354:	59 1e       	adc	r5, r25
     356:	da 03       	fmulsu	r21, r18
     358:	59 0a       	sbc	r5, r25
     35a:	30 0c       	add	r3, r0
     35c:	41 1c       	adc	r4, r1
     35e:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
     360:	97 03       	fmuls	r17, r23
     362:	40 01       	movw	r8, r0
     364:	0e 03       	fmul	r16, r22
     366:	30 01       	movw	r6, r0
     368:	89 1e       	adc	r8, r25
     36a:	9e 03       	fmulsu	r17, r22
     36c:	99 0a       	sbc	r9, r25
     36e:	70 0c       	add	r7, r0
     370:	81 1c       	adc	r8, r1
     372:	99 1e       	adc	r9, r25
     374:	f8 03       	fmulsu	r23, r16
     376:	99 0a       	sbc	r9, r25
     378:	70 0c       	add	r7, r0
     37a:	81 1c       	adc	r8, r1
     37c:	99 1e       	adc	r9, r25
	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
     37e:	26 18       	sub	r2, r6
     380:	37 08       	sbc	r3, r7
     382:	48 08       	sbc	r4, r8
     384:	59 08       	sbc	r5, r9
	stw	Y+, T4H,T4L			;/
     386:	49 92       	st	Y+, r4
     388:	59 92       	st	Y+, r5
	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
     38a:	ac 0c       	add	r10, r12
     38c:	bd 1c       	adc	r11, r13
#if FFT_N >= 128
	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
#else
	sbrs	T10L, FFT_B + 1
     38e:	a7 fe       	sbrs	r10, 7
#endif
	rjmp	3b				;/
     390:	8c cf       	rjmp	.-232    	; 0x2aa <fft_execute+0x54>
	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
     392:	04 e0       	ldi	r16, 0x04	; 4
	mul	XL, AL
     394:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
     396:	c0 0d       	add	r28, r0
     398:	d1 1d       	adc	r29, r1
	addw	ZH,ZL, T0H,T0L			;
     39a:	e0 0d       	add	r30, r0
     39c:	f1 1d       	adc	r31, r1
	mul	XH, AL				;
     39e:	b0 9f       	mul	r27, r16
	add	YH, T0L				;
     3a0:	d0 0d       	add	r29, r0
	add	ZH, T0L				;/
     3a2:	f0 0d       	add	r31, r0
	ldi	EL, 1				;while(--T14)
     3a4:	81 e0       	ldi	r24, 0x01	; 1
	subw	T14H,T14L, EH,EL		;
     3a6:	e8 1a       	sub	r14, r24
     3a8:	f9 0a       	sbc	r15, r25
	rjne	2b				;/
     3aa:	09 f0       	breq	.+2      	; 0x3ae <fft_execute+0x158>
     3ac:	7b cf       	rjmp	.-266    	; 0x2a4 <fft_execute+0x4e>
	popw	ZH,ZL
     3ae:	ef 91       	pop	r30
     3b0:	ff 91       	pop	r31
	popw	EH,EL
     3b2:	8f 91       	pop	r24
     3b4:	9f 91       	pop	r25
	lslw	EH,EL				;E *= 2;
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
	lsrw	XH,XL				;while(X /= 2)
     3ba:	b6 95       	lsr	r27
     3bc:	a7 95       	ror	r26
	adiw	XL, 0				;
     3be:	10 96       	adiw	r26, 0x00	; 0
	rjne	1b				;/
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <fft_execute+0x16e>
     3c2:	60 cf       	rjmp	.-320    	; 0x284 <fft_execute+0x2e>

	popw	YH,YL
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
	popw	AH,AL
     3c8:	0f 91       	pop	r16
     3ca:	1f 91       	pop	r17
	popw	T14H,T14L
     3cc:	ef 90       	pop	r14
     3ce:	ff 90       	pop	r15
	popw	T12H,T12L
     3d0:	cf 90       	pop	r12
     3d2:	df 90       	pop	r13
	popw	T10H,T10L
     3d4:	af 90       	pop	r10
     3d6:	bf 90       	pop	r11
	popw	T8H,T8L
     3d8:	8f 90       	pop	r8
     3da:	9f 90       	pop	r9
	popw	T6H,T6L
     3dc:	6f 90       	pop	r6
     3de:	7f 90       	pop	r7
	popw	T4H,T4L
     3e0:	4f 90       	pop	r4
     3e2:	5f 90       	pop	r5
	popw	T2H,T2L
     3e4:	2f 90       	pop	r2
     3e6:	3f 90       	pop	r3
;	clr	r1
	ret
     3e8:	08 95       	ret

000003ea <fft_output>:

;----------------------------------------------------------------------------;
.global fft_output
.func fft_output
fft_output:
	pushw	T2H,T2L
     3ea:	3f 92       	push	r3
     3ec:	2f 92       	push	r2
	pushw	T4H,T4L
     3ee:	5f 92       	push	r5
     3f0:	4f 92       	push	r4
	pushw	T6H,T6L
     3f2:	7f 92       	push	r7
     3f4:	6f 92       	push	r6
	pushw	T8H,T8L
     3f6:	9f 92       	push	r9
     3f8:	8f 92       	push	r8
	pushw	T10H,T10L
     3fa:	bf 92       	push	r11
     3fc:	af 92       	push	r10
	pushw	AH,AL
     3fe:	1f 93       	push	r17
     400:	0f 93       	push	r16
	pushw	YH,YL
     402:	df 93       	push	r29
     404:	cf 93       	push	r28

	movw	T10L, EL			;T10 = array_bfly;
     406:	5c 01       	movw	r10, r24
	movw	YL, DL				;Y = array_output;
     408:	eb 01       	movw	r28, r22
	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
     40a:	e8 eb       	ldi	r30, 0xB8	; 184
     40c:	f1 e0       	ldi	r31, 0x01	; 1
	clr	EH				;Zero
     40e:	99 27       	eor	r25, r25
#ifdef INPUT_IQ
	ldiw	AH,AL, FFT_N			;A = FFT_N; (plus/minus)
#else
	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (plus only)
     410:	00 e2       	ldi	r16, 0x20	; 32
     412:	10 e0       	ldi	r17, 0x00	; 0
#endif
1:	lpmw	XH,XL, Z+			;X = *Z++;
     414:	a5 91       	lpm	r26, Z+
     416:	b5 91       	lpm	r27, Z+
	addw	XH,XL, T10H,T10L		;X += array_bfly;
     418:	aa 0d       	add	r26, r10
     41a:	bb 1d       	adc	r27, r11
	ldw	BH,BL, X+			;B = *X++;
     41c:	2d 91       	ld	r18, X+
     41e:	3d 91       	ld	r19, X+
	ldw	CH,CL, X+			;C = *X++;
     420:	4d 91       	ld	r20, X+
     422:	5d 91       	ld	r21, X+
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
     424:	b3 03       	fmuls	r19, r19
     426:	20 01       	movw	r4, r0
     428:	2a 03       	fmul	r18, r18
     42a:	10 01       	movw	r2, r0
     42c:	49 1e       	adc	r4, r25
     42e:	ba 03       	fmulsu	r19, r18
     430:	59 0a       	sbc	r5, r25
     432:	30 0c       	add	r3, r0
     434:	41 1c       	adc	r4, r1
     436:	59 1e       	adc	r5, r25
     438:	ba 03       	fmulsu	r19, r18
     43a:	59 0a       	sbc	r5, r25
     43c:	30 0c       	add	r3, r0
     43e:	41 1c       	adc	r4, r1
     440:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
     442:	d5 03       	fmuls	r21, r21
     444:	40 01       	movw	r8, r0
     446:	4c 03       	fmul	r20, r20
     448:	30 01       	movw	r6, r0
     44a:	89 1e       	adc	r8, r25
     44c:	dc 03       	fmulsu	r21, r20
     44e:	99 0a       	sbc	r9, r25
     450:	70 0c       	add	r7, r0
     452:	81 1c       	adc	r8, r1
     454:	99 1e       	adc	r9, r25
     456:	dc 03       	fmulsu	r21, r20
     458:	99 0a       	sbc	r9, r25
     45a:	70 0c       	add	r7, r0
     45c:	81 1c       	adc	r8, r1
     45e:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
     460:	26 0c       	add	r2, r6
     462:	37 1c       	adc	r3, r7
     464:	48 1c       	adc	r4, r8
     466:	59 1c       	adc	r5, r9
	SQRT32					;B = sqrt(T4:T2);
     468:	66 24       	eor	r6, r6
     46a:	77 24       	eor	r7, r7
     46c:	88 24       	eor	r8, r8
     46e:	99 24       	eor	r9, r9
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	44 27       	eor	r20, r20
     476:	55 27       	eor	r21, r21
     478:	70 e1       	ldi	r23, 0x10	; 16
     47a:	22 0c       	add	r2, r2
     47c:	33 1c       	adc	r3, r3
     47e:	44 1c       	adc	r4, r4
     480:	55 1c       	adc	r5, r5
     482:	66 1c       	adc	r6, r6
     484:	77 1c       	adc	r7, r7
     486:	88 1c       	adc	r8, r8
     488:	99 1c       	adc	r9, r9
     48a:	22 0c       	add	r2, r2
     48c:	33 1c       	adc	r3, r3
     48e:	44 1c       	adc	r4, r4
     490:	55 1c       	adc	r5, r5
     492:	66 1c       	adc	r6, r6
     494:	77 1c       	adc	r7, r7
     496:	88 1c       	adc	r8, r8
     498:	99 1c       	adc	r9, r9
     49a:	2a f4       	brpl	.+10     	; 0x4a6 <__stack+0x47>
     49c:	62 0e       	add	r6, r18
     49e:	73 1e       	adc	r7, r19
     4a0:	84 1e       	adc	r8, r20
     4a2:	95 1e       	adc	r9, r21
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__stack+0x4f>
     4a6:	62 1a       	sub	r6, r18
     4a8:	73 0a       	sbc	r7, r19
     4aa:	84 0a       	sbc	r8, r20
     4ac:	95 0a       	sbc	r9, r21
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	44 1f       	adc	r20, r20
     4b4:	28 7f       	andi	r18, 0xF8	; 248
     4b6:	25 60       	ori	r18, 0x05	; 5
     4b8:	97 fc       	sbrc	r9, 7
     4ba:	22 50       	subi	r18, 0x02	; 2
     4bc:	7a 95       	dec	r23
     4be:	e9 f6       	brne	.-70     	; 0x47a <__stack+0x1b>
     4c0:	46 95       	lsr	r20
     4c2:	37 95       	ror	r19
     4c4:	27 95       	ror	r18
     4c6:	46 95       	lsr	r20
     4c8:	37 95       	ror	r19
     4ca:	27 95       	ror	r18
	stw	Y+, BH,BL			;*Y++ = B;
     4cc:	29 93       	st	Y+, r18
     4ce:	39 93       	st	Y+, r19
	subiw	AH,AL, 1			;while(--A)
     4d0:	01 50       	subi	r16, 0x01	; 1
     4d2:	10 40       	sbci	r17, 0x00	; 0
	rjne	1b				;/
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <__stack+0x79>
     4d6:	9e cf       	rjmp	.-196    	; 0x414 <fft_output+0x2a>

	popw	YH,YL
     4d8:	cf 91       	pop	r28
     4da:	df 91       	pop	r29
	popw	AH,AL
     4dc:	0f 91       	pop	r16
     4de:	1f 91       	pop	r17
	popw	T10H,T10L
     4e0:	af 90       	pop	r10
     4e2:	bf 90       	pop	r11
	popw	T8H,T8L
     4e4:	8f 90       	pop	r8
     4e6:	9f 90       	pop	r9
	popw	T6H,T6L
     4e8:	6f 90       	pop	r6
     4ea:	7f 90       	pop	r7
	popw	T4H,T4L
     4ec:	4f 90       	pop	r4
     4ee:	5f 90       	pop	r5
	popw	T2H,T2L
     4f0:	2f 90       	pop	r2
     4f2:	3f 90       	pop	r3
	clr	r1
     4f4:	11 24       	eor	r1, r1
	ret
     4f6:	08 95       	ret

000004f8 <fmuls_f>:

;----------------------------------------------------------------------------;
.global fmuls_f
.func fmuls_f
fmuls_f:
	movw	CL, EL				;C = E;
     4f8:	ac 01       	movw	r20, r24
	clr	EH	;Zero
     4fa:	99 27       	eor	r25, r25
	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
     4fc:	d7 03       	fmuls	r21, r23
     4fe:	f0 01       	movw	r30, r0
     500:	4e 03       	fmul	r20, r22
     502:	d0 01       	movw	r26, r0
     504:	e9 1f       	adc	r30, r25
     506:	de 03       	fmulsu	r21, r22
     508:	f9 0b       	sbc	r31, r25
     50a:	b0 0d       	add	r27, r0
     50c:	e1 1d       	adc	r30, r1
     50e:	f9 1f       	adc	r31, r25
     510:	fc 03       	fmulsu	r23, r20
     512:	f9 0b       	sbc	r31, r25
     514:	b0 0d       	add	r27, r0
     516:	e1 1d       	adc	r30, r1
     518:	f9 1f       	adc	r31, r25
	movw	EL, ZL
     51a:	cf 01       	movw	r24, r30
	clr	r1
     51c:	11 24       	eor	r1, r1
	ret
     51e:	08 95       	ret

00000520 <lc75710_write>:
 *   This note is left for a future bare-metal implementation.
 * 
 * @param data the 24-bit data to be sent over the serial line
 */
void lc75710_write(uint32_t data)
{
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17

    uint8_t i = 0;

    /* Address goes out first... */
    LC75710_CE_LOW;
     524:	92 98       	cbi	0x12, 2	; 18
     526:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	24 e0       	ldi	r18, 0x04	; 4
     52a:	2a 95       	dec	r18
     52c:	f1 f7       	brne	.-4      	; 0x52a <lc75710_write+0xa>
     52e:	27 e0       	ldi	r18, 0x07	; 7
     530:	30 e0       	ldi	r19, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 8; i++)
    {
        if (ADDRESS >> (7 - i) & 0x1)
     532:	46 ee       	ldi	r20, 0xE6	; 230
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	fa 01       	movw	r30, r20
     538:	02 2e       	mov	r0, r18
     53a:	02 c0       	rjmp	.+4      	; 0x540 <lc75710_write+0x20>
     53c:	f5 95       	asr	r31
     53e:	e7 95       	ror	r30
     540:	0a 94       	dec	r0
     542:	e2 f7       	brpl	.-8      	; 0x53c <lc75710_write+0x1c>
     544:	e0 ff       	sbrs	r30, 0
     546:	02 c0       	rjmp	.+4      	; 0x54c <lc75710_write+0x2c>
        {
            LC75710_DI_HIGH;
     548:	93 9a       	sbi	0x12, 3	; 18
     54a:	01 c0       	rjmp	.+2      	; 0x54e <lc75710_write+0x2e>
        }
        else
        {
            LC75710_DI_LOW;
     54c:	93 98       	cbi	0x12, 3	; 18
     54e:	00 00       	nop
     550:	e4 e0       	ldi	r30, 0x04	; 4
     552:	ea 95       	dec	r30
     554:	f1 f7       	brne	.-4      	; 0x552 <lc75710_write+0x32>
        }

        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     556:	94 9a       	sbi	0x12, 4	; 18
     558:	00 00       	nop
     55a:	e4 e0       	ldi	r30, 0x04	; 4
     55c:	ea 95       	dec	r30
     55e:	f1 f7       	brne	.-4      	; 0x55c <lc75710_write+0x3c>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     560:	94 98       	cbi	0x12, 4	; 18
     562:	00 00       	nop
     564:	e4 e0       	ldi	r30, 0x04	; 4
     566:	ea 95       	dec	r30
     568:	f1 f7       	brne	.-4      	; 0x566 <lc75710_write+0x46>
     56a:	21 50       	subi	r18, 0x01	; 1
     56c:	31 09       	sbc	r19, r1
     56e:	18 f7       	brcc	.-58     	; 0x536 <lc75710_write+0x16>
        _delay_us(1);
    }

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
     570:	92 9a       	sbi	0x12, 2	; 18
     572:	00 00       	nop
     574:	24 e0       	ldi	r18, 0x04	; 4
     576:	2a 95       	dec	r18
     578:	f1 f7       	brne	.-4      	; 0x576 <lc75710_write+0x56>
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 24; i++)
    {
        if (data >> i & 0x1)
     57e:	8b 01       	movw	r16, r22
     580:	9c 01       	movw	r18, r24
     582:	04 2e       	mov	r0, r20
     584:	04 c0       	rjmp	.+8      	; 0x58e <lc75710_write+0x6e>
     586:	36 95       	lsr	r19
     588:	27 95       	ror	r18
     58a:	17 95       	ror	r17
     58c:	07 95       	ror	r16
     58e:	0a 94       	dec	r0
     590:	d2 f7       	brpl	.-12     	; 0x586 <lc75710_write+0x66>
     592:	00 ff       	sbrs	r16, 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <lc75710_write+0x7a>
        {
            LC75710_DI_HIGH;
     596:	93 9a       	sbi	0x12, 3	; 18
     598:	01 c0       	rjmp	.+2      	; 0x59c <lc75710_write+0x7c>
        }
        else
        {
            LC75710_DI_LOW;
     59a:	93 98       	cbi	0x12, 3	; 18
     59c:	00 00       	nop
     59e:	e4 e0       	ldi	r30, 0x04	; 4
     5a0:	ea 95       	dec	r30
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <lc75710_write+0x80>
        }
        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     5a4:	94 9a       	sbi	0x12, 4	; 18
     5a6:	00 00       	nop
     5a8:	24 e0       	ldi	r18, 0x04	; 4
     5aa:	2a 95       	dec	r18
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <lc75710_write+0x8a>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     5ae:	94 98       	cbi	0x12, 4	; 18
     5b0:	00 00       	nop
     5b2:	e4 e0       	ldi	r30, 0x04	; 4
     5b4:	ea 95       	dec	r30
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lc75710_write+0x94>
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
    _delay_us(1);

    for (i = 0; i < 24; i++)
     5bc:	48 31       	cpi	r20, 0x18	; 24
     5be:	51 05       	cpc	r21, r1
     5c0:	f1 f6       	brne	.-68     	; 0x57e <lc75710_write+0x5e>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
        _delay_us(1);
    }

    LC75710_CE_LOW;  /* LOW */
     5c2:	92 98       	cbi	0x12, 2	; 18
     5c4:	00 00       	nop
     5c6:	24 e0       	ldi	r18, 0x04	; 4
     5c8:	2a 95       	dec	r18
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <lc75710_write+0xa8>
     5cc:	84 e6       	ldi	r24, 0x64	; 100
     5ce:	8a 95       	dec	r24
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <lc75710_write+0xae>
    _delay_us(1);

    /* wait long enough for the command to complete (at least 18us for most commands) */
    _delay_us(25);

}
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <lc75710_write_56bits>:
 *   This note is left for a future bare-metal implementation.
 * 
 * @param data the 56-bit data to be sent over the serial line
 */
void lc75710_write_56bits(uint64_t data)
{
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	12 2f       	mov	r17, r18
     5f0:	f3 2e       	mov	r15, r19
     5f2:	e4 2e       	mov	r14, r20
     5f4:	d5 2e       	mov	r13, r21
     5f6:	c6 2e       	mov	r12, r22
     5f8:	b7 2e       	mov	r11, r23
     5fa:	a8 2e       	mov	r10, r24
     5fc:	99 2e       	mov	r9, r25

    uint8_t i = 0;

    /* Address goes out first... */
    LC75710_CE_LOW;  /* LOW */
     5fe:	92 98       	cbi	0x12, 2	; 18
     600:	00 00       	nop
     602:	84 e0       	ldi	r24, 0x04	; 4
     604:	8a 95       	dec	r24
     606:	f1 f7       	brne	.-4      	; 0x604 <lc75710_write_56bits+0x2c>
     608:	e7 e0       	ldi	r30, 0x07	; 7
     60a:	f0 e0       	ldi	r31, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 8; i++)
    {
        if (ADDRESS >> (7 - i) & 0x1)
     60c:	a6 ee       	ldi	r26, 0xE6	; 230
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ed 01       	movw	r28, r26
     612:	0e 2e       	mov	r0, r30
     614:	02 c0       	rjmp	.+4      	; 0x61a <lc75710_write_56bits+0x42>
     616:	d5 95       	asr	r29
     618:	c7 95       	ror	r28
     61a:	0a 94       	dec	r0
     61c:	e2 f7       	brpl	.-8      	; 0x616 <lc75710_write_56bits+0x3e>
     61e:	c0 ff       	sbrs	r28, 0
     620:	02 c0       	rjmp	.+4      	; 0x626 <lc75710_write_56bits+0x4e>
        {
            LC75710_DI_HIGH;
     622:	93 9a       	sbi	0x12, 3	; 18
     624:	01 c0       	rjmp	.+2      	; 0x628 <lc75710_write_56bits+0x50>
        }
        else
        {
            LC75710_DI_LOW;
     626:	93 98       	cbi	0x12, 3	; 18
     628:	00 00       	nop
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	8a 95       	dec	r24
     62e:	f1 f7       	brne	.-4      	; 0x62c <lc75710_write_56bits+0x54>
        }
        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     630:	94 9a       	sbi	0x12, 4	; 18
     632:	00 00       	nop
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	8a 95       	dec	r24
     638:	f1 f7       	brne	.-4      	; 0x636 <lc75710_write_56bits+0x5e>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     63a:	94 98       	cbi	0x12, 4	; 18
     63c:	00 00       	nop
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	8a 95       	dec	r24
     642:	f1 f7       	brne	.-4      	; 0x640 <lc75710_write_56bits+0x68>
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	20 f7       	brcc	.-56     	; 0x610 <lc75710_write_56bits+0x38>
        _delay_us(1);
    }

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
     648:	92 9a       	sbi	0x12, 2	; 18
     64a:	00 00       	nop
     64c:	84 e0       	ldi	r24, 0x04	; 4
     64e:	8a 95       	dec	r24
     650:	f1 f7       	brne	.-4      	; 0x64e <lc75710_write_56bits+0x76>
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f0 e0       	ldi	r31, 0x00	; 0
    _delay_us(1);

    for (i = 0; i < 56; i++)
    {
        if (data >> i & 0x1)
     656:	21 2f       	mov	r18, r17
     658:	3f 2d       	mov	r19, r15
     65a:	4e 2d       	mov	r20, r14
     65c:	5d 2d       	mov	r21, r13
     65e:	6c 2d       	mov	r22, r12
     660:	7b 2d       	mov	r23, r11
     662:	8a 2d       	mov	r24, r10
     664:	99 2d       	mov	r25, r9
     666:	0e 2f       	mov	r16, r30
     668:	04 d5       	rcall	.+2568   	; 0x1072 <__lshrdi3>
     66a:	21 70       	andi	r18, 0x01	; 1
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	a0 e0       	ldi	r26, 0x00	; 0
     67c:	16 d5       	rcall	.+2604   	; 0x10aa <__cmpdi2_s8>
     67e:	11 f0       	breq	.+4      	; 0x684 <lc75710_write_56bits+0xac>
        {
            LC75710_DI_HIGH;
     680:	93 9a       	sbi	0x12, 3	; 18
     682:	01 c0       	rjmp	.+2      	; 0x686 <lc75710_write_56bits+0xae>
        }
        else
        {
            LC75710_DI_LOW;
     684:	93 98       	cbi	0x12, 3	; 18
     686:	00 00       	nop
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	8a 95       	dec	r24
     68c:	f1 f7       	brne	.-4      	; 0x68a <lc75710_write_56bits+0xb2>
        }
        _delay_us(1);
        LC75710_CL_HIGH;  /* HIGH */
     68e:	94 9a       	sbi	0x12, 4	; 18
     690:	00 00       	nop
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	8a 95       	dec	r24
     696:	f1 f7       	brne	.-4      	; 0x694 <lc75710_write_56bits+0xbc>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
     698:	94 98       	cbi	0x12, 4	; 18
     69a:	00 00       	nop
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	8a 95       	dec	r24
     6a0:	f1 f7       	brne	.-4      	; 0x69e <lc75710_write_56bits+0xc6>
     6a2:	31 96       	adiw	r30, 0x01	; 1

    /* Then data follows after, CE goes high */
    LC75710_CE_HIGH;  /* HIGH */
    _delay_us(1);

    for (i = 0; i < 56; i++)
     6a4:	e8 33       	cpi	r30, 0x38	; 56
     6a6:	f1 05       	cpc	r31, r1
     6a8:	b1 f6       	brne	.-84     	; 0x656 <lc75710_write_56bits+0x7e>
        _delay_us(1);
        LC75710_CL_LOW;  /* LOW */
        _delay_us(1);
    }

    LC75710_CE_LOW;  /* LOW */
     6aa:	92 98       	cbi	0x12, 2	; 18
     6ac:	00 00       	nop
     6ae:	84 e0       	ldi	r24, 0x04	; 4
     6b0:	8a 95       	dec	r24
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <lc75710_write_56bits+0xd8>
     6b4:	84 e6       	ldi	r24, 0x64	; 100
     6b6:	8a 95       	dec	r24
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <lc75710_write_56bits+0xde>
    _delay_us(1);

    /* wait long enough for the command to complete (at least 18us for most commands) */
    _delay_us(25);

}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	08 95       	ret

000006d2 <lc75710_set_ac_address>:
 * 
 * @param dcram 6-bit DCRAM address
 * @param adram 4-bit ADRAM address
 */
void lc75710_set_ac_address(uint8_t dcram, uint8_t adram)
{
     6d2:	26 2f       	mov	r18, r22

    /* ADRAM address */
    temp |= (uint32_t)(adram & 0xF) << 16;

    /* DCRAM address */
    temp |= (uint32_t)(dcram & 0x3F) << 8;
     6d4:	8f 73       	andi	r24, 0x3F	; 63
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	66 27       	eor	r22, r22
     6de:	78 2f       	mov	r23, r24
     6e0:	89 2f       	mov	r24, r25
     6e2:	9a 2f       	mov	r25, r26

    /* Instruction */
    temp  = (uint32_t)0x4 << 20;

    /* ADRAM address */
    temp |= (uint32_t)(adram & 0xF) << 16;
     6e4:	80 64       	ori	r24, 0x40	; 64
     6e6:	2f 70       	andi	r18, 0x0F	; 15

    /* DCRAM address */
    temp |= (uint32_t)(dcram & 0x3F) << 8;
     6e8:	82 2b       	or	r24, r18

    /* Write to IC */
    lc75710_write(temp);
     6ea:	1a cf       	rjmp	.-460    	; 0x520 <lc75710_write>

000006ec <lc75710_intensity>:

    /* Instruction */
    temp  = (uint32_t)0x5 << 20;

    /* ADRAM address */
    temp |= (uint32_t)(intensity & 0xFF) << 8;
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	a0 e0       	ldi	r26, 0x00	; 0
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	66 27       	eor	r22, r22
     6f4:	78 2f       	mov	r23, r24
     6f6:	89 2f       	mov	r24, r25
     6f8:	9a 2f       	mov	r25, r26
     6fa:	80 65       	ori	r24, 0x50	; 80

    /* Write to IC */
    lc75710_write(temp);
     6fc:	11 cf       	rjmp	.-478    	; 0x520 <lc75710_write>

000006fe <lc75710_dcram_write>:

    /* DCRAM address */
    temp |= (uint32_t)(addr & 0x3F) << 8;

    /* ADRAM address */
    temp |= (uint32_t)(data & 0xFF) << 0;
     6fe:	46 2f       	mov	r20, r22
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0

    /* Instruction */
    temp  = (uint32_t)0x6 << 20;

    /* DCRAM address */
    temp |= (uint32_t)(addr & 0x3F) << 8;
     706:	60 66       	ori	r22, 0x60	; 96
     708:	8f 73       	andi	r24, 0x3F	; 63

    /* ADRAM address */
    temp |= (uint32_t)(data & 0xFF) << 0;
     70a:	58 2b       	or	r21, r24

    /* Write to IC */
    lc75710_write(temp);
     70c:	cb 01       	movw	r24, r22
     70e:	ba 01       	movw	r22, r20
     710:	07 cf       	rjmp	.-498    	; 0x520 <lc75710_write>

00000712 <lc75710_cgram_write>:
 * 
 * @param addr 8-bit CGRAM address
 * @param data the 35-bit data (arbitrary dots, forming a 7x5 character)
 */
void lc75710_cgram_write(uint8_t addr, uint64_t data)
{
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	e0 2f       	mov	r30, r16
     71e:	d2 2f       	mov	r29, r18
     720:	c3 2f       	mov	r28, r19
     722:	b4 2f       	mov	r27, r20
     724:	a5 2f       	mov	r26, r21
     726:	f6 2f       	mov	r31, r22
     728:	f7 2e       	mov	r15, r23

    /* Instruction */
    temp  = (uint64_t)0x8 << 52;

    /* CGRAM address */
    temp |= (uint64_t)(addr & 0xFF) << 40;
     72a:	f0 68       	ori	r31, 0x80	; 128
     72c:	28 2f       	mov	r18, r24
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	08 e2       	ldi	r16, 0x28	; 40
     73e:	7e d4       	rcall	.+2300   	; 0x103c <__ashldi3>

    /* ADRAM address */
    temp |= data;
     740:	e2 2b       	or	r30, r18
     742:	13 2b       	or	r17, r19
     744:	d4 2b       	or	r29, r20
     746:	c5 2b       	or	r28, r21
     748:	b6 2b       	or	r27, r22
     74a:	a7 2b       	or	r26, r23

    /* Write to IC */
    lc75710_write_56bits(temp);
     74c:	2e 2f       	mov	r18, r30
     74e:	31 2f       	mov	r19, r17
     750:	4d 2f       	mov	r20, r29
     752:	5c 2f       	mov	r21, r28
     754:	6b 2f       	mov	r22, r27
     756:	7a 2f       	mov	r23, r26
     758:	8f 2b       	or	r24, r31
     75a:	9f 29       	or	r25, r15

}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15

    /* ADRAM address */
    temp |= data;

    /* Write to IC */
    lc75710_write_56bits(temp);
     766:	38 cf       	rjmp	.-400    	; 0x5d8 <lc75710_write_56bits>

00000768 <lc75710_init>:
/**
 * @brief
 *   Hardware pin initialization and chip reset state initialization
 */
void lc75710_init()
{
     768:	cf 93       	push	r28

    uint8_t i = 0;

    /* Pin configuration */
    LC75710_DDR |= 1 << LC75710_CL;  /* OUTPUT */
     76a:	8c 9a       	sbi	0x11, 4	; 17
    LC75710_DDR |= 1 << LC75710_DI;  /* OUTPUT */
     76c:	8b 9a       	sbi	0x11, 3	; 17
    LC75710_DDR |= 1 << LC75710_CE;  /* OUTPUT */
     76e:	8a 9a       	sbi	0x11, 2	; 17

    /* Initial output states */
    LC75710_CL_LOW;
     770:	94 98       	cbi	0x12, 4	; 18
     772:	00 00       	nop
    LC75710_DI_LOW;
     774:	93 98       	cbi	0x12, 3	; 18
     776:	00 00       	nop
    LC75710_CE_LOW;
     778:	92 98       	cbi	0x12, 2	; 18
     77a:	00 00       	nop

    /*  Blinking digit specification */
    temp |= digits;

    /* Write to IC */
    lc75710_write(temp);
     77c:	6f ef       	ldi	r22, 0xFF	; 255
     77e:	7f ef       	ldi	r23, 0xFF	; 255
     780:	88 eb       	ldi	r24, 0xB8	; 184
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	cd de       	rcall	.-614    	; 0x520 <lc75710_write>
     */

    /* Reset Function, as described in the datasheet */
    lc75710_blink(MDATA_AND_ADATA, 0, 0xFFFF);

    for (i = 0; i < 64; i++)
     786:	c0 e0       	ldi	r28, 0x00	; 0
    {
        /* Initialize DCRAM with spaces */
        lc75710_dcram_write(i, 0x20);
     788:	60 e2       	ldi	r22, 0x20	; 32
     78a:	8c 2f       	mov	r24, r28
     78c:	b8 df       	rcall	.-144    	; 0x6fe <lc75710_dcram_write>
     */

    /* Reset Function, as described in the datasheet */
    lc75710_blink(MDATA_AND_ADATA, 0, 0xFFFF);

    for (i = 0; i < 64; i++)
     78e:	cf 5f       	subi	r28, 0xFF	; 255
     790:	c0 34       	cpi	r28, 0x40	; 64
     792:	d1 f7       	brne	.-12     	; 0x788 <lc75710_init+0x20>

    /* DCRAM address */
    temp |= (uint32_t)(dcram & 0x3F) << 8;

    /* Write to IC */
    lc75710_write(temp);
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	c1 de       	rcall	.-638    	; 0x520 <lc75710_write>

    /* Specifies the amount of grids (i.e. digits) */
    temp |= (uint32_t)(grids & 0xF) << 16;

    /* Write to IC */
    lc75710_write(temp);
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	8a e3       	ldi	r24, 0x3A	; 58
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	bc de       	rcall	.-648    	; 0x520 <lc75710_write>

    /* ADRAM address */
    temp |= (uint32_t)(intensity & 0xFF) << 8;

    /* Write to IC */
    lc75710_write(temp);
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e8       	ldi	r23, 0x80	; 128
     7ac:	80 e5       	ldi	r24, 0x50	; 80
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	b7 de       	rcall	.-658    	; 0x520 <lc75710_write>
    
    /* Grid selection */
    temp |= grids;
    
    /* Write to IC */
    lc75710_write(temp);
     7b2:	6f ef       	ldi	r22, 0xFF	; 255
     7b4:	7f ef       	ldi	r23, 0xFF	; 255
     7b6:	87 e1       	ldi	r24, 0x17	; 23
     7b8:	90 e0       	ldi	r25, 0x00	; 0
    lc75710_intensity(128);

    /* Turn the display ON */
    lc75710_on_off(MDATA_AND_ADATA, true, 0xFFFF);

}
     7ba:	cf 91       	pop	r28
    
    /* Grid selection */
    temp |= grids;
    
    /* Write to IC */
    lc75710_write(temp);
     7bc:	b1 ce       	rjmp	.-670    	; 0x520 <lc75710_write>

000007be <display_string_len>:
 *
 * @param string    string to display
 * @param len       length of the string
 */
void display_string_len(char* string, uint8_t len)
{
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	16 2f       	mov	r17, r22
     7ca:	08 2f       	mov	r16, r24
     7cc:	ec 01       	movw	r28, r24
     7ce:	f8 2e       	mov	r15, r24
     7d0:	f6 0e       	add	r15, r22

    uint8_t addr = 0;

    do
    {
        lc75710_dcram_write(len - 1 - addr++, *string);
     7d2:	69 91       	ld	r22, Y+
     7d4:	8f 2d       	mov	r24, r15
     7d6:	8c 1b       	sub	r24, r28
     7d8:	92 df       	rcall	.-220    	; 0x6fe <lc75710_dcram_write>
     7da:	8c 2f       	mov	r24, r28
     7dc:	80 1b       	sub	r24, r16
        string++;
    }
    while (addr < len);
     7de:	81 17       	cp	r24, r17
     7e0:	c0 f3       	brcs	.-16     	; 0x7d2 <display_string_len+0x14>

}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	08 95       	ret

000007ee <display_string>:
 * @brief Display a string
 *
 * @param string zero-terminated string to display
 */
void display_string(char* string)
{
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	8c 01       	movw	r16, r24
    uint8_t len = 0;

    len = strlen(string);
     7f8:	ec 01       	movw	r28, r24
     7fa:	09 90       	ld	r0, Y+
     7fc:	00 20       	and	r0, r0
     7fe:	e9 f7       	brne	.-6      	; 0x7fa <display_string+0xc>
     800:	21 97       	sbiw	r28, 0x01	; 1
     802:	c8 1b       	sub	r28, r24
     804:	d9 0b       	sbc	r29, r25

    lc75710_set_ac_address(0, 0);
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	63 df       	rcall	.-314    	; 0x6d2 <lc75710_set_ac_address>

    display_string_len(string, len);
     80c:	6c 2f       	mov	r22, r28
     80e:	c8 01       	movw	r24, r16
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16

    len = strlen(string);

    lc75710_set_ac_address(0, 0);

    display_string_len(string, len);
     818:	d2 cf       	rjmp	.-92     	; 0x7be <display_string_len>

0000081a <display_string_center>:
 * @brief Display a string, center justified
 *
 * @param string zero-terminated string to display
 */
void display_string_center(char* string)
{
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	8c 01       	movw	r16, r24

    uint8_t len = 0;

    len = strlen(string);
     824:	ec 01       	movw	r28, r24
     826:	09 90       	ld	r0, Y+
     828:	00 20       	and	r0, r0
     82a:	e9 f7       	brne	.-6      	; 0x826 <display_string_center+0xc>
     82c:	21 97       	sbiw	r28, 0x01	; 1
     82e:	c8 1b       	sub	r28, r24
     830:	d9 0b       	sbc	r29, r25

    lc75710_set_ac_address(LC75710_DRAM_SIZE - ((LC75710_DIGITS - len) / 2), 0);
     832:	2a e0       	ldi	r18, 0x0A	; 10
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	2c 1b       	sub	r18, r28
     838:	31 09       	sbc	r19, r1
     83a:	37 ff       	sbrs	r19, 7
     83c:	02 c0       	rjmp	.+4      	; 0x842 <display_string_center+0x28>
     83e:	2f 5f       	subi	r18, 0xFF	; 255
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	c9 01       	movw	r24, r18
     844:	95 95       	asr	r25
     846:	87 95       	ror	r24
     848:	91 95       	neg	r25
     84a:	81 95       	neg	r24
     84c:	91 09       	sbc	r25, r1
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	80 5c       	subi	r24, 0xC0	; 192
     852:	3f df       	rcall	.-386    	; 0x6d2 <lc75710_set_ac_address>

    display_string_len(string, len);
     854:	6c 2f       	mov	r22, r28
     856:	c8 01       	movw	r24, r16

}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16

    len = strlen(string);

    lc75710_set_ac_address(LC75710_DRAM_SIZE - ((LC75710_DIGITS - len) / 2), 0);

    display_string_len(string, len);
     860:	ae cf       	rjmp	.-164    	; 0x7be <display_string_len>

00000862 <display_clear>:
 *
 * @brief Clear display
 *
 */
void display_clear(void)
{
     862:	cf 93       	push	r28

    uint8_t i = 0;

    lc75710_set_ac_address(0, 0);
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	34 df       	rcall	.-408    	; 0x6d2 <lc75710_set_ac_address>

    for (i = 0; i < LC75710_DIGITS; i++)
     86a:	c0 e0       	ldi	r28, 0x00	; 0
    {
        /* Fill with spaces */
        lc75710_dcram_write(i, 0x20);
     86c:	60 e2       	ldi	r22, 0x20	; 32
     86e:	8c 2f       	mov	r24, r28
     870:	46 df       	rcall	.-372    	; 0x6fe <lc75710_dcram_write>

    uint8_t i = 0;

    lc75710_set_ac_address(0, 0);

    for (i = 0; i < LC75710_DIGITS; i++)
     872:	cf 5f       	subi	r28, 0xFF	; 255
     874:	ca 30       	cpi	r28, 0x0A	; 10
     876:	d1 f7       	brne	.-12     	; 0x86c <display_clear+0xa>
    {
        /* Fill with spaces */
        lc75710_dcram_write(i, 0x20);
    }

}
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <display_load_bars_vert>:
 *
 * @brief Load vertical bars in the CGRAM of the chip
 *
 */
void display_load_bars_vert(void)
{
     87c:	7f 92       	push	r7
     87e:	8f 92       	push	r8
     880:	9f 92       	push	r9
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ce e1       	ldi	r28, 0x1E	; 30
     898:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i = 0;
    uint64_t c = 0;
     89a:	71 2c       	mov	r7, r1
     89c:	81 2c       	mov	r8, r1
     89e:	91 2c       	mov	r9, r1
     8a0:	a1 2c       	mov	r10, r1
     8a2:	b1 2c       	mov	r11, r1
     8a4:	c1 2c       	mov	r12, r1
     8a6:	d1 2c       	mov	r13, r1
     8a8:	e1 2c       	mov	r14, r1

    for (i = 0; i < 7; i++)
     8aa:	f1 2c       	mov	r15, r1
    {
        c |= (uint64_t)0x1F << (30 - (i*5));
     8ac:	2f e1       	ldi	r18, 0x1F	; 31
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0c 2f       	mov	r16, r28
     8be:	be d3       	rcall	.+1916   	; 0x103c <__ashldi3>
     8c0:	72 2a       	or	r7, r18
     8c2:	83 2a       	or	r8, r19
     8c4:	94 2a       	or	r9, r20
     8c6:	a5 2a       	or	r10, r21
     8c8:	b6 2a       	or	r11, r22
     8ca:	c7 2a       	or	r12, r23
     8cc:	d8 2a       	or	r13, r24
     8ce:	e9 2a       	or	r14, r25
        lc75710_cgram_write(i, c);
     8d0:	07 2d       	mov	r16, r7
     8d2:	18 2d       	mov	r17, r8
     8d4:	29 2d       	mov	r18, r9
     8d6:	3a 2d       	mov	r19, r10
     8d8:	4b 2d       	mov	r20, r11
     8da:	5c 2d       	mov	r21, r12
     8dc:	6d 2d       	mov	r22, r13
     8de:	7e 2d       	mov	r23, r14
     8e0:	8f 2d       	mov	r24, r15
     8e2:	17 df       	rcall	.-466    	; 0x712 <lc75710_cgram_write>
{

    uint8_t i = 0;
    uint64_t c = 0;

    for (i = 0; i < 7; i++)
     8e4:	f3 94       	inc	r15
     8e6:	25 97       	sbiw	r28, 0x05	; 5
     8e8:	87 e0       	ldi	r24, 0x07	; 7
     8ea:	f8 12       	cpse	r15, r24
     8ec:	df cf       	rjmp	.-66     	; 0x8ac <display_load_bars_vert+0x30>
    {
        c |= (uint64_t)0x1F << (30 - (i*5));
        lc75710_cgram_write(i, c);
    }

}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	7f 90       	pop	r7
     908:	08 95       	ret

0000090a <display_show_vertical_bars>:
 * @param   bar     character position in the screen
 * @param   level   bar level (intensity)
 *
 */
void display_show_vertical_bars(uint8_t bar, uint8_t level)
{
     90a:	67 30       	cpi	r22, 0x07	; 7
     90c:	08 f0       	brcs	.+2      	; 0x910 <display_show_vertical_bars+0x6>
     90e:	66 e0       	ldi	r22, 0x06	; 6
     910:	98 2f       	mov	r25, r24
     912:	8a 30       	cpi	r24, 0x0A	; 10
     914:	08 f0       	brcs	.+2      	; 0x918 <display_show_vertical_bars+0xe>
     916:	99 e0       	ldi	r25, 0x09	; 9
    // TODO we want to saturate here and not % ;=)
    if (bar > 9) bar = 9;   /* Saturate */
    if (level > 6) level = 6;
    lc75710_dcram_write(9 - bar, level);
     918:	89 e0       	ldi	r24, 0x09	; 9
     91a:	89 1b       	sub	r24, r25
     91c:	f0 ce       	rjmp	.-544    	; 0x6fe <lc75710_dcram_write>

0000091e <__vector_14>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31

    if (capture_index >= FFT_N)
     936:	40 91 8a 03 	lds	r20, 0x038A
     93a:	40 34       	cpi	r20, 0x40	; 64
     93c:	9c f4       	brge	.+38     	; 0x964 <__vector_14+0x46>
         * quit the ISR without trigger a new conversion */
    }
    else
    {
        /* Save capture in the buffer and apply digital bias */
        capture[capture_index] = 32676U - (ADCL | (ADCH << 8U));
     93e:	24 b1       	in	r18, 0x04	; 4
     940:	85 b1       	in	r24, 0x05	; 5
     942:	e4 2f       	mov	r30, r20
     944:	ee 0f       	add	r30, r30
     946:	ff 0b       	sbc	r31, r31
     948:	e6 5f       	subi	r30, 0xF6	; 246
     94a:	fc 4f       	sbci	r31, 0xFC	; 252
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	38 2b       	or	r19, r24
     950:	84 ea       	ldi	r24, 0xA4	; 164
     952:	9f e7       	ldi	r25, 0x7F	; 127
     954:	82 1b       	sub	r24, r18
     956:	93 0b       	sbc	r25, r19
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
        if (last_capture > adc_maxS) adc_maxS = last_capture;
        if (last_capture < adc_minS) adc_minS = last_capture;
        */

        /* Increment buffer index */
        capture_index++;
     95c:	4f 5f       	subi	r20, 0xFF	; 255
     95e:	40 93 8a 03 	sts	0x038A, r20

        /* Kick-in another conversion */
        /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
        ADCSRA |= (1 << ADSC);
     962:	36 9a       	sbi	0x06, 6	; 6
    }

}
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <ma_audio_init>:
 *
 */
void ma_audio_init(void)
{

    capture_index = 0;
     97c:	10 92 8a 03 	sts	0x038A, r1
    operational.adc_samples = 0;
     980:	10 92 b9 03 	sts	0x03B9, r1
     984:	10 92 ba 03 	sts	0x03BA, r1
     988:	10 92 bb 03 	sts	0x03BB, r1
     98c:	10 92 bc 03 	sts	0x03BC, r1
    adc_maxS = 0;
     990:	10 92 ad 03 	sts	0x03AD, r1
     994:	10 92 ac 03 	sts	0x03AC, r1
    adc_minS = 1024;
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	94 e0       	ldi	r25, 0x04	; 4
     99c:	90 93 af 03 	sts	0x03AF, r25
     9a0:	80 93 ae 03 	sts	0x03AE, r24

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     9a4:	87 b1       	in	r24, 0x07	; 7
     9a6:	80 71       	andi	r24, 0x10	; 16
     9a8:	87 b9       	out	0x07, r24	; 7

    /* Set the internal 2.56V reference */
    ADMUX |= ((1 << REFS1) | (1 << REFS0));
     9aa:	87 b1       	in	r24, 0x07	; 7
     9ac:	80 6c       	ori	r24, 0xC0	; 192
     9ae:	87 b9       	out	0x07, r24	; 7
    /* TODO Set default sampled channel if needed */

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     9b0:	37 9a       	sbi	0x06, 7	; 6

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    ADCSRA &= ~(1 << ADFR);
     9b2:	35 98       	cbi	0x06, 5	; 6

    /* Set the Prescaler to 32 */
    ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0) |
     9b4:	86 b1       	in	r24, 0x06	; 6
     9b6:	8d 64       	ori	r24, 0x4D	; 77
     9b8:	86 b9       	out	0x06, r24	; 6
     9ba:	08 95       	ret

000009bc <ma_audio_process>:
 *
 */
void ma_audio_process(void)
{

    if (((ADCSRA >> ADSC) & 0x1) == 0)
     9bc:	36 99       	sbic	0x06, 6	; 6
     9be:	10 c0       	rjmp	.+32     	; 0x9e0 <ma_audio_process+0x24>
    {
        /* Sampling complete */
/*        hann_window(capture, FFT_N);  */
        fft_input(capture, bfly_buff);
     9c0:	6a e0       	ldi	r22, 0x0A	; 10
     9c2:	72 e0       	ldi	r23, 0x02	; 2
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	93 e0       	ldi	r25, 0x03	; 3
     9c8:	17 dc       	rcall	.-2002   	; 0x1f8 <fft_input>
        fft_execute(bfly_buff);
     9ca:	8a e0       	ldi	r24, 0x0A	; 10
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	43 dc       	rcall	.-1914   	; 0x256 <fft_execute>
        fft_output(bfly_buff, spektrum);
     9d0:	6a ec       	ldi	r22, 0xCA	; 202
     9d2:	71 e0       	ldi	r23, 0x01	; 1
     9d4:	8a e0       	ldi	r24, 0x0A	; 10
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	08 dd       	rcall	.-1520   	; 0x3ea <fft_output>
        //ADMUX |= ((old_mux & 0x7) + 1) % 2;

        /* Unset completion flag
         * NOTE: modifying shared variables is valid here,
         * no ISR shall be executed now */
        capture_index = 0;
     9da:	10 92 8a 03 	sts	0x038A, r1
        ADCSRA |= (1 << ADSC);
     9de:	36 9a       	sbi	0x06, 6	; 6
     9e0:	08 95       	ret

000009e2 <ma_audio_spectrum>:
 * @return  the audio spectrum (FFT output)
 */
uint16_t* ma_audio_spectrum(void)
{
    return spektrum;
}
     9e2:	8a ec       	ldi	r24, 0xCA	; 202
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	08 95       	ret

000009e8 <ma_gui_menu_display_entry>:
#include "time.h"

#include "lc75710_graphics.h"

void ma_gui_menu_display_entry(t_menu* menu)
{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24

    display_clear();
     9ee:	39 df       	rcall	.-398    	; 0x862 <display_clear>

    if (menu != NULL && menu->page->entries[menu->index].label != NULL)
     9f0:	20 97       	sbiw	r28, 0x00	; 0
     9f2:	91 f0       	breq	.+36     	; 0xa18 <ma_gui_menu_display_entry+0x30>
     9f4:	88 81       	ld	r24, Y
     9f6:	e9 81       	ldd	r30, Y+1	; 0x01
     9f8:	fa 81       	ldd	r31, Y+2	; 0x02
     9fa:	06 80       	ldd	r0, Z+6	; 0x06
     9fc:	f7 81       	ldd	r31, Z+7	; 0x07
     9fe:	e0 2d       	mov	r30, r0
     a00:	94 e0       	ldi	r25, 0x04	; 4
     a02:	89 9f       	mul	r24, r25
     a04:	e0 0d       	add	r30, r0
     a06:	f1 1d       	adc	r31, r1
     a08:	11 24       	eor	r1, r1
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	19 f0       	breq	.+6      	; 0xa18 <ma_gui_menu_display_entry+0x30>
    {
        display_string_center(menu->page->entries[menu->index].label);
    }

}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28

    display_clear();

    if (menu != NULL && menu->page->entries[menu->index].label != NULL)
    {
        display_string_center(menu->page->entries[menu->index].label);
     a16:	01 cf       	rjmp	.-510    	; 0x81a <display_string_center>
    }

}
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <ma_gui_menu_goto_previous>:

t_menu_page* ma_gui_menu_goto_previous(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	21 f4       	brne	.+8      	; 0xa2a <ma_gui_menu_goto_previous+0xc>
        return page->page_previous;
     a22:	fa 01       	movw	r30, r20
     a24:	80 81       	ld	r24, Z
     a26:	91 81       	ldd	r25, Z+1	; 0x01
     a28:	08 95       	ret
    return NULL;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
}
     a2e:	08 95       	ret

00000a30 <ma_gui_init>:

void ma_gui_init(t_menu* menu, t_keypad* keypad, t_menu_page* start_page)
{
     a30:	fb 01       	movw	r30, r22
     a32:	db 01       	movw	r26, r22
     a34:	23 e0       	ldi	r18, 0x03	; 3
    uint8_t i = 0;

    /* Init keypad */
    for (i = 0; i < NUM_BUTTONS; i++)
    {
        keypad->input[i] = false;
     a36:	11 92       	st	Z+, r1
        keypad->buttons[i]  = false;
     a38:	11 8a       	std	Z+17, r1	; 0x11
        keypad->latches[i]  = false;
     a3a:	16 86       	std	Z+14, r1	; 0x0e
        keypad->debounce[i] = 0;
     a3c:	13 96       	adiw	r26, 0x03	; 3
     a3e:	1d 92       	st	X+, r1
     a40:	1d 92       	st	X+, r1
     a42:	1d 92       	st	X+, r1
     a44:	1c 92       	st	X, r1
     a46:	16 97       	sbiw	r26, 0x06	; 6
     a48:	21 50       	subi	r18, 0x01	; 1
     a4a:	14 96       	adiw	r26, 0x04	; 4
{

    uint8_t i = 0;

    /* Init keypad */
    for (i = 0; i < NUM_BUTTONS; i++)
     a4c:	21 11       	cpse	r18, r1
     a4e:	f3 cf       	rjmp	.-26     	; 0xa36 <ma_gui_init+0x6>
        keypad->latches[i]  = false;
        keypad->debounce[i] = 0;
    }

    /* First selected page: audio sources */
    menu->page            = start_page;
     a50:	fc 01       	movw	r30, r24
     a52:	52 83       	std	Z+2, r21	; 0x02
     a54:	41 83       	std	Z+1, r20	; 0x01
    menu->page->page_previous = NULL;
     a56:	fa 01       	movw	r30, r20
     a58:	11 82       	std	Z+1, r1	; 0x01
     a5a:	10 82       	st	Z, r1
    menu->index           = 0;
     a5c:	fc 01       	movw	r30, r24
     a5e:	10 82       	st	Z, r1
  
    ma_gui_menu_display_entry(menu);
     a60:	c3 cf       	rjmp	.-122    	; 0x9e8 <ma_gui_menu_display_entry>

00000a62 <keypad_periodic>:

}

/* Read the keypad, apply debounce to inputs and detect the rising edge */
void keypad_periodic(t_keypad* keypad)
{
     a62:	4f 92       	push	r4
     a64:	5f 92       	push	r5
     a66:	6f 92       	push	r6
     a68:	7f 92       	push	r7
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
      {
        t = false;

        /* debounce the raw input */
        if (keypad->debounce[i] == 0)
          keypad->debounce[i] = g_timestamp;
     a82:	40 91 cf 03 	lds	r20, 0x03CF
     a86:	50 91 d0 03 	lds	r21, 0x03D0
     a8a:	60 91 d1 03 	lds	r22, 0x03D1
     a8e:	70 91 d2 03 	lds	r23, 0x03D2
     a92:	7c 01       	movw	r14, r24
     a94:	fc 01       	movw	r30, r24
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
      }
      
      if (t == true && keypad->latches[i] == false)
      {
          /* Falling edge */
          keypad->buttons[i] = true;
     a9a:	cc 24       	eor	r12, r12
     a9c:	c3 94       	inc	r12
  uint8_t i = 0;
  bool t = false;

  for (i = 0; i < NUM_BUTTONS; i++)
  {
      t = keypad->input[i];
     a9e:	e7 01       	movw	r28, r14
     aa0:	d9 90       	ld	r13, Y+
     aa2:	7e 01       	movw	r14, r28
     aa4:	ec 01       	movw	r28, r24
     aa6:	ca 0f       	add	r28, r26
     aa8:	db 1f       	adc	r29, r27
      
      if (t == true)
     aaa:	dd 20       	and	r13, r13
     aac:	e1 f0       	breq	.+56     	; 0xae6 <keypad_periodic+0x84>
      {
        t = false;

        /* debounce the raw input */
        if (keypad->debounce[i] == 0)
     aae:	03 81       	ldd	r16, Z+3	; 0x03
     ab0:	14 81       	ldd	r17, Z+4	; 0x04
     ab2:	25 81       	ldd	r18, Z+5	; 0x05
     ab4:	36 81       	ldd	r19, Z+6	; 0x06
     ab6:	01 15       	cp	r16, r1
     ab8:	11 05       	cpc	r17, r1
     aba:	21 05       	cpc	r18, r1
     abc:	31 05       	cpc	r19, r1
     abe:	29 f4       	brne	.+10     	; 0xaca <keypad_periodic+0x68>
          keypad->debounce[i] = g_timestamp;
     ac0:	43 83       	std	Z+3, r20	; 0x03
     ac2:	54 83       	std	Z+4, r21	; 0x04
     ac4:	65 83       	std	Z+5, r22	; 0x05
     ac6:	76 83       	std	Z+6, r23	; 0x06
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <keypad_periodic+0x8c>
        else
          if ((g_timestamp - keypad->debounce[i]) > DEBOUNCE_BUTTONS)
     aca:	2a 01       	movw	r4, r20
     acc:	3b 01       	movw	r6, r22
     ace:	40 1a       	sub	r4, r16
     ad0:	51 0a       	sbc	r5, r17
     ad2:	62 0a       	sbc	r6, r18
     ad4:	73 0a       	sbc	r7, r19
     ad6:	21 e5       	ldi	r18, 0x51	; 81
     ad8:	42 16       	cp	r4, r18
     ada:	23 ec       	ldi	r18, 0xC3	; 195
     adc:	52 06       	cpc	r5, r18
     ade:	61 04       	cpc	r6, r1
     ae0:	71 04       	cpc	r7, r1
     ae2:	f0 f4       	brcc	.+60     	; 0xb20 <keypad_periodic+0xbe>
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <keypad_periodic+0x8c>
            t = true;
      }
      else
      {
          keypad->debounce[i] = 0;
     ae6:	13 82       	std	Z+3, r1	; 0x03
     ae8:	14 82       	std	Z+4, r1	; 0x04
     aea:	15 82       	std	Z+5, r1	; 0x05
     aec:	16 82       	std	Z+6, r1	; 0x06
      {
        t = false;

        /* debounce the raw input */
        if (keypad->debounce[i] == 0)
          keypad->debounce[i] = g_timestamp;
     aee:	d1 2c       	mov	r13, r1
          /* Falling edge */
          keypad->buttons[i] = true;
      }
      else
      {
          keypad->buttons[i] = false;
     af0:	1a 8a       	std	Y+18, r1	; 0x12
      }

      keypad->latches[i] = t;
     af2:	df 86       	std	Y+15, r13	; 0x0f
     af4:	11 96       	adiw	r26, 0x01	; 1
     af6:	34 96       	adiw	r30, 0x04	; 4
{

  uint8_t i = 0;
  bool t = false;

  for (i = 0; i < NUM_BUTTONS; i++)
     af8:	a3 30       	cpi	r26, 0x03	; 3
     afa:	b1 05       	cpc	r27, r1
     afc:	81 f6       	brne	.-96     	; 0xa9e <keypad_periodic+0x3c>
      }

      keypad->latches[i] = t;
  }

}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	8f 90       	pop	r8
     b16:	7f 90       	pop	r7
     b18:	6f 90       	pop	r6
     b1a:	5f 90       	pop	r5
     b1c:	4f 90       	pop	r4
     b1e:	08 95       	ret
      {
          keypad->debounce[i] = 0;
          t = false;
      }
      
      if (t == true && keypad->latches[i] == false)
     b20:	2f 85       	ldd	r18, Y+15	; 0x0f
     b22:	21 11       	cpse	r18, r1
     b24:	e5 cf       	rjmp	.-54     	; 0xaf0 <keypad_periodic+0x8e>
      {
          /* Falling edge */
          keypad->buttons[i] = true;
     b26:	ca 8a       	std	Y+18, r12	; 0x12
     b28:	e4 cf       	rjmp	.-56     	; 0xaf2 <keypad_periodic+0x90>

00000b2a <ma_gui_page_change>:
  }

}

void ma_gui_page_change(t_menu *menu, t_menu_page *page_next)
{
     b2a:	fc 01       	movw	r30, r24
    if (page_next != NULL)
     b2c:	61 15       	cp	r22, r1
     b2e:	71 05       	cpc	r23, r1
     b30:	69 f0       	breq	.+26     	; 0xb4c <ma_gui_page_change+0x22>
    {

        menu->page = page_next;
     b32:	72 83       	std	Z+2, r23	; 0x02
     b34:	61 83       	std	Z+1, r22	; 0x01
        menu->index = 0;
     b36:	10 82       	st	Z, r1
        menu->refresh = true;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	83 83       	std	Z+3, r24	; 0x03

        /* call the pre function */
        if (menu->page->pre != NULL)
     b3c:	db 01       	movw	r26, r22
     b3e:	12 96       	adiw	r26, 0x02	; 2
     b40:	ed 91       	ld	r30, X+
     b42:	fc 91       	ld	r31, X
     b44:	13 97       	sbiw	r26, 0x03	; 3
     b46:	30 97       	sbiw	r30, 0x00	; 0
     b48:	09 f0       	breq	.+2      	; 0xb4c <ma_gui_page_change+0x22>
            menu->page->pre();
     b4a:	09 94       	ijmp
     b4c:	08 95       	ret

00000b4e <ma_gui_periodic>:

/*

 */
void ma_gui_periodic(t_menu* menu, t_keypad* keypad)
{
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	ec 01       	movw	r28, r24
     b58:	fb 01       	movw	r30, r22

    t_menu_page* page_next = NULL;

    if ((menu->index > 0) && keypad->buttons[BUTTON_UP] == true)
     b5a:	68 81       	ld	r22, Y
     b5c:	66 23       	and	r22, r22
     b5e:	29 f0       	breq	.+10     	; 0xb6a <ma_gui_periodic+0x1c>
     b60:	84 89       	ldd	r24, Z+20	; 0x14
     b62:	88 23       	and	r24, r24
     b64:	11 f0       	breq	.+4      	; 0xb6a <ma_gui_periodic+0x1c>
    {
        menu->index--;
     b66:	61 50       	subi	r22, 0x01	; 1
     b68:	12 c0       	rjmp	.+36     	; 0xb8e <ma_gui_periodic+0x40>
        menu->refresh = true;
    }
    else if (((menu->index + 1) < menu->page->elements) && keypad->buttons[BUTTON_DOWN] == true)
     b6a:	49 81       	ldd	r20, Y+1	; 0x01
     b6c:	5a 81       	ldd	r21, Y+2	; 0x02
     b6e:	86 2f       	mov	r24, r22
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	8c 01       	movw	r16, r24
     b74:	0f 5f       	subi	r16, 0xFF	; 255
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	da 01       	movw	r26, r20
     b7a:	18 96       	adiw	r26, 0x08	; 8
     b7c:	2c 91       	ld	r18, X
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	02 17       	cp	r16, r18
     b82:	13 07       	cpc	r17, r19
     b84:	44 f4       	brge	.+16     	; 0xb96 <ma_gui_periodic+0x48>
     b86:	22 89       	ldd	r18, Z+18	; 0x12
     b88:	22 23       	and	r18, r18
     b8a:	29 f0       	breq	.+10     	; 0xb96 <ma_gui_periodic+0x48>
    {
        menu->index++;
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	68 83       	st	Y, r22
        menu->refresh = true;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	18 c0       	rjmp	.+48     	; 0xbc6 <ma_gui_periodic+0x78>
    }
    else if (keypad->buttons[BUTTON_SELECT] == true)
     b96:	23 89       	ldd	r18, Z+19	; 0x13
     b98:	22 23       	and	r18, r18
     b9a:	a9 f0       	breq	.+42     	; 0xbc6 <ma_gui_periodic+0x78>
    {
        if (menu->page->entries[menu->index].cb != NULL)
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	da 01       	movw	r26, r20
     ba6:	16 96       	adiw	r26, 0x06	; 6
     ba8:	ed 91       	ld	r30, X+
     baa:	fc 91       	ld	r31, X
     bac:	17 97       	sbiw	r26, 0x07	; 7
     bae:	e8 0f       	add	r30, r24
     bb0:	f9 1f       	adc	r31, r25
     bb2:	02 80       	ldd	r0, Z+2	; 0x02
     bb4:	f3 81       	ldd	r31, Z+3	; 0x03
     bb6:	e0 2d       	mov	r30, r0
     bb8:	30 97       	sbiw	r30, 0x00	; 0
     bba:	29 f0       	breq	.+10     	; 0xbc6 <ma_gui_periodic+0x78>
        {
            page_next = menu->page->entries[menu->index].cb(REASON_SELECT, menu->index, menu->page);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	09 95       	icall

            ma_gui_page_change(menu, page_next);
     bc0:	bc 01       	movw	r22, r24
     bc2:	ce 01       	movw	r24, r28
     bc4:	b2 df       	rcall	.-156    	; 0xb2a <ma_gui_page_change>
        }

    }
    
    if (menu->refresh == true)
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	88 23       	and	r24, r24
     bca:	b9 f0       	breq	.+46     	; 0xbfa <ma_gui_periodic+0xac>
    {
        menu->refresh = false;
     bcc:	1b 82       	std	Y+3, r1	; 0x03
        ma_gui_menu_display_entry(menu);
     bce:	ce 01       	movw	r24, r28
     bd0:	0b df       	rcall	.-490    	; 0x9e8 <ma_gui_menu_display_entry>
        if (menu->page->entries[menu->index].cb != NULL)
     bd2:	49 81       	ldd	r20, Y+1	; 0x01
     bd4:	5a 81       	ldd	r21, Y+2	; 0x02
     bd6:	68 81       	ld	r22, Y
     bd8:	da 01       	movw	r26, r20
     bda:	16 96       	adiw	r26, 0x06	; 6
     bdc:	ed 91       	ld	r30, X+
     bde:	fc 91       	ld	r31, X
     be0:	17 97       	sbiw	r26, 0x07	; 7
     be2:	b4 e0       	ldi	r27, 0x04	; 4
     be4:	6b 9f       	mul	r22, r27
     be6:	e0 0d       	add	r30, r0
     be8:	f1 1d       	adc	r31, r1
     bea:	11 24       	eor	r1, r1
     bec:	02 80       	ldd	r0, Z+2	; 0x02
     bee:	f3 81       	ldd	r31, Z+3	; 0x03
     bf0:	e0 2d       	mov	r30, r0
     bf2:	30 97       	sbiw	r30, 0x00	; 0
     bf4:	11 f0       	breq	.+4      	; 0xbfa <ma_gui_periodic+0xac>
            menu->page->entries[menu->index].cb(REASON_HOOVER, menu->index, menu->page);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	09 95       	icall
    }

    /* Periodic function for e.g. menus that continuously refresh */
    if (menu->refresh_menu != NULL)
     bfa:	ec 81       	ldd	r30, Y+4	; 0x04
     bfc:	fd 81       	ldd	r31, Y+5	; 0x05
     bfe:	30 97       	sbiw	r30, 0x00	; 0
     c00:	29 f0       	breq	.+10     	; 0xc0c <ma_gui_periodic+0xbe>
        menu->refresh_menu();

}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
            menu->page->entries[menu->index].cb(REASON_HOOVER, menu->index, menu->page);
    }

    /* Periodic function for e.g. menus that continuously refresh */
    if (menu->refresh_menu != NULL)
        menu->refresh_menu();
     c0a:	09 94       	ijmp

}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <read_from_persistent>:
*
* @brief Read persistent variables from the non volatile storage
* @param persistent the persistent variables to write to
*/
void read_from_persistent(t_persistent* persistent)
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
    //eeprom_read_block(persistent, (void*)5, sizeof(t_persistent));
    persistent->brightness = eeprom_read_byte((const uint8_t*)5);
     c1c:	85 e0       	ldi	r24, 0x05	; 5
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	be d4       	rcall	.+2428   	; 0x159e <__eerd_byte_m8>
     c22:	88 83       	st	Y, r24
    persistent->audio_source = eeprom_read_byte((const uint8_t*)6);
     c24:	86 e0       	ldi	r24, 0x06	; 6
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	ba d4       	rcall	.+2420   	; 0x159e <__eerd_byte_m8>
     c2a:	89 83       	std	Y+1, r24	; 0x01
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <write_to_persistent>:
*
* @brief Write persistent variables to the non volatile storage
* @param persistent the persistent variables to read from
*/
void write_to_persistent(t_persistent* persistent)
{
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ec 01       	movw	r28, r24
    //eeprom_write_block((void*)5, persistent, sizeof(t_persistent));
    eeprom_write_byte((uint8_t*)5, persistent->brightness);
     c38:	68 81       	ld	r22, Y
     c3a:	85 e0       	ldi	r24, 0x05	; 5
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	b7 d4       	rcall	.+2414   	; 0x15ae <__eewr_byte_m8>
    eeprom_write_byte((uint8_t*)6, persistent->audio_source);
     c40:	69 81       	ldd	r22, Y+1	; 0x01
     c42:	86 e0       	ldi	r24, 0x06	; 6
     c44:	90 e0       	ldi	r25, 0x00	; 0
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
*/
void write_to_persistent(t_persistent* persistent)
{
    //eeprom_write_block((void*)5, persistent, sizeof(t_persistent));
    eeprom_write_byte((uint8_t*)5, persistent->brightness);
    eeprom_write_byte((uint8_t*)6, persistent->audio_source);
     c4a:	b1 c4       	rjmp	.+2402   	; 0x15ae <__eewr_byte_m8>

00000c4c <source_select>:
    return debounce->input_old;

}

uint8_t source_select(uint8_t source)
{
     c4c:	81 50       	subi	r24, 0x01	; 1
     c4e:	83 30       	cpi	r24, 0x03	; 3
     c50:	30 f4       	brcc	.+12     	; 0xc5e <source_select+0x12>
     c52:	e8 2f       	mov	r30, r24
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	e1 5d       	subi	r30, 0xD1	; 209
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	80 81       	ld	r24, Z
     c5c:	08 95       	ret
     c5e:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }

    return outputs;

}
     c60:	08 95       	ret

00000c62 <ma_gui_settings_brightness_pre>:
        .elements = sizeof(MENU_DEBUG) / sizeof(t_menu_entry)
};

void ma_gui_settings_brightness_pre()
{
    if (persistent.brightness < PAGE_SETTINGS_BRIGHTNESS.elements)
     c62:	80 91 8f 03 	lds	r24, 0x038F
     c66:	90 91 aa 00 	lds	r25, 0x00AA
     c6a:	89 17       	cp	r24, r25
     c6c:	10 f4       	brcc	.+4      	; 0xc72 <ma_gui_settings_brightness_pre+0x10>
        menu.index = persistent.brightness;
     c6e:	80 93 a6 03 	sts	0x03A6, r24
     c72:	08 95       	ret

00000c74 <ma_gui_source_select_pre>:
}

void ma_gui_source_select_pre()
{
    if (persistent.audio_source < PAGE_SOURCE.elements)
     c74:	80 91 90 03 	lds	r24, 0x0390
     c78:	90 91 fd 00 	lds	r25, 0x00FD
     c7c:	89 17       	cp	r24, r25
     c7e:	10 f4       	brcc	.+4      	; 0xc84 <ma_gui_source_select_pre+0x10>
    {
        menu.index = persistent.audio_source;
     c80:	80 93 a6 03 	sts	0x03A6, r24
     c84:	08 95       	ret

00000c86 <ma_gui_menu_goto_sett_display>:

/* MENU: callbacks */

t_menu_page* ma_gui_menu_goto_sett_display(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	19 f4       	brne	.+6      	; 0xc90 <ma_gui_menu_goto_sett_display+0xa>
        return &PAGE_SETTINGS_DISPLAY;
     c8a:	8f eb       	ldi	r24, 0xBF	; 191
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	08 95       	ret
    else
        return NULL;
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
}
     c94:	08 95       	ret

00000c96 <ma_gui_menu_goto_sett_brightness>:

t_menu_page* ma_gui_menu_goto_sett_brightness(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	19 f4       	brne	.+6      	; 0xca0 <ma_gui_menu_goto_sett_brightness+0xa>
        return &PAGE_SETTINGS_BRIGHTNESS;
     c9a:	82 ea       	ldi	r24, 0xA2	; 162
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	08 95       	ret
    else
        return NULL;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
}
     ca4:	08 95       	ret

00000ca6 <ma_gui_menu_goto_tools>:
    return NULL;
}

t_menu_page* ma_gui_menu_goto_tools(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_SELECT)
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <ma_gui_menu_goto_tools+0xa>
        return &PAGE_SETTINGS_TOOLS;
     caa:	8d e8       	ldi	r24, 0x8D	; 141
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	08 95       	ret
    else
        return NULL;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
}
     cb4:	08 95       	ret

00000cb6 <ma_gui_refresh>:
float x_dB = 0;
float minref = 42.14f;
float adc_max = 128.0f;
uint8_t t;
void ma_gui_refresh()
{
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
    uint8_t i,j;
    uint16_t *spektrum = ma_audio_spectrum();
     cbc:	92 de       	rcall	.-732    	; 0x9e2 <ma_audio_spectrum>
    if (menu.page == &PAGE_DEBUG)
     cbe:	20 91 a7 03 	lds	r18, 0x03A7
     cc2:	30 91 a8 03 	lds	r19, 0x03A8
     cc6:	28 56       	subi	r18, 0x68	; 104
     cc8:	30 40       	sbci	r19, 0x00	; 0
     cca:	09 f0       	breq	.+2      	; 0xcce <ma_gui_refresh+0x18>
     ccc:	5b c0       	rjmp	.+182    	; 0xd84 <ma_gui_refresh+0xce>
    {
// TEST ONLY
        menu.index = 4;
     cce:	24 e0       	ldi	r18, 0x04	; 4
     cd0:	20 93 a6 03 	sts	0x03A6, r18
     cd4:	ec 01       	movw	r28, r24

                break;

            case 4:

                for (i = 0; i < (FFT_N/2/3); i++)
     cd6:	10 e0       	ldi	r17, 0x00	; 0
                {

                    //float v = log10f(spektrum[i] / 60.0f) * 20.0f;
                    //display_show_vertical_bars(i, lookupf(v, table, sizeof(table) / sizeof(float)));
                    uint16_t v = (spektrum[i*3] + spektrum[i*3+1] + spektrum[i*3+2]);
     cd8:	6a 81       	ldd	r22, Y+2	; 0x02
     cda:	7b 81       	ldd	r23, Y+3	; 0x03
     cdc:	88 81       	ld	r24, Y
     cde:	99 81       	ldd	r25, Y+1	; 0x01
     ce0:	68 0f       	add	r22, r24
     ce2:	79 1f       	adc	r23, r25
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	68 0f       	add	r22, r24
     cea:	79 1f       	adc	r23, r25

                    if (v > 10)
     cec:	6b 30       	cpi	r22, 0x0B	; 11
     cee:	71 05       	cpc	r23, r1
     cf0:	48 f1       	brcs	.+82     	; 0xd44 <ma_gui_refresh+0x8e>
                    {
                        /* Provide a very crude but effective noise filter */
                        x_dB = 20.0f * log10(v / adc_max);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	de d2       	rcall	.+1468   	; 0x12b4 <__floatunsisf>
     cf8:	20 91 60 00 	lds	r18, 0x0060
     cfc:	30 91 61 00 	lds	r19, 0x0061
     d00:	40 91 62 00 	lds	r20, 0x0062
     d04:	50 91 63 00 	lds	r21, 0x0063
     d08:	41 d2       	rcall	.+1154   	; 0x118c <__divsf3>
     d0a:	62 d3       	rcall	.+1732   	; 0x13d0 <log10>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 ea       	ldi	r20, 0xA0	; 160
     d12:	51 e4       	ldi	r21, 0x41	; 65
     d14:	a8 d3       	rcall	.+1872   	; 0x1466 <__mulsf3>
     d16:	9b 01       	movw	r18, r22
     d18:	ac 01       	movw	r20, r24
     d1a:	60 93 8b 03 	sts	0x038B, r22
     d1e:	70 93 8c 03 	sts	0x038C, r23
     d22:	80 93 8d 03 	sts	0x038D, r24
     d26:	90 93 8e 03 	sts	0x038E, r25
                        t = abs(minref - x_dB);
     d2a:	60 91 64 00 	lds	r22, 0x0064
     d2e:	70 91 65 00 	lds	r23, 0x0065
     d32:	80 91 66 00 	lds	r24, 0x0066
     d36:	90 91 67 00 	lds	r25, 0x0067
     d3a:	c3 d1       	rcall	.+902    	; 0x10c2 <__subsf3>
     d3c:	2a d4       	rcall	.+2132   	; 0x1592 <abs>
     d3e:	80 93 b0 03 	sts	0x03B0, r24
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <ma_gui_refresh+0x92>
                    }
                    else
                    {
                        t = 0;
     d44:	10 92 b0 03 	sts	0x03B0, r1
                    }

                    display_show_vertical_bars(i, (minref / t)*7);
     d48:	60 91 b0 03 	lds	r22, 0x03B0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	b2 d2       	rcall	.+1380   	; 0x12b8 <__floatsisf>
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	60 91 64 00 	lds	r22, 0x0064
     d5c:	70 91 65 00 	lds	r23, 0x0065
     d60:	80 91 66 00 	lds	r24, 0x0066
     d64:	90 91 67 00 	lds	r25, 0x0067
     d68:	11 d2       	rcall	.+1058   	; 0x118c <__divsf3>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 ee       	ldi	r20, 0xE0	; 224
     d70:	50 e4       	ldi	r21, 0x40	; 64
     d72:	79 d3       	rcall	.+1778   	; 0x1466 <__mulsf3>
     d74:	73 d2       	rcall	.+1254   	; 0x125c <__fixunssfsi>
     d76:	81 2f       	mov	r24, r17
     d78:	c8 dd       	rcall	.-1136   	; 0x90a <display_show_vertical_bars>

                break;

            case 4:

                for (i = 0; i < (FFT_N/2/3); i++)
     d7a:	1f 5f       	subi	r17, 0xFF	; 255
     d7c:	26 96       	adiw	r28, 0x06	; 6
     d7e:	1a 30       	cpi	r17, 0x0A	; 10
     d80:	09 f0       	breq	.+2      	; 0xd84 <ma_gui_refresh+0xce>
     d82:	aa cf       	rjmp	.-172    	; 0xcd8 <ma_gui_refresh+0x22>
            default:
                break;
        }
    }

}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	08 95       	ret

00000d8c <ma_gui_menu_tools_selection>:
t_menu_page* ma_gui_menu_tools_selection(uint8_t reason, uint8_t id, t_menu_page* page)
{

    void (*start)(void) = 0;

    if (reason == REASON_SELECT)
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	59 f4       	brne	.+22     	; 0xda6 <ma_gui_menu_tools_selection+0x1a>
    {
        switch(id)
     d90:	66 23       	and	r22, r22
     d92:	31 f0       	breq	.+12     	; 0xda0 <ma_gui_menu_tools_selection+0x14>
     d94:	61 30       	cpi	r22, 0x01	; 1
     d96:	39 f4       	brne	.+14     	; 0xda6 <ma_gui_menu_tools_selection+0x1a>
        {
            case 0:
                return &PAGE_DEBUG;
            case 1:
                start();
     d98:	e0 e0       	ldi	r30, 0x00	; 0
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	09 95       	icall
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <ma_gui_menu_tools_selection+0x1a>
    if (reason == REASON_SELECT)
    {
        switch(id)
        {
            case 0:
                return &PAGE_DEBUG;
     da0:	88 e6       	ldi	r24, 0x68	; 104
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	08 95       	ret
            default:
                break;
        }
    }

    return NULL;
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0

}
     daa:	08 95       	ret

00000dac <ma_gui_source_select>:
}

t_menu_page* ma_gui_source_select(uint8_t reason, uint8_t id, t_menu_page* page)
{

    if (reason == REASON_HOOVER)
     dac:	81 11       	cpse	r24, r1
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <ma_gui_source_select+0x18>
    {
        persistent.audio_source = id;
     db0:	60 93 90 03 	sts	0x0390, r22
        operational.output.relays = source_select(id);
     db4:	86 2f       	mov	r24, r22
     db6:	4a df       	rcall	.-364    	; 0xc4c <source_select>
     db8:	80 93 c1 03 	sts	0x03C1, r24
        write_to_persistent(&persistent);
     dbc:	8f e8       	ldi	r24, 0x8F	; 143
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	38 df       	rcall	.-400    	; 0xc32 <write_to_persistent>
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <ma_gui_source_select+0x22>
    }
    else if (reason == REASON_SELECT)
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	19 f4       	brne	.+6      	; 0xdce <ma_gui_source_select+0x22>
    {
        return &PAGE_SETTINGS;
     dc8:	84 ed       	ldi	r24, 0xD4	; 212
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	08 95       	ret
    }

    return NULL;
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0

}
     dd2:	08 95       	ret

00000dd4 <set_display_brightness>:
* set_display_brightness
*
* @brief Set application display brightness
*/
void set_display_brightness(uint8_t level)
{
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	00 d0       	rcall	.+0      	; 0xddc <set_display_brightness+0x8>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <set_display_brightness+0xa>
     dde:	1f 92       	push	r1
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	18 2f       	mov	r17, r24
    uint8_t brightness_levels[5] = { 48, 96, 144, 192, 240 };
     de6:	85 e0       	ldi	r24, 0x05	; 5
     de8:	ea e2       	ldi	r30, 0x2A	; 42
     dea:	f1 e0       	ldi	r31, 0x01	; 1
     dec:	de 01       	movw	r26, r28
     dee:	11 96       	adiw	r26, 0x01	; 1
     df0:	01 90       	ld	r0, Z+
     df2:	0d 92       	st	X+, r0
     df4:	8a 95       	dec	r24
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <set_display_brightness+0x1c>
    
    if (level < 5)
     df8:	15 30       	cpi	r17, 0x05	; 5
     dfa:	a8 f4       	brcc	.+42     	; 0xe26 <set_display_brightness+0x52>
    {
        lc75710_intensity(brightness_levels[level]);
     dfc:	e1 e0       	ldi	r30, 0x01	; 1
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	ec 0f       	add	r30, r28
     e02:	fd 1f       	adc	r31, r29
     e04:	e1 0f       	add	r30, r17
     e06:	f1 1d       	adc	r31, r1
     e08:	80 81       	ld	r24, Z
     e0a:	70 dc       	rcall	.-1824   	; 0x6ec <lc75710_intensity>
        persistent.brightness = level;
     e0c:	10 93 8f 03 	sts	0x038F, r17
        write_to_persistent(&persistent);
     e10:	8f e8       	ldi	r24, 0x8F	; 143
     e12:	93 e0       	ldi	r25, 0x03	; 3
    }
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
    
    if (level < 5)
    {
        lc75710_intensity(brightness_levels[level]);
        persistent.brightness = level;
        write_to_persistent(&persistent);
     e24:	06 cf       	rjmp	.-500    	; 0xc32 <write_to_persistent>
    }
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	08 95       	ret

00000e38 <ma_gui_menu_set_brightness>:
        return NULL;
}

t_menu_page* ma_gui_menu_set_brightness(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_HOOVER)
     e38:	81 11       	cpse	r24, r1
        set_display_brightness(id);
    else
        return ma_gui_menu_goto_previous(reason, id, page);
     e3a:	f1 cd       	rjmp	.-1054   	; 0xa1e <ma_gui_menu_goto_previous>
}

t_menu_page* ma_gui_menu_set_brightness(uint8_t reason, uint8_t id, t_menu_page* page)
{
    if (reason == REASON_HOOVER)
        set_display_brightness(id);
     e3c:	86 2f       	mov	r24, r22
     e3e:	ca df       	rcall	.-108    	; 0xdd4 <set_display_brightness>
    else
        return ma_gui_menu_goto_previous(reason, id, page);
    return NULL;
}
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	08 95       	ret

00000e46 <io_init>:
{

    /* I/O init */

    /* Audio Switch Relays init */
    RLY_DDR |= 1 << RLY_1;  /* OUTPUT */
     e46:	8d 9a       	sbi	0x11, 5	; 17
    RLY_DDR |= 1 << RLY_2;  /* OUTPUT */
     e48:	8e 9a       	sbi	0x11, 6	; 17
    RLY_DDR |= 1 << RLY_3;  /* OUTPUT */
     e4a:	8f 9a       	sbi	0x11, 7	; 17

    /* Keypad */
    DDRB &= ~(1 << KEY_1);  /* INPUT */
     e4c:	b8 98       	cbi	0x17, 0	; 23
    DDRB &= ~(1 << KEY_2);  /* INPUT */
     e4e:	b9 98       	cbi	0x17, 1	; 23
    DDRB &= ~(1 << KEY_3);  /* INPUT */
     e50:	ba 98       	cbi	0x17, 2	; 23
    PORTB |=  (1 << KEY_1);  /* PULL-UP */
     e52:	c0 9a       	sbi	0x18, 0	; 24
    PORTB |=  (1 << KEY_2);  /* PULL-UP */
     e54:	c1 9a       	sbi	0x18, 1	; 24
    PORTB |=  (1 << KEY_3);  /* PULL-UP */
     e56:	c2 9a       	sbi	0x18, 2	; 24
     e58:	08 95       	ret

00000e5a <setup>:

void setup()
{

    /* Initialize the I/O */
    io_init();
     e5a:	f5 df       	rcall	.-22     	; 0xe46 <io_init>

    /* Initialze the display */
    lc75710_init();
     e5c:	85 dc       	rcall	.-1782   	; 0x768 <lc75710_init>

    /* Timer: start ticking */
    timer_init();
     e5e:	a5 d0       	rcall	.+330    	; 0xfaa <timer_init>

    /* ADC */
    ma_audio_init();
     e60:	8d dd       	rcall	.-1254   	; 0x97c <ma_audio_init>

    /* Initialize the serial port */
    uart_init();
     e62:	d4 d0       	rcall	.+424    	; 0x100c <uart_init>
    stdout = &uart_output;
     e64:	8c e1       	ldi	r24, 0x1C	; 28
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	90 93 d6 03 	sts	0x03D6, r25
     e6c:	80 93 d5 03 	sts	0x03D5, r24
    stdin  = &uart_input;
     e70:	8e e0       	ldi	r24, 0x0E	; 14
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	90 93 d4 03 	sts	0x03D4, r25
     e78:	80 93 d3 03 	sts	0x03D3, r24

    /* Load persistent data */
    read_from_persistent(&persistent);
     e7c:	8f e8       	ldi	r24, 0x8F	; 143
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	ca de       	rcall	.-620    	; 0xc16 <read_from_persistent>

    /* Initialize the GUI */
    ma_gui_init(&menu, &keypad, &PAGE_SOURCE);
     e82:	45 ef       	ldi	r20, 0xF5	; 245
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	61 e9       	ldi	r22, 0x91	; 145
     e88:	73 e0       	ldi	r23, 0x03	; 3
     e8a:	86 ea       	ldi	r24, 0xA6	; 166
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	d0 dd       	rcall	.-1120   	; 0xa30 <ma_gui_init>

    /* Apply persistent data */
    set_display_brightness(persistent.brightness);
     e90:	80 91 8f 03 	lds	r24, 0x038F
     e94:	9f cf       	rjmp	.-194    	; 0xdd4 <set_display_brightness>

00000e96 <input>:

}

void input(t_keypad *keypad)
{
     e96:	fc 01       	movw	r30, r24

    /* Keypad */
    keypad->input[BUTTON_SELECT]    = !((PINB >> KEY_1) & 0x1);
     e98:	86 b3       	in	r24, 0x16	; 22
     e9a:	81 70       	andi	r24, 0x01	; 1
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	89 27       	eor	r24, r25
     ea0:	81 83       	std	Z+1, r24	; 0x01
    keypad->input[BUTTON_UP]        = !((PINB >> KEY_2) & 0x1);
     ea2:	86 b3       	in	r24, 0x16	; 22
     ea4:	86 95       	lsr	r24
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	89 27       	eor	r24, r25
     eaa:	82 83       	std	Z+2, r24	; 0x02
    keypad->input[BUTTON_DOWN]      = !((PINB >> KEY_3) & 0x1);
     eac:	86 b3       	in	r24, 0x16	; 22
     eae:	82 fb       	bst	r24, 2
     eb0:	88 27       	eor	r24, r24
     eb2:	80 f9       	bld	r24, 0
     eb4:	89 27       	eor	r24, r25
     eb6:	80 83       	st	Z, r24
     eb8:	08 95       	ret

00000eba <output>:

void output()
{

    /* Relays */
    (operational.output.relays      & 0x1) ? (RLY_PORT |= 1 << RLY_1) : (RLY_PORT &= ~(1 << RLY_1));
     eba:	80 91 c1 03 	lds	r24, 0x03C1
     ebe:	80 ff       	sbrs	r24, 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <output+0xc>
     ec2:	95 9a       	sbi	0x12, 5	; 18
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <output+0xe>
     ec6:	95 98       	cbi	0x12, 5	; 18
    (operational.output.relays >> 1 & 0x1) ? (RLY_PORT |= 1 << RLY_2) : (RLY_PORT &= ~(1 << RLY_2));
     ec8:	81 ff       	sbrs	r24, 1
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <output+0x16>
     ecc:	96 9a       	sbi	0x12, 6	; 18
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <output+0x18>
     ed0:	96 98       	cbi	0x12, 6	; 18
    (operational.output.relays >> 2 & 0x1) ? (RLY_PORT |= 1 << RLY_3) : (RLY_PORT &= ~(1 << RLY_3));
     ed2:	82 ff       	sbrs	r24, 2
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <output+0x20>
     ed6:	97 9a       	sbi	0x12, 7	; 18
     ed8:	08 95       	ret
     eda:	97 98       	cbi	0x12, 7	; 18
     edc:	08 95       	ret

00000ede <main>:
{

    uint32_t start = 0;

    /* Disable interrupts for the whole init period */
    cli();
     ede:	f8 94       	cli

    /* System stuff */
    system_init();
     ee0:	5f d0       	rcall	.+190    	; 0xfa0 <system_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee2:	2f e7       	ldi	r18, 0x7F	; 127
     ee4:	8f e4       	ldi	r24, 0x4F	; 79
     ee6:	92 e1       	ldi	r25, 0x12	; 18
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	80 40       	sbci	r24, 0x00	; 0
     eec:	90 40       	sbci	r25, 0x00	; 0
     eee:	e1 f7       	brne	.-8      	; 0xee8 <main+0xa>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <main+0x14>
     ef2:	00 00       	nop

    /* Wait for power and LC75710 stabilization */
    _delay_ms(500);

    /* Setup the peripherals */
    setup();
     ef4:	b2 df       	rcall	.-156    	; 0xe5a <setup>

    /* Start the application: re-enable interrupts */
    sei();
     ef6:	78 94       	sei

    /* Set periodic menu handler */
    menu.refresh_menu = ma_gui_refresh;
     ef8:	8b e5       	ldi	r24, 0x5B	; 91
     efa:	96 e0       	ldi	r25, 0x06	; 6
     efc:	90 93 ab 03 	sts	0x03AB, r25
     f00:	80 93 aa 03 	sts	0x03AA, r24

    /* Load CGRAM data */
    display_load_bars_vert();
     f04:	bb dc       	rcall	.-1674   	; 0x87c <display_load_bars_vert>

//    if (!((PINB >> KEY_1) & 0x1))
//    {
        /* Directly go to the debug menu */
        ma_gui_page_change(&menu, &PAGE_DEBUG);
     f06:	68 e6       	ldi	r22, 0x68	; 104
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	86 ea       	ldi	r24, 0xA6	; 166
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	0d de       	rcall	.-998    	; 0xb2a <ma_gui_page_change>
    /* Start the main loop (and never return) */
    while (1)
    {

        /* Cycle start */
        start = g_timestamp;
     f10:	c0 90 cf 03 	lds	r12, 0x03CF
     f14:	d0 90 d0 03 	lds	r13, 0x03D0
     f18:	e0 90 d1 03 	lds	r14, 0x03D1
     f1c:	f0 90 d2 03 	lds	r15, 0x03D2

        /* Read inputs */
        input(&keypad);
     f20:	81 e9       	ldi	r24, 0x91	; 145
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	b8 df       	rcall	.-144    	; 0xe96 <input>

        /* Keypad logic */
        keypad_periodic(&keypad);
     f26:	81 e9       	ldi	r24, 0x91	; 145
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	9b dd       	rcall	.-1226   	; 0xa62 <keypad_periodic>

        /* Process audio (FFT / VU-METER) */
        ma_audio_process();
     f2c:	47 dd       	rcall	.-1394   	; 0x9bc <ma_audio_process>

        /* Run the periodic GUI logic */
        ma_gui_periodic(&menu, &keypad);
     f2e:	61 e9       	ldi	r22, 0x91	; 145
     f30:	73 e0       	ldi	r23, 0x03	; 3
     f32:	86 ea       	ldi	r24, 0xA6	; 166
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	0b de       	rcall	.-1002   	; 0xb4e <ma_gui_periodic>

        /* Set outputs */
        output();
     f38:	c0 df       	rcall	.-128    	; 0xeba <output>

        /* Cycle end */
        operational.cycle_time = g_timestamp - start;
     f3a:	80 91 cf 03 	lds	r24, 0x03CF
     f3e:	90 91 d0 03 	lds	r25, 0x03D0
     f42:	a0 91 d1 03 	lds	r26, 0x03D1
     f46:	b0 91 d2 03 	lds	r27, 0x03D2
     f4a:	8c 19       	sub	r24, r12
     f4c:	9d 09       	sbc	r25, r13
     f4e:	ae 09       	sbc	r26, r14
     f50:	bf 09       	sbc	r27, r15
     f52:	80 93 b1 03 	sts	0x03B1, r24
     f56:	90 93 b2 03 	sts	0x03B2, r25
     f5a:	a0 93 b3 03 	sts	0x03B3, r26
     f5e:	b0 93 b4 03 	sts	0x03B4, r27

        /* Save peak cycle time */
        if (operational.cycle_time > operational.cycle_time_max)
     f62:	40 91 b5 03 	lds	r20, 0x03B5
     f66:	50 91 b6 03 	lds	r21, 0x03B6
     f6a:	60 91 b7 03 	lds	r22, 0x03B7
     f6e:	70 91 b8 03 	lds	r23, 0x03B8
     f72:	48 17       	cp	r20, r24
     f74:	59 07       	cpc	r21, r25
     f76:	6a 07       	cpc	r22, r26
     f78:	7b 07       	cpc	r23, r27
     f7a:	50 f6       	brcc	.-108    	; 0xf10 <main+0x32>
        {
            operational.cycle_time_max = operational.cycle_time;
     f7c:	80 93 b5 03 	sts	0x03B5, r24
     f80:	90 93 b6 03 	sts	0x03B6, r25
     f84:	a0 93 b7 03 	sts	0x03B7, r26
     f88:	b0 93 b8 03 	sts	0x03B8, r27
     f8c:	c1 cf       	rjmp	.-126    	; 0xf10 <main+0x32>

00000f8e <__vector_default>:
 * @brief This interrupt handler is executed whenever an ISR is fired
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 */
ISR(BADISR_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
    display_string("no ISR!");
     f98:	81 ec       	ldi	r24, 0xC1	; 193
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	28 dc       	rcall	.-1968   	; 0x7ee <display_string>
     f9e:	ff cf       	rjmp	.-2      	; 0xf9e <__vector_default+0x10>

00000fa0 <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    operational.reset_reason = MCUCSR;
     fa0:	84 b7       	in	r24, 0x34	; 52
     fa2:	80 93 c2 03 	sts	0x03C2, r24

    /* Reset state for the next proper detection */
    MCUCSR = 0;
     fa6:	14 be       	out	0x34, r1	; 52
     fa8:	08 95       	ret

00000faa <timer_init>:
 */
void timer_init(void)
{

    /* set up timer with prescaler */
    TCCR0 = TIMER_0_PRESCALER_8;
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	83 bf       	out	0x33, r24	; 51

    /* initialize counter */
    TCNT0 = 105;
     fae:	89 e6       	ldi	r24, 0x69	; 105
     fb0:	82 bf       	out	0x32, r24	; 50

    /* enable overflow interrupt */
    TIMSK |= (1 << TOIE0);
     fb2:	89 b7       	in	r24, 0x39	; 57
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	89 bf       	out	0x39, r24	; 57
     fb8:	08 95       	ret

00000fba <__vector_9>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_OVF_vect)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
     fcc:	80 91 cf 03 	lds	r24, 0x03CF
     fd0:	90 91 d0 03 	lds	r25, 0x03D0
     fd4:	a0 91 d1 03 	lds	r26, 0x03D1
     fd8:	b0 91 d2 03 	lds	r27, 0x03D2
     fdc:	8c 59       	subi	r24, 0x9C	; 156
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	af 4f       	sbci	r26, 0xFF	; 255
     fe2:	bf 4f       	sbci	r27, 0xFF	; 255
     fe4:	80 93 cf 03 	sts	0x03CF, r24
     fe8:	90 93 d0 03 	sts	0x03D0, r25
     fec:	a0 93 d1 03 	sts	0x03D1, r26
     ff0:	b0 93 d2 03 	sts	0x03D2, r27
    TCNT0 		+= 105;		/* Advance internal counter */
     ff4:	82 b7       	in	r24, 0x32	; 50
     ff6:	87 59       	subi	r24, 0x97	; 151
     ff8:	82 bf       	out	0x32, r24	; 50
}
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    UBRRH = UBRRH_VALUE;
    100c:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_VALUE;
    100e:	8c e0       	ldi	r24, 0x0C	; 12
    1010:	89 b9       	out	0x09, r24	; 9

#if USE_2X
    UCSRA |= _BV(U2X);
    1012:	59 9a       	sbi	0x0b, 1	; 11
#else
    UCSRA &= ~(_BV(U2X0));
#endif

    UCSRC = _BV(UCSZ1) | _BV(UCSZ0); /* 8-bit data */
    1014:	86 e0       	ldi	r24, 0x06	; 6
    1016:	80 bd       	out	0x20, r24	; 32
    UCSRB = _BV(RXEN) | _BV(TXEN);   /* Enable RX and TX */
    1018:	88 e1       	ldi	r24, 0x18	; 24
    101a:	8a b9       	out	0x0a, r24	; 10
    101c:	08 95       	ret

0000101e <uart_putchar>:
}

void uart_putchar(char c, FILE *stream) {
    101e:	cf 93       	push	r28
    1020:	c8 2f       	mov	r28, r24
    if (c == '\n') {
    1022:	8a 30       	cpi	r24, 0x0A	; 10
    1024:	11 f4       	brne	.+4      	; 0x102a <uart_putchar+0xc>
        uart_putchar('\r', stream);
    1026:	8d e0       	ldi	r24, 0x0D	; 13
    1028:	fa df       	rcall	.-12     	; 0x101e <uart_putchar>
    }
    loop_until_bit_is_set(UCSRA, UDRE);
    102a:	5d 9b       	sbis	0x0b, 5	; 11
    102c:	fe cf       	rjmp	.-4      	; 0x102a <uart_putchar+0xc>
    UDR = c;
    102e:	cc b9       	out	0x0c, r28	; 12
}
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSRA, RXC);
    1034:	5f 9b       	sbis	0x0b, 7	; 11
    1036:	fe cf       	rjmp	.-4      	; 0x1034 <uart_getchar>
    return UDR;
    1038:	8c b1       	in	r24, 0x0c	; 12
}
    103a:	08 95       	ret

0000103c <__ashldi3>:
    103c:	0f 93       	push	r16
    103e:	08 30       	cpi	r16, 0x08	; 8
    1040:	90 f0       	brcs	.+36     	; 0x1066 <__ashldi3+0x2a>
    1042:	98 2f       	mov	r25, r24
    1044:	87 2f       	mov	r24, r23
    1046:	76 2f       	mov	r23, r22
    1048:	65 2f       	mov	r22, r21
    104a:	54 2f       	mov	r21, r20
    104c:	43 2f       	mov	r20, r19
    104e:	32 2f       	mov	r19, r18
    1050:	22 27       	eor	r18, r18
    1052:	08 50       	subi	r16, 0x08	; 8
    1054:	f4 cf       	rjmp	.-24     	; 0x103e <__ashldi3+0x2>
    1056:	22 0f       	add	r18, r18
    1058:	33 1f       	adc	r19, r19
    105a:	44 1f       	adc	r20, r20
    105c:	55 1f       	adc	r21, r21
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 95       	dec	r16
    1068:	b2 f7       	brpl	.-20     	; 0x1056 <__ashldi3+0x1a>
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <__ashrdi3>:
    106e:	97 fb       	bst	r25, 7
    1070:	10 f8       	bld	r1, 0

00001072 <__lshrdi3>:
    1072:	16 94       	lsr	r1
    1074:	00 08       	sbc	r0, r0
    1076:	0f 93       	push	r16
    1078:	08 30       	cpi	r16, 0x08	; 8
    107a:	98 f0       	brcs	.+38     	; 0x10a2 <__lshrdi3+0x30>
    107c:	08 50       	subi	r16, 0x08	; 8
    107e:	23 2f       	mov	r18, r19
    1080:	34 2f       	mov	r19, r20
    1082:	45 2f       	mov	r20, r21
    1084:	56 2f       	mov	r21, r22
    1086:	67 2f       	mov	r22, r23
    1088:	78 2f       	mov	r23, r24
    108a:	89 2f       	mov	r24, r25
    108c:	90 2d       	mov	r25, r0
    108e:	f4 cf       	rjmp	.-24     	; 0x1078 <__lshrdi3+0x6>
    1090:	05 94       	asr	r0
    1092:	97 95       	ror	r25
    1094:	87 95       	ror	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	57 95       	ror	r21
    109c:	47 95       	ror	r20
    109e:	37 95       	ror	r19
    10a0:	27 95       	ror	r18
    10a2:	0a 95       	dec	r16
    10a4:	aa f7       	brpl	.-22     	; 0x1090 <__lshrdi3+0x1e>
    10a6:	0f 91       	pop	r16
    10a8:	08 95       	ret

000010aa <__cmpdi2_s8>:
    10aa:	00 24       	eor	r0, r0
    10ac:	a7 fd       	sbrc	r26, 7
    10ae:	00 94       	com	r0
    10b0:	2a 17       	cp	r18, r26
    10b2:	30 05       	cpc	r19, r0
    10b4:	40 05       	cpc	r20, r0
    10b6:	50 05       	cpc	r21, r0
    10b8:	60 05       	cpc	r22, r0
    10ba:	70 05       	cpc	r23, r0
    10bc:	80 05       	cpc	r24, r0
    10be:	90 05       	cpc	r25, r0
    10c0:	08 95       	ret

000010c2 <__subsf3>:
    10c2:	50 58       	subi	r21, 0x80	; 128

000010c4 <__addsf3>:
    10c4:	bb 27       	eor	r27, r27
    10c6:	aa 27       	eor	r26, r26
    10c8:	0e d0       	rcall	.+28     	; 0x10e6 <__addsf3x>
    10ca:	48 c1       	rjmp	.+656    	; 0x135c <__fp_round>
    10cc:	39 d1       	rcall	.+626    	; 0x1340 <__fp_pscA>
    10ce:	30 f0       	brcs	.+12     	; 0x10dc <__addsf3+0x18>
    10d0:	3e d1       	rcall	.+636    	; 0x134e <__fp_pscB>
    10d2:	20 f0       	brcs	.+8      	; 0x10dc <__addsf3+0x18>
    10d4:	31 f4       	brne	.+12     	; 0x10e2 <__addsf3+0x1e>
    10d6:	9f 3f       	cpi	r25, 0xFF	; 255
    10d8:	11 f4       	brne	.+4      	; 0x10de <__addsf3+0x1a>
    10da:	1e f4       	brtc	.+6      	; 0x10e2 <__addsf3+0x1e>
    10dc:	2e c1       	rjmp	.+604    	; 0x133a <__fp_nan>
    10de:	0e f4       	brtc	.+2      	; 0x10e2 <__addsf3+0x1e>
    10e0:	e0 95       	com	r30
    10e2:	e7 fb       	bst	r30, 7
    10e4:	24 c1       	rjmp	.+584    	; 0x132e <__fp_inf>

000010e6 <__addsf3x>:
    10e6:	e9 2f       	mov	r30, r25
    10e8:	4a d1       	rcall	.+660    	; 0x137e <__fp_split3>
    10ea:	80 f3       	brcs	.-32     	; 0x10cc <__addsf3+0x8>
    10ec:	ba 17       	cp	r27, r26
    10ee:	62 07       	cpc	r22, r18
    10f0:	73 07       	cpc	r23, r19
    10f2:	84 07       	cpc	r24, r20
    10f4:	95 07       	cpc	r25, r21
    10f6:	18 f0       	brcs	.+6      	; 0x10fe <__addsf3x+0x18>
    10f8:	71 f4       	brne	.+28     	; 0x1116 <__addsf3x+0x30>
    10fa:	9e f5       	brtc	.+102    	; 0x1162 <__addsf3x+0x7c>
    10fc:	62 c1       	rjmp	.+708    	; 0x13c2 <__fp_zero>
    10fe:	0e f4       	brtc	.+2      	; 0x1102 <__addsf3x+0x1c>
    1100:	e0 95       	com	r30
    1102:	0b 2e       	mov	r0, r27
    1104:	ba 2f       	mov	r27, r26
    1106:	a0 2d       	mov	r26, r0
    1108:	0b 01       	movw	r0, r22
    110a:	b9 01       	movw	r22, r18
    110c:	90 01       	movw	r18, r0
    110e:	0c 01       	movw	r0, r24
    1110:	ca 01       	movw	r24, r20
    1112:	a0 01       	movw	r20, r0
    1114:	11 24       	eor	r1, r1
    1116:	ff 27       	eor	r31, r31
    1118:	59 1b       	sub	r21, r25
    111a:	99 f0       	breq	.+38     	; 0x1142 <__addsf3x+0x5c>
    111c:	59 3f       	cpi	r21, 0xF9	; 249
    111e:	50 f4       	brcc	.+20     	; 0x1134 <__addsf3x+0x4e>
    1120:	50 3e       	cpi	r21, 0xE0	; 224
    1122:	68 f1       	brcs	.+90     	; 0x117e <__addsf3x+0x98>
    1124:	1a 16       	cp	r1, r26
    1126:	f0 40       	sbci	r31, 0x00	; 0
    1128:	a2 2f       	mov	r26, r18
    112a:	23 2f       	mov	r18, r19
    112c:	34 2f       	mov	r19, r20
    112e:	44 27       	eor	r20, r20
    1130:	58 5f       	subi	r21, 0xF8	; 248
    1132:	f3 cf       	rjmp	.-26     	; 0x111a <__addsf3x+0x34>
    1134:	46 95       	lsr	r20
    1136:	37 95       	ror	r19
    1138:	27 95       	ror	r18
    113a:	a7 95       	ror	r26
    113c:	f0 40       	sbci	r31, 0x00	; 0
    113e:	53 95       	inc	r21
    1140:	c9 f7       	brne	.-14     	; 0x1134 <__addsf3x+0x4e>
    1142:	7e f4       	brtc	.+30     	; 0x1162 <__addsf3x+0x7c>
    1144:	1f 16       	cp	r1, r31
    1146:	ba 0b       	sbc	r27, r26
    1148:	62 0b       	sbc	r22, r18
    114a:	73 0b       	sbc	r23, r19
    114c:	84 0b       	sbc	r24, r20
    114e:	ba f0       	brmi	.+46     	; 0x117e <__addsf3x+0x98>
    1150:	91 50       	subi	r25, 0x01	; 1
    1152:	a1 f0       	breq	.+40     	; 0x117c <__addsf3x+0x96>
    1154:	ff 0f       	add	r31, r31
    1156:	bb 1f       	adc	r27, r27
    1158:	66 1f       	adc	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	c2 f7       	brpl	.-16     	; 0x1150 <__addsf3x+0x6a>
    1160:	0e c0       	rjmp	.+28     	; 0x117e <__addsf3x+0x98>
    1162:	ba 0f       	add	r27, r26
    1164:	62 1f       	adc	r22, r18
    1166:	73 1f       	adc	r23, r19
    1168:	84 1f       	adc	r24, r20
    116a:	48 f4       	brcc	.+18     	; 0x117e <__addsf3x+0x98>
    116c:	87 95       	ror	r24
    116e:	77 95       	ror	r23
    1170:	67 95       	ror	r22
    1172:	b7 95       	ror	r27
    1174:	f7 95       	ror	r31
    1176:	9e 3f       	cpi	r25, 0xFE	; 254
    1178:	08 f0       	brcs	.+2      	; 0x117c <__addsf3x+0x96>
    117a:	b3 cf       	rjmp	.-154    	; 0x10e2 <__addsf3+0x1e>
    117c:	93 95       	inc	r25
    117e:	88 0f       	add	r24, r24
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__addsf3x+0x9e>
    1182:	99 27       	eor	r25, r25
    1184:	ee 0f       	add	r30, r30
    1186:	97 95       	ror	r25
    1188:	87 95       	ror	r24
    118a:	08 95       	ret

0000118c <__divsf3>:
    118c:	0c d0       	rcall	.+24     	; 0x11a6 <__divsf3x>
    118e:	e6 c0       	rjmp	.+460    	; 0x135c <__fp_round>
    1190:	de d0       	rcall	.+444    	; 0x134e <__fp_pscB>
    1192:	40 f0       	brcs	.+16     	; 0x11a4 <__divsf3+0x18>
    1194:	d5 d0       	rcall	.+426    	; 0x1340 <__fp_pscA>
    1196:	30 f0       	brcs	.+12     	; 0x11a4 <__divsf3+0x18>
    1198:	21 f4       	brne	.+8      	; 0x11a2 <__divsf3+0x16>
    119a:	5f 3f       	cpi	r21, 0xFF	; 255
    119c:	19 f0       	breq	.+6      	; 0x11a4 <__divsf3+0x18>
    119e:	c7 c0       	rjmp	.+398    	; 0x132e <__fp_inf>
    11a0:	51 11       	cpse	r21, r1
    11a2:	10 c1       	rjmp	.+544    	; 0x13c4 <__fp_szero>
    11a4:	ca c0       	rjmp	.+404    	; 0x133a <__fp_nan>

000011a6 <__divsf3x>:
    11a6:	eb d0       	rcall	.+470    	; 0x137e <__fp_split3>
    11a8:	98 f3       	brcs	.-26     	; 0x1190 <__divsf3+0x4>

000011aa <__divsf3_pse>:
    11aa:	99 23       	and	r25, r25
    11ac:	c9 f3       	breq	.-14     	; 0x11a0 <__divsf3+0x14>
    11ae:	55 23       	and	r21, r21
    11b0:	b1 f3       	breq	.-20     	; 0x119e <__divsf3+0x12>
    11b2:	95 1b       	sub	r25, r21
    11b4:	55 0b       	sbc	r21, r21
    11b6:	bb 27       	eor	r27, r27
    11b8:	aa 27       	eor	r26, r26
    11ba:	62 17       	cp	r22, r18
    11bc:	73 07       	cpc	r23, r19
    11be:	84 07       	cpc	r24, r20
    11c0:	38 f0       	brcs	.+14     	; 0x11d0 <__divsf3_pse+0x26>
    11c2:	9f 5f       	subi	r25, 0xFF	; 255
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	44 1f       	adc	r20, r20
    11cc:	aa 1f       	adc	r26, r26
    11ce:	a9 f3       	breq	.-22     	; 0x11ba <__divsf3_pse+0x10>
    11d0:	33 d0       	rcall	.+102    	; 0x1238 <__divsf3_pse+0x8e>
    11d2:	0e 2e       	mov	r0, r30
    11d4:	3a f0       	brmi	.+14     	; 0x11e4 <__divsf3_pse+0x3a>
    11d6:	e0 e8       	ldi	r30, 0x80	; 128
    11d8:	30 d0       	rcall	.+96     	; 0x123a <__divsf3_pse+0x90>
    11da:	91 50       	subi	r25, 0x01	; 1
    11dc:	50 40       	sbci	r21, 0x00	; 0
    11de:	e6 95       	lsr	r30
    11e0:	00 1c       	adc	r0, r0
    11e2:	ca f7       	brpl	.-14     	; 0x11d6 <__divsf3_pse+0x2c>
    11e4:	29 d0       	rcall	.+82     	; 0x1238 <__divsf3_pse+0x8e>
    11e6:	fe 2f       	mov	r31, r30
    11e8:	27 d0       	rcall	.+78     	; 0x1238 <__divsf3_pse+0x8e>
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	bb 1f       	adc	r27, r27
    11f2:	26 17       	cp	r18, r22
    11f4:	37 07       	cpc	r19, r23
    11f6:	48 07       	cpc	r20, r24
    11f8:	ab 07       	cpc	r26, r27
    11fa:	b0 e8       	ldi	r27, 0x80	; 128
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__divsf3_pse+0x56>
    11fe:	bb 0b       	sbc	r27, r27
    1200:	80 2d       	mov	r24, r0
    1202:	bf 01       	movw	r22, r30
    1204:	ff 27       	eor	r31, r31
    1206:	93 58       	subi	r25, 0x83	; 131
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	2a f0       	brmi	.+10     	; 0x1216 <__divsf3_pse+0x6c>
    120c:	9e 3f       	cpi	r25, 0xFE	; 254
    120e:	51 05       	cpc	r21, r1
    1210:	68 f0       	brcs	.+26     	; 0x122c <__divsf3_pse+0x82>
    1212:	8d c0       	rjmp	.+282    	; 0x132e <__fp_inf>
    1214:	d7 c0       	rjmp	.+430    	; 0x13c4 <__fp_szero>
    1216:	5f 3f       	cpi	r21, 0xFF	; 255
    1218:	ec f3       	brlt	.-6      	; 0x1214 <__divsf3_pse+0x6a>
    121a:	98 3e       	cpi	r25, 0xE8	; 232
    121c:	dc f3       	brlt	.-10     	; 0x1214 <__divsf3_pse+0x6a>
    121e:	86 95       	lsr	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b7 95       	ror	r27
    1226:	f7 95       	ror	r31
    1228:	9f 5f       	subi	r25, 0xFF	; 255
    122a:	c9 f7       	brne	.-14     	; 0x121e <__divsf3_pse+0x74>
    122c:	88 0f       	add	r24, r24
    122e:	91 1d       	adc	r25, r1
    1230:	96 95       	lsr	r25
    1232:	87 95       	ror	r24
    1234:	97 f9       	bld	r25, 7
    1236:	08 95       	ret
    1238:	e1 e0       	ldi	r30, 0x01	; 1
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	bb 1f       	adc	r27, r27
    1242:	62 17       	cp	r22, r18
    1244:	73 07       	cpc	r23, r19
    1246:	84 07       	cpc	r24, r20
    1248:	ba 07       	cpc	r27, r26
    124a:	20 f0       	brcs	.+8      	; 0x1254 <__divsf3_pse+0xaa>
    124c:	62 1b       	sub	r22, r18
    124e:	73 0b       	sbc	r23, r19
    1250:	84 0b       	sbc	r24, r20
    1252:	ba 0b       	sbc	r27, r26
    1254:	ee 1f       	adc	r30, r30
    1256:	88 f7       	brcc	.-30     	; 0x123a <__divsf3_pse+0x90>
    1258:	e0 95       	com	r30
    125a:	08 95       	ret

0000125c <__fixunssfsi>:
    125c:	98 d0       	rcall	.+304    	; 0x138e <__fp_splitA>
    125e:	88 f0       	brcs	.+34     	; 0x1282 <__fixunssfsi+0x26>
    1260:	9f 57       	subi	r25, 0x7F	; 127
    1262:	90 f0       	brcs	.+36     	; 0x1288 <__fixunssfsi+0x2c>
    1264:	b9 2f       	mov	r27, r25
    1266:	99 27       	eor	r25, r25
    1268:	b7 51       	subi	r27, 0x17	; 23
    126a:	a0 f0       	brcs	.+40     	; 0x1294 <__fixunssfsi+0x38>
    126c:	d1 f0       	breq	.+52     	; 0x12a2 <__fixunssfsi+0x46>
    126e:	66 0f       	add	r22, r22
    1270:	77 1f       	adc	r23, r23
    1272:	88 1f       	adc	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	1a f0       	brmi	.+6      	; 0x127e <__fixunssfsi+0x22>
    1278:	ba 95       	dec	r27
    127a:	c9 f7       	brne	.-14     	; 0x126e <__fixunssfsi+0x12>
    127c:	12 c0       	rjmp	.+36     	; 0x12a2 <__fixunssfsi+0x46>
    127e:	b1 30       	cpi	r27, 0x01	; 1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <__fixunssfsi+0x46>
    1282:	9f d0       	rcall	.+318    	; 0x13c2 <__fp_zero>
    1284:	b1 e0       	ldi	r27, 0x01	; 1
    1286:	08 95       	ret
    1288:	9c c0       	rjmp	.+312    	; 0x13c2 <__fp_zero>
    128a:	67 2f       	mov	r22, r23
    128c:	78 2f       	mov	r23, r24
    128e:	88 27       	eor	r24, r24
    1290:	b8 5f       	subi	r27, 0xF8	; 248
    1292:	39 f0       	breq	.+14     	; 0x12a2 <__fixunssfsi+0x46>
    1294:	b9 3f       	cpi	r27, 0xF9	; 249
    1296:	cc f3       	brlt	.-14     	; 0x128a <__fixunssfsi+0x2e>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b3 95       	inc	r27
    12a0:	d9 f7       	brne	.-10     	; 0x1298 <__fixunssfsi+0x3c>
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__fixunssfsi+0x56>
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	08 95       	ret

000012b4 <__floatunsisf>:
    12b4:	e8 94       	clt
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <__floatsisf+0x12>

000012b8 <__floatsisf>:
    12b8:	97 fb       	bst	r25, 7
    12ba:	3e f4       	brtc	.+14     	; 0x12ca <__floatsisf+0x12>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	99 23       	and	r25, r25
    12cc:	a9 f0       	breq	.+42     	; 0x12f8 <__floatsisf+0x40>
    12ce:	f9 2f       	mov	r31, r25
    12d0:	96 e9       	ldi	r25, 0x96	; 150
    12d2:	bb 27       	eor	r27, r27
    12d4:	93 95       	inc	r25
    12d6:	f6 95       	lsr	r31
    12d8:	87 95       	ror	r24
    12da:	77 95       	ror	r23
    12dc:	67 95       	ror	r22
    12de:	b7 95       	ror	r27
    12e0:	f1 11       	cpse	r31, r1
    12e2:	f8 cf       	rjmp	.-16     	; 0x12d4 <__floatsisf+0x1c>
    12e4:	fa f4       	brpl	.+62     	; 0x1324 <__floatsisf+0x6c>
    12e6:	bb 0f       	add	r27, r27
    12e8:	11 f4       	brne	.+4      	; 0x12ee <__floatsisf+0x36>
    12ea:	60 ff       	sbrs	r22, 0
    12ec:	1b c0       	rjmp	.+54     	; 0x1324 <__floatsisf+0x6c>
    12ee:	6f 5f       	subi	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	16 c0       	rjmp	.+44     	; 0x1324 <__floatsisf+0x6c>
    12f8:	88 23       	and	r24, r24
    12fa:	11 f0       	breq	.+4      	; 0x1300 <__floatsisf+0x48>
    12fc:	96 e9       	ldi	r25, 0x96	; 150
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <__floatsisf+0x6a>
    1300:	77 23       	and	r23, r23
    1302:	21 f0       	breq	.+8      	; 0x130c <__floatsisf+0x54>
    1304:	9e e8       	ldi	r25, 0x8E	; 142
    1306:	87 2f       	mov	r24, r23
    1308:	76 2f       	mov	r23, r22
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <__floatsisf+0x5e>
    130c:	66 23       	and	r22, r22
    130e:	71 f0       	breq	.+28     	; 0x132c <__floatsisf+0x74>
    1310:	96 e8       	ldi	r25, 0x86	; 134
    1312:	86 2f       	mov	r24, r22
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	2a f0       	brmi	.+10     	; 0x1324 <__floatsisf+0x6c>
    131a:	9a 95       	dec	r25
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	da f7       	brpl	.-10     	; 0x131a <__floatsisf+0x62>
    1324:	88 0f       	add	r24, r24
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	97 f9       	bld	r25, 7
    132c:	08 95       	ret

0000132e <__fp_inf>:
    132e:	97 f9       	bld	r25, 7
    1330:	9f 67       	ori	r25, 0x7F	; 127
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	08 95       	ret

0000133a <__fp_nan>:
    133a:	9f ef       	ldi	r25, 0xFF	; 255
    133c:	80 ec       	ldi	r24, 0xC0	; 192
    133e:	08 95       	ret

00001340 <__fp_pscA>:
    1340:	00 24       	eor	r0, r0
    1342:	0a 94       	dec	r0
    1344:	16 16       	cp	r1, r22
    1346:	17 06       	cpc	r1, r23
    1348:	18 06       	cpc	r1, r24
    134a:	09 06       	cpc	r0, r25
    134c:	08 95       	ret

0000134e <__fp_pscB>:
    134e:	00 24       	eor	r0, r0
    1350:	0a 94       	dec	r0
    1352:	12 16       	cp	r1, r18
    1354:	13 06       	cpc	r1, r19
    1356:	14 06       	cpc	r1, r20
    1358:	05 06       	cpc	r0, r21
    135a:	08 95       	ret

0000135c <__fp_round>:
    135c:	09 2e       	mov	r0, r25
    135e:	03 94       	inc	r0
    1360:	00 0c       	add	r0, r0
    1362:	11 f4       	brne	.+4      	; 0x1368 <__fp_round+0xc>
    1364:	88 23       	and	r24, r24
    1366:	52 f0       	brmi	.+20     	; 0x137c <__fp_round+0x20>
    1368:	bb 0f       	add	r27, r27
    136a:	40 f4       	brcc	.+16     	; 0x137c <__fp_round+0x20>
    136c:	bf 2b       	or	r27, r31
    136e:	11 f4       	brne	.+4      	; 0x1374 <__fp_round+0x18>
    1370:	60 ff       	sbrs	r22, 0
    1372:	04 c0       	rjmp	.+8      	; 0x137c <__fp_round+0x20>
    1374:	6f 5f       	subi	r22, 0xFF	; 255
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	8f 4f       	sbci	r24, 0xFF	; 255
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	08 95       	ret

0000137e <__fp_split3>:
    137e:	57 fd       	sbrc	r21, 7
    1380:	90 58       	subi	r25, 0x80	; 128
    1382:	44 0f       	add	r20, r20
    1384:	55 1f       	adc	r21, r21
    1386:	59 f0       	breq	.+22     	; 0x139e <__fp_splitA+0x10>
    1388:	5f 3f       	cpi	r21, 0xFF	; 255
    138a:	71 f0       	breq	.+28     	; 0x13a8 <__fp_splitA+0x1a>
    138c:	47 95       	ror	r20

0000138e <__fp_splitA>:
    138e:	88 0f       	add	r24, r24
    1390:	97 fb       	bst	r25, 7
    1392:	99 1f       	adc	r25, r25
    1394:	61 f0       	breq	.+24     	; 0x13ae <__fp_splitA+0x20>
    1396:	9f 3f       	cpi	r25, 0xFF	; 255
    1398:	79 f0       	breq	.+30     	; 0x13b8 <__fp_splitA+0x2a>
    139a:	87 95       	ror	r24
    139c:	08 95       	ret
    139e:	12 16       	cp	r1, r18
    13a0:	13 06       	cpc	r1, r19
    13a2:	14 06       	cpc	r1, r20
    13a4:	55 1f       	adc	r21, r21
    13a6:	f2 cf       	rjmp	.-28     	; 0x138c <__fp_split3+0xe>
    13a8:	46 95       	lsr	r20
    13aa:	f1 df       	rcall	.-30     	; 0x138e <__fp_splitA>
    13ac:	08 c0       	rjmp	.+16     	; 0x13be <__fp_splitA+0x30>
    13ae:	16 16       	cp	r1, r22
    13b0:	17 06       	cpc	r1, r23
    13b2:	18 06       	cpc	r1, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	f1 cf       	rjmp	.-30     	; 0x139a <__fp_splitA+0xc>
    13b8:	86 95       	lsr	r24
    13ba:	71 05       	cpc	r23, r1
    13bc:	61 05       	cpc	r22, r1
    13be:	08 94       	sec
    13c0:	08 95       	ret

000013c2 <__fp_zero>:
    13c2:	e8 94       	clt

000013c4 <__fp_szero>:
    13c4:	bb 27       	eor	r27, r27
    13c6:	66 27       	eor	r22, r22
    13c8:	77 27       	eor	r23, r23
    13ca:	cb 01       	movw	r24, r22
    13cc:	97 f9       	bld	r25, 7
    13ce:	08 95       	ret

000013d0 <log10>:
    13d0:	0a d0       	rcall	.+20     	; 0x13e6 <log>
    13d2:	29 ed       	ldi	r18, 0xD9	; 217
    13d4:	3b e5       	ldi	r19, 0x5B	; 91
    13d6:	4e ed       	ldi	r20, 0xDE	; 222
    13d8:	5e e3       	ldi	r21, 0x3E	; 62
    13da:	45 c0       	rjmp	.+138    	; 0x1466 <__mulsf3>
    13dc:	0e f0       	brts	.+2      	; 0x13e0 <log10+0x10>
    13de:	a6 c0       	rjmp	.+332    	; 0x152c <__fp_mpack>
    13e0:	ac cf       	rjmp	.-168    	; 0x133a <__fp_nan>
    13e2:	68 94       	set
    13e4:	a4 cf       	rjmp	.-184    	; 0x132e <__fp_inf>

000013e6 <log>:
    13e6:	d3 df       	rcall	.-90     	; 0x138e <__fp_splitA>
    13e8:	c8 f3       	brcs	.-14     	; 0x13dc <log10+0xc>
    13ea:	99 23       	and	r25, r25
    13ec:	d1 f3       	breq	.-12     	; 0x13e2 <log10+0x12>
    13ee:	c6 f3       	brts	.-16     	; 0x13e0 <log10+0x10>
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	1f 93       	push	r17
    13f6:	0f 93       	push	r16
    13f8:	ff 92       	push	r15
    13fa:	c9 2f       	mov	r28, r25
    13fc:	dd 27       	eor	r29, r29
    13fe:	88 23       	and	r24, r24
    1400:	2a f0       	brmi	.+10     	; 0x140c <log+0x26>
    1402:	21 97       	sbiw	r28, 0x01	; 1
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	da f7       	brpl	.-10     	; 0x1402 <log+0x1c>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e8       	ldi	r20, 0x80	; 128
    1412:	5f eb       	ldi	r21, 0xBF	; 191
    1414:	9f e3       	ldi	r25, 0x3F	; 63
    1416:	88 39       	cpi	r24, 0x98	; 152
    1418:	20 f0       	brcs	.+8      	; 0x1422 <log+0x3c>
    141a:	80 3e       	cpi	r24, 0xE0	; 224
    141c:	30 f0       	brcs	.+12     	; 0x142a <log+0x44>
    141e:	21 96       	adiw	r28, 0x01	; 1
    1420:	8f 77       	andi	r24, 0x7F	; 127
    1422:	50 de       	rcall	.-864    	; 0x10c4 <__addsf3>
    1424:	e6 e2       	ldi	r30, 0x26	; 38
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <log+0x4a>
    142a:	4c de       	rcall	.-872    	; 0x10c4 <__addsf3>
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8b d0       	rcall	.+278    	; 0x1548 <__fp_powser>
    1432:	8b 01       	movw	r16, r22
    1434:	be 01       	movw	r22, r28
    1436:	ec 01       	movw	r28, r24
    1438:	fb 2e       	mov	r15, r27
    143a:	6f 57       	subi	r22, 0x7F	; 127
    143c:	71 09       	sbc	r23, r1
    143e:	75 95       	asr	r23
    1440:	77 1f       	adc	r23, r23
    1442:	88 0b       	sbc	r24, r24
    1444:	99 0b       	sbc	r25, r25
    1446:	38 df       	rcall	.-400    	; 0x12b8 <__floatsisf>
    1448:	28 e1       	ldi	r18, 0x18	; 24
    144a:	32 e7       	ldi	r19, 0x72	; 114
    144c:	41 e3       	ldi	r20, 0x31	; 49
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	16 d0       	rcall	.+44     	; 0x147e <__mulsf3x>
    1452:	af 2d       	mov	r26, r15
    1454:	98 01       	movw	r18, r16
    1456:	ae 01       	movw	r20, r28
    1458:	ff 90       	pop	r15
    145a:	0f 91       	pop	r16
    145c:	1f 91       	pop	r17
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	41 de       	rcall	.-894    	; 0x10e6 <__addsf3x>
    1464:	7b cf       	rjmp	.-266    	; 0x135c <__fp_round>

00001466 <__mulsf3>:
    1466:	0b d0       	rcall	.+22     	; 0x147e <__mulsf3x>
    1468:	79 cf       	rjmp	.-270    	; 0x135c <__fp_round>
    146a:	6a df       	rcall	.-300    	; 0x1340 <__fp_pscA>
    146c:	28 f0       	brcs	.+10     	; 0x1478 <__mulsf3+0x12>
    146e:	6f df       	rcall	.-290    	; 0x134e <__fp_pscB>
    1470:	18 f0       	brcs	.+6      	; 0x1478 <__mulsf3+0x12>
    1472:	95 23       	and	r25, r21
    1474:	09 f0       	breq	.+2      	; 0x1478 <__mulsf3+0x12>
    1476:	5b cf       	rjmp	.-330    	; 0x132e <__fp_inf>
    1478:	60 cf       	rjmp	.-320    	; 0x133a <__fp_nan>
    147a:	11 24       	eor	r1, r1
    147c:	a3 cf       	rjmp	.-186    	; 0x13c4 <__fp_szero>

0000147e <__mulsf3x>:
    147e:	7f df       	rcall	.-258    	; 0x137e <__fp_split3>
    1480:	a0 f3       	brcs	.-24     	; 0x146a <__mulsf3+0x4>

00001482 <__mulsf3_pse>:
    1482:	95 9f       	mul	r25, r21
    1484:	d1 f3       	breq	.-12     	; 0x147a <__mulsf3+0x14>
    1486:	95 0f       	add	r25, r21
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	55 1f       	adc	r21, r21
    148c:	62 9f       	mul	r22, r18
    148e:	f0 01       	movw	r30, r0
    1490:	72 9f       	mul	r23, r18
    1492:	bb 27       	eor	r27, r27
    1494:	f0 0d       	add	r31, r0
    1496:	b1 1d       	adc	r27, r1
    1498:	63 9f       	mul	r22, r19
    149a:	aa 27       	eor	r26, r26
    149c:	f0 0d       	add	r31, r0
    149e:	b1 1d       	adc	r27, r1
    14a0:	aa 1f       	adc	r26, r26
    14a2:	64 9f       	mul	r22, r20
    14a4:	66 27       	eor	r22, r22
    14a6:	b0 0d       	add	r27, r0
    14a8:	a1 1d       	adc	r26, r1
    14aa:	66 1f       	adc	r22, r22
    14ac:	82 9f       	mul	r24, r18
    14ae:	22 27       	eor	r18, r18
    14b0:	b0 0d       	add	r27, r0
    14b2:	a1 1d       	adc	r26, r1
    14b4:	62 1f       	adc	r22, r18
    14b6:	73 9f       	mul	r23, r19
    14b8:	b0 0d       	add	r27, r0
    14ba:	a1 1d       	adc	r26, r1
    14bc:	62 1f       	adc	r22, r18
    14be:	83 9f       	mul	r24, r19
    14c0:	a0 0d       	add	r26, r0
    14c2:	61 1d       	adc	r22, r1
    14c4:	22 1f       	adc	r18, r18
    14c6:	74 9f       	mul	r23, r20
    14c8:	33 27       	eor	r19, r19
    14ca:	a0 0d       	add	r26, r0
    14cc:	61 1d       	adc	r22, r1
    14ce:	23 1f       	adc	r18, r19
    14d0:	84 9f       	mul	r24, r20
    14d2:	60 0d       	add	r22, r0
    14d4:	21 1d       	adc	r18, r1
    14d6:	82 2f       	mov	r24, r18
    14d8:	76 2f       	mov	r23, r22
    14da:	6a 2f       	mov	r22, r26
    14dc:	11 24       	eor	r1, r1
    14de:	9f 57       	subi	r25, 0x7F	; 127
    14e0:	50 40       	sbci	r21, 0x00	; 0
    14e2:	8a f0       	brmi	.+34     	; 0x1506 <__mulsf3_pse+0x84>
    14e4:	e1 f0       	breq	.+56     	; 0x151e <__mulsf3_pse+0x9c>
    14e6:	88 23       	and	r24, r24
    14e8:	4a f0       	brmi	.+18     	; 0x14fc <__mulsf3_pse+0x7a>
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	bb 1f       	adc	r27, r27
    14f0:	66 1f       	adc	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	a9 f7       	brne	.-22     	; 0x14e6 <__mulsf3_pse+0x64>
    14fc:	9e 3f       	cpi	r25, 0xFE	; 254
    14fe:	51 05       	cpc	r21, r1
    1500:	70 f0       	brcs	.+28     	; 0x151e <__mulsf3_pse+0x9c>
    1502:	15 cf       	rjmp	.-470    	; 0x132e <__fp_inf>
    1504:	5f cf       	rjmp	.-322    	; 0x13c4 <__fp_szero>
    1506:	5f 3f       	cpi	r21, 0xFF	; 255
    1508:	ec f3       	brlt	.-6      	; 0x1504 <__mulsf3_pse+0x82>
    150a:	98 3e       	cpi	r25, 0xE8	; 232
    150c:	dc f3       	brlt	.-10     	; 0x1504 <__mulsf3_pse+0x82>
    150e:	86 95       	lsr	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	b7 95       	ror	r27
    1516:	f7 95       	ror	r31
    1518:	e7 95       	ror	r30
    151a:	9f 5f       	subi	r25, 0xFF	; 255
    151c:	c1 f7       	brne	.-16     	; 0x150e <__mulsf3_pse+0x8c>
    151e:	fe 2b       	or	r31, r30
    1520:	88 0f       	add	r24, r24
    1522:	91 1d       	adc	r25, r1
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	97 f9       	bld	r25, 7
    152a:	08 95       	ret

0000152c <__fp_mpack>:
    152c:	9f 3f       	cpi	r25, 0xFF	; 255
    152e:	31 f0       	breq	.+12     	; 0x153c <__fp_mpack_finite+0xc>

00001530 <__fp_mpack_finite>:
    1530:	91 50       	subi	r25, 0x01	; 1
    1532:	20 f4       	brcc	.+8      	; 0x153c <__fp_mpack_finite+0xc>
    1534:	87 95       	ror	r24
    1536:	77 95       	ror	r23
    1538:	67 95       	ror	r22
    153a:	b7 95       	ror	r27
    153c:	88 0f       	add	r24, r24
    153e:	91 1d       	adc	r25, r1
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret

00001548 <__fp_powser>:
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	1f 93       	push	r17
    154e:	0f 93       	push	r16
    1550:	ff 92       	push	r15
    1552:	ef 92       	push	r14
    1554:	df 92       	push	r13
    1556:	7b 01       	movw	r14, r22
    1558:	8c 01       	movw	r16, r24
    155a:	68 94       	set
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <__fp_powser+0x20>
    155e:	da 2e       	mov	r13, r26
    1560:	ef 01       	movw	r28, r30
    1562:	8d df       	rcall	.-230    	; 0x147e <__mulsf3x>
    1564:	fe 01       	movw	r30, r28
    1566:	e8 94       	clt
    1568:	a5 91       	lpm	r26, Z+
    156a:	25 91       	lpm	r18, Z+
    156c:	35 91       	lpm	r19, Z+
    156e:	45 91       	lpm	r20, Z+
    1570:	55 91       	lpm	r21, Z+
    1572:	ae f3       	brts	.-22     	; 0x155e <__fp_powser+0x16>
    1574:	ef 01       	movw	r28, r30
    1576:	b7 dd       	rcall	.-1170   	; 0x10e6 <__addsf3x>
    1578:	fe 01       	movw	r30, r28
    157a:	97 01       	movw	r18, r14
    157c:	a8 01       	movw	r20, r16
    157e:	da 94       	dec	r13
    1580:	79 f7       	brne	.-34     	; 0x1560 <__fp_powser+0x18>
    1582:	df 90       	pop	r13
    1584:	ef 90       	pop	r14
    1586:	ff 90       	pop	r15
    1588:	0f 91       	pop	r16
    158a:	1f 91       	pop	r17
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <abs>:
    1592:	97 ff       	sbrs	r25, 7
    1594:	03 c0       	rjmp	.+6      	; 0x159c <abs+0xa>
    1596:	91 95       	neg	r25
    1598:	81 95       	neg	r24
    159a:	91 09       	sbc	r25, r1
    159c:	08 95       	ret

0000159e <__eerd_byte_m8>:
    159e:	e1 99       	sbic	0x1c, 1	; 28
    15a0:	fe cf       	rjmp	.-4      	; 0x159e <__eerd_byte_m8>
    15a2:	9f bb       	out	0x1f, r25	; 31
    15a4:	8e bb       	out	0x1e, r24	; 30
    15a6:	e0 9a       	sbi	0x1c, 0	; 28
    15a8:	99 27       	eor	r25, r25
    15aa:	8d b3       	in	r24, 0x1d	; 29
    15ac:	08 95       	ret

000015ae <__eewr_byte_m8>:
    15ae:	26 2f       	mov	r18, r22

000015b0 <__eewr_r18_m8>:
    15b0:	e1 99       	sbic	0x1c, 1	; 28
    15b2:	fe cf       	rjmp	.-4      	; 0x15b0 <__eewr_r18_m8>
    15b4:	9f bb       	out	0x1f, r25	; 31
    15b6:	8e bb       	out	0x1e, r24	; 30
    15b8:	2d bb       	out	0x1d, r18	; 29
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	e2 9a       	sbi	0x1c, 2	; 28
    15c0:	e1 9a       	sbi	0x1c, 1	; 28
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	08 95       	ret

000015c8 <_exit>:
    15c8:	f8 94       	cli

000015ca <__stop_program>:
    15ca:	ff cf       	rjmp	.-2      	; 0x15ca <__stop_program>
